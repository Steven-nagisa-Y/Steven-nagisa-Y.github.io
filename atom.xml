<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小渚w的博客小站</title>
  <icon>https://www.gravatar.com/avatar/6ca04f1323835a0e11ca88932d9026b8</icon>
  <subtitle>小渚w的博客小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ryzenx.com/"/>
  <updated>2022-01-14T05:16:20.228Z</updated>
  <id>https://ryzenx.com/</id>
  
  <author>
    <name>Steven Yan</name>
    <email>me@StevenOS.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ECMAScript 6+标准学习</title>
    <link href="https://ryzenx.com/2022/01/JS-ES6/"/>
    <id>https://ryzenx.com/2022/01/JS-ES6/</id>
    <published>2022-01-10T04:09:06.000Z</published>
    <updated>2022-01-14T05:16:20.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-6-学习笔记"><a href="#ECMAScript-6-学习笔记" class="headerlink" title="ECMAScript 6+学习笔记"></a>ECMAScript 6+学习笔记</h1><blockquote><p>ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。</p></blockquote><blockquote><ul><li><p>本笔记主要参考了阮一峰老师的开源教程：<a href="https://es6.ruanyifeng.com/https://es6.ruanyifeng.com/">《ECMAScript 6 入门教程》</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/">MDN Web Docs</a></p></li><li><p><a href="https://tc39.es/">ECMAScript TC39</a></p></li></ul></blockquote><blockquote><p>Update Time:</p></blockquote><span id="more"></span><p>根据我的理解将内容分为两个大的部分：<strong>新增</strong>和<strong>扩展</strong>。</p><h2 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h2><h3 id="1-Let-and-Const-Declarations"><a href="#1-Let-and-Const-Declarations" class="headerlink" title="[1] Let and Const Declarations"></a>[1] Let and Const Declarations</h3><p><code>let</code>仅在当作用范围有效，且无如<code>var</code>的变量提升：在 JavaScript 中，<code>var</code>声明的变量在赋值之前就已经存在，其值为<code>undefined</code>。</p><p><code>let</code>不允许重复声明。</p><p><code>let</code>新增了块级作用域。能够防止内层变量覆盖全局变量，防止内层变量泄露到全局变量。</p><p><code>const</code>声明一个只读、不变的“常量”，实际上固定了一个变量的内存地址。当<code>const</code>声明<strong>对象</strong>或<strong>数组</strong>时，其指向的地址不变，当指向对象的值是可变的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">arr.push(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// -&gt; [1]</span></span><br><span class="line">obj.name = <span class="string">&quot;obj&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="comment">// -&gt; &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-String-的新增方法"><a href="#2-String-的新增方法" class="headerlink" title="[2] String 的新增方法"></a>[2] String 的新增方法</h3><ul><li><code>String.fromCodePoint(/*unicode*/)</code> 用于返回 Unicode</li><li><code>String.raw(/*string*/)</code> 用于返回原始字符串，即将字符串转义后显示</li><li><code>String.prototype.codePointAt(/*index*/)</code> 解析字符串中的 Unicode 码</li><li><code>String.prototype.normalize(/*arg*/)</code> 用于合成多字节 Unicode 字</li><li><code>String.prototype.includes(/*toFind*/)</code> 返回是否包含参数字符串</li><li><code>String.prototype.startsWith(/*toFind*/)</code> 返回字符串头部是否是参数字符串</li><li><code>String.prototype.endsWit(/*toFind*/)</code> 返回字符串尾部是否是参数字符串</li><li><code>String.prototype.repeat(/*uint n*/)</code> 将字符串重复 n 次</li><li><code>String.prototype.padStart(/*uint len, string*/)</code> 使用第二个参数在起始补全第一个参数值的长度</li><li><code>String.prototype.padEnd(/*uint len, string*/)</code> 使用第二个参数在末尾补全第一个参数值的长度</li><li><code>String.prototype.trimStart()</code> 消除起始空格，不修改原字符串</li><li><code>String.prototype.trimEnd()</code> 消除末尾空格，不修改原字符串</li><li><code>String.prototype.matchAll()</code> 返回正则所有匹配</li><li><code>String.prototype.replaceAll(/*old, new*/)</code> 全部替换匹配值</li><li><code>String.prototype.at(/*index*/)</code> 返回指定位置的字符</li></ul><h3 id="3-RegExp"><a href="#3-RegExp" class="headerlink" title="[3] RegExp"></a>[3] RegExp</h3><p>新增修饰符<code>u</code>: Unicode 模式，能够正常识别双字符 Unicode 字，同时<code>.</code>能够正常匹配所有 Unicode 字符</p><p>新增<code>RegExp.prototype.unicode</code>检查是否有<code>u</code>修饰符</p><p>新增修饰符<code>y</code>: 从上一个匹配到的位置开始匹配</p><p>新增<code>RegExp.prototype.sticky</code>检查是否有<code>y</code>修饰符</p><p>新增<code>RegExp.prototype.flags</code>显示所有修饰符</p><p>新增修饰符<code>s</code>: dotAll，使得<code>.</code>修饰所有字符</p><p>新增后行断言：lookbehind：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已有先行断言</span></span><br><span class="line">/\d+(?=%)/  <span class="comment">/* 表示匹配%前方的数字 */</span></span><br><span class="line"><span class="comment">// 新增后行断言</span></span><br><span class="line"><span class="regexp">/(?&lt;=#)\d+/</span>  <span class="comment">/* 表示匹配#之后的数字 */</span></span><br></pre></td></tr></table></figure><p>新增命名组匹配（类似 Python 中），可以进行后续引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reDate = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> matchRes = reDate.exec(<span class="string">&quot;2022-01-01&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; year, month, day &#125; = matchRes.groups;</span><br><span class="line"><span class="keyword">const</span> reTwice = <span class="regexp">/^(?&lt;word&gt;\w+)-\k&lt;word&gt;$/</span>;</span><br><span class="line">reTwice.test(<span class="string">&quot;abc-abc&quot;</span>);</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="4-Number"><a href="#4-Number" class="headerlink" title="[4] Number"></a>[4] Number</h3><p>新增二进制<code>0b0100</code>八进制<code>0o4</code>。转换：<code>Number(&#39;0b0100&#39;) = 4</code></p><p>新增数值分隔符<code>1000 == 1_000</code></p><p>新增<code>Number.isFinite(/*number*/)</code> 判断是否为有限<strong>数值</strong></p><p>新增<code>Number.isNaN(/*number*/)</code> 判断是否为<code>NaN</code>类型</p><p>新增<code>Number.isInteger()</code> 判断是否为整数。特别地，JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值；如果数值的精度超过这个限度，第 54 位及后面的位就会被丢弃，这种情况下，<code>Number.isInteger</code>可能会误判；如果一个数值的绝对值小于<code>Number.MIN_VALUE</code>（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0，这时，<code>Number.isInteger</code>也会误判</p><p>新增<code>Number.EPSILON</code>代表一个极小的常量<code>Number.EPSILON === Math.pow(2, -52)</code></p><p>新增<code>Number.isSafeInteger()</code>，同时新增最大、最小整数常量<code>Number.MAX_SAFE_INTEGER</code> <code>Number.MIN_SAFE_INTEGER</code></p><h3 id="5-Math"><a href="#5-Math" class="headerlink" title="[5] Math"></a>[5] Math</h3><ul><li><p><code>Math.trunc(/*number*/)</code> 去除小数部分，返回整数部分；首先转换为数值，若无法转换，返回<code>NaN</code></p></li><li><p><code>Math.sign(/*number*/)</code> 判断参数正负，返回值：<code>+1 -1 0 -0 NaN</code></p></li><li><p><code>Math.cbrt(/*number*/)</code> 计算立方根</p></li><li><p><code>Math.clz32(/*number*/)</code> 将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0</p></li><li><p><code>Math.imul(/*numbers*/)</code> 返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0x7fffffff</span> * <span class="number">0x7fffffff</span>) | <span class="number">0</span>;</span><br><span class="line"><span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="built_in">Math</span>.imul(<span class="number">0x7fffffff</span>, <span class="number">0x7fffffff</span>);</span><br><span class="line"><span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Math.fround(/*number*/)</code> 返回一个数的 32 位单精度浮点数形式</p></li><li><p><code>Math.hypot(/*numbers*/)</code> 返回所有参数的平方和的开方</p></li><li><p><code>Math.expm1(/*number*/)</code> 返回$e^x-1$，等价于<code>Math.exp(x) - 1</code></p></li><li><p><code>Math.log1p(/*number*/)</code> 返回$\ln(1 + x)$</p></li><li><p><code>Math.log10(/*number*/)</code> 返回$\lg x$</p></li><li><p><code>Math.log2(/*number*/)</code> 返回$\log_2 x$</p></li><li><p><code>Math.sinh(x)</code> 返回<code>x</code>的双曲正弦（hyperbolic sine）</p></li><li><p><code>Math.cosh(x)</code> 返回<code>x</code>的双曲余弦（hyperbolic cosine）</p></li><li><p><code>Math.tanh(x)</code> 返回<code>x</code>的双曲正切（hyperbolic tangent）</p></li><li><p><code>Math.asinh(x)</code> 返回<code>x</code>的反双曲正弦（inverse hyperbolic sine）</p></li><li><p><code>Math.acosh(x)</code> 返回<code>x</code>的反双曲余弦（inverse hyperbolic cosine）</p></li><li><p><code>Math.atanh(x)</code> 返回<code>x</code>的反双曲正切（inverse hyperbolic tangent）</p></li></ul><h3 id="6-BigInt"><a href="#6-BigInt" class="headerlink" title="[6] BigInt"></a>[6] BigInt</h3><p>用来表示整数，没有位数限制。需要添加后缀<code>n</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">7378697629483821n</span>;</span><br><span class="line"><span class="keyword">typeof</span> n;</span><br><span class="line"><span class="comment">// -&gt; &#x27;bigint&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以进行转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BigInt</span>(<span class="string">&quot;123&quot;</span>); <span class="comment">// -&gt; 123n</span></span><br></pre></td></tr></table></figure><p>实例方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BigInt</span>.prototype.toString();</span><br><span class="line"><span class="built_in">BigInt</span>.prototype.valueOf();</span><br><span class="line"><span class="built_in">BigInt</span>.prototype.toLocaleString();</span><br></pre></td></tr></table></figure><p>静态方法：</p><ul><li><code>BigInt.asUintN(width, BigInt)</code>： 给定的 BigInt 转为 0 到 2width - 1 之间对应的值。</li><li><code>BigInt.asIntN(width, BigInt)</code>：给定的 BigInt 转为 -2width - 1 到 2width - 1 - 1 之间对应的值。</li><li><code>BigInt.parseInt(string[, radix])</code>：近似于<code>Number.parseInt()</code>，将一个字符串转换成指定进制的 BigInt。</li></ul><h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h2><h3 id="1-globalThis"><a href="#1-globalThis" class="headerlink" title="(1) globalThis"></a>(1) globalThis</h3><p><code>globalThis</code>是全局对象(The <em>global object</em>)的扩展，其属性如下：</p><blockquote><p>This property has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.</p></blockquote><h3 id="2-Destructuring-Assignment"><a href="#2-Destructuring-Assignment" class="headerlink" title="(2) Destructuring Assignment"></a>(2) Destructuring Assignment</h3><p>变量的解构语法能够方便地解构数组(array)、对象(object)内部的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LeftHandSideExpression = AssignmentExpression</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br><span class="line"><span class="comment">// -&gt; 2 1</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">getter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将变量扩充到window全局对象中</span></span><br><span class="line"><span class="keyword">var</span> &#123; name, getter &#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="comment">// -&gt; &#x27;obj&#x27;</span></span><br><span class="line"><span class="comment">// getter中的this-&gt;window</span></span><br><span class="line">getter();</span><br><span class="line"><span class="comment">// -&gt; &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure><p>同样可以多层解构和部分解构，只要与被解构的结构相同即可。</p><p>由于 JavaScript 内部皆对象，则对象的解构可以用于能够被转换为对象的：数组、字符串、数值、布尔值。</p><h3 id="3-Unicode"><a href="#3-Unicode" class="headerlink" title="(3) Unicode"></a>(3) Unicode</h3><p>单字节 Unicode: <code>&quot;\u0061&quot;</code>，双字节 Unicode: <code>&quot;\u&#123;20BB7&#125;&quot;</code></p><h3 id="4-Template-strings"><a href="#4-Template-strings" class="headerlink" title="(4) Template strings"></a>(4) Template strings</h3><p>字符串的扩展声明语法，使用反引号表示`，内部可插入表达式。可以包含多行字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resp = &#123; <span class="attr">status</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">`response: <span class="subst">$&#123;resp.status == <span class="number">0</span> ? <span class="string">&quot;ok&quot;</span> : <span class="string">&quot;error&quot;</span>&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(text);</span><br></pre></td></tr></table></figure><p>可以作为第一个参数传入函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ++<span class="built_in">parseInt</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add<span class="string">`12`</span>);</span><br><span class="line"><span class="comment">// -&gt; 13</span></span><br></pre></td></tr></table></figure><p>但是如果包含模版内表达式，则会换转为多个参数。将表达式切分为多个部分，传递给参数 0，然后将表达式结果依次传递给后续参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">add<span class="string">`<span class="subst">$&#123;a + b&#125;</span>`</span>; <span class="comment">// 错误！Uncaught ReferenceError: Invalid left-hand side expression in prefix operation</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">arg, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">  <span class="keyword">if</span> (args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> args) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">tag<span class="string">`part1<span class="subst">$&#123;a + b&#125;</span>part2<span class="subst">$&#123;a * b&#125;</span>part3`</span>;</span><br><span class="line"><span class="comment">// -&gt; [&#x27;part1&#x27;, &#x27;part2&#x27;, &#x27;part3&#x27;]</span></span><br><span class="line"><span class="comment">// -&gt; 3</span></span><br><span class="line"><span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h3 id="5-Function"><a href="#5-Function" class="headerlink" title="(5) Function"></a>(5) Function</h3><p>可为参数添加默认值<code>function(n = 0) &#123;&#125;</code> 当传入参数为<code>undefined</code>时触发，需要放在尾部</p><p>将默认值设定为<code>undefined</code>代表是可以省略的</p><p><code>Function.prototype.length</code>返回需要传入参数的个数</p><p>新增<strong>rest</strong>参数<code>function(...rest) &#123;&#125;</code>包含传递参数的数组，必须放在尾部</p><p><code>Function.prototype.name</code>返回函数名，或者匿名函数的变量名</p><p>箭头函数<code>() =&gt; &#123;&#125;</code>用于快速编写匿名函数，其不包含自己的作用域。将<code>this</code>固定化，有利于封装回调函数</p><h2 id="变化内容"><a href="#变化内容" class="headerlink" title="变化内容"></a>变化内容</h2><h3 id="lt-1-gt-RegExp-Constructor"><a href="#lt-1-gt-RegExp-Constructor" class="headerlink" title="&lt;1&gt; RegExp Constructor"></a>&lt;1&gt; RegExp Constructor</h3><p><code>RegExp</code>构造函数可以同时接收正则表达式和修饰符参数。参数会覆盖表达式中的修饰符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/gi</span>, <span class="string">&quot;i&quot;</span>).flags;</span><br><span class="line"><span class="comment">// -&gt; &#x27;i&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="lt-2-gt-RegExp-property"><a href="#lt-2-gt-RegExp-property" class="headerlink" title="&lt;2&gt; RegExp property"></a>&lt;2&gt; RegExp property</h3><p>ES6 将这 4 个方法，在语言内部全部调用<code>RegExp</code>的实例方法，从而做到所有与正则相关的方法，全都定义在<code>RegExp</code>对象上。</p><ul><li><code>String.prototype.match</code> 调用 <code>RegExp.prototype[Symbol.match]</code></li><li><code>String.prototype.replace</code> 调用 <code>RegExp.prototype[Symbol.replace]</code></li><li><code>String.prototype.search</code> 调用 <code>RegExp.prototype[Symbol.search]</code></li><li><code>String.prototype.split</code> 调用 <code>RegExp.prototype[Symbol.split]</code></li></ul><h3 id="lt-3-gt-Number"><a href="#lt-3-gt-Number" class="headerlink" title="&lt;3&gt; Number"></a>&lt;3&gt; Number</h3><p><code>parseInt() parseFloat()</code>移动到<code>Number</code>对象中</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ECMAScript-6-学习笔记&quot;&gt;&lt;a href=&quot;#ECMAScript-6-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6+学习笔记&quot;&gt;&lt;/a&gt;ECMAScript 6+学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。&lt;/p&gt;
&lt;p&gt;因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本笔记主要参考了阮一峰老师的开源教程：&lt;a href=&quot;https://es6.ruanyifeng.com/https://es6.ruanyifeng.com/&quot;&gt;《ECMAScript 6 入门教程》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://tc39.es/&quot;&gt;ECMAScript TC39&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Update Time:&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JS" scheme="https://ryzenx.com/tags/js/"/>
    
      <category term="Note" scheme="https://ryzenx.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>给桌面换上bing壁纸  S-Wallpaper</title>
    <link href="https://ryzenx.com/2021/06/S-Wallpaper/"/>
    <id>https://ryzenx.com/2021/06/S-Wallpaper/</id>
    <published>2021-06-09T09:16:25.000Z</published>
    <updated>2021-06-09T14:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="给桌面换上bing壁纸-S-Wallpaper"><a href="#给桌面换上bing壁纸-S-Wallpaper" class="headerlink" title="给桌面换上bing壁纸  S-Wallpaper"></a>给桌面换上bing壁纸  S-Wallpaper</h1><blockquote><p><a href="https://bing.com">bing</a>的每日壁纸都很好看，很多时候就想把它下载下来，保存、设置为自己的电脑桌面壁纸。</p><p>网上有类似功能的软件不少，不过自己实际做一个还是很有趣味的！</p><p>服务器端是通过php实现的，下面会给出代码，可以自行部署在服务器上然后实现多端保存。</p></blockquote><span id="more"></span><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>服务器端的文件名称为<code>bing.php</code>。其作用不难理解，就是解析bing.com的背景图片然后保存到服务器，并且直接给请求端返回为<code>.jpg</code>图片。</p><p>目前解析的bing.com壁纸分辨率为<strong>1080P</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 保存文件的文件夹名称</span></span><br><span class="line"><span class="variable">$path</span>=date(<span class="string">&#x27;Ym&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!file_exists(<span class="variable">$path</span>)) &#123;</span><br><span class="line">    mkdir(<span class="variable">$path</span>, <span class="number">0777</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$last</span> = strtotime(<span class="string">&quot;-1 month&quot;</span>, time());</span><br><span class="line"><span class="variable">$last_month</span> = date(<span class="string">&quot;Ym&quot;</span>, <span class="variable">$last</span>);  <span class="comment">//上个月</span></span><br><span class="line"><span class="comment">// 删除上个月保存的图片，可以自行调整（防止服务器硬盘空间被占用满）</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="variable">$last_month</span>)) &#123;</span><br><span class="line">    deleteDir(<span class="variable">$last_month</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 保存图片的文件名</span></span><br><span class="line"><span class="variable">$pathurl</span> = <span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&#x27;d&#x27;</span>).<span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!is_file(<span class="variable">$pathurl</span>)) &#123;</span><br><span class="line">    <span class="comment">// 对bing.com进行请求</span></span><br><span class="line">    <span class="comment">// 中国区的bing壁纸更新可能有时差</span></span><br><span class="line">    <span class="variable">$str</span> = file_get_contents(<span class="string">&#x27;https://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1&#x27;</span>);</span><br><span class="line">    <span class="comment">// 对请求的内容进行正则匹配</span></span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/&lt;urlBase&gt;(.+?)&lt;\/urlBase&gt;/ies&quot;</span>, <span class="variable">$str</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">        <span class="comment">// 生成bing.com图片的实际地址</span></span><br><span class="line">        <span class="variable">$imgurl</span> = <span class="string">&#x27;https://cn.bing.com&#x27;</span>.<span class="variable">$matches</span>[<span class="number">1</span>].<span class="string">&#x27;_1920x1080.jpg&#x27;</span>;</span><br><span class="line">        <span class="comment">// 拷贝（下载）图片到本地</span></span><br><span class="line">        copy(<span class="variable">$imgurl</span>, <span class="variable">$pathurl</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果请求、匹配失败，则防护一张预设静态图片，防止请求端得不到数据</span></span><br><span class="line">        <span class="variable">$static_file</span> = <span class="string">&#x27;https://example.com/unamed.jpg&#x27;</span>;</span><br><span class="line">        copy(<span class="variable">$static_file</span>, <span class="variable">$pathurl</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pathurl</span>) &#123;</span><br><span class="line">    <span class="comment">// 向请求端直接返回本图片</span></span><br><span class="line">    header(<span class="string">&#x27;Content-Type: image/jpeg&#x27;</span>);</span><br><span class="line">    header(<span class="string">&quot;Cache-Control: no-store, no-cache, must-revalidate&quot;</span>);  <span class="comment">//强制不缓存</span></span><br><span class="line">    header(<span class="string">&quot;Pragma: no-cache&quot;</span>);  <span class="comment">//禁止本页被缓存</span></span><br><span class="line">    @ob_end_clean();</span><br><span class="line">    @readfile(<span class="variable">$pathurl</span>);</span><br><span class="line">    @flush();</span><br><span class="line">    @ob_flush();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDir</span>(<span class="params"><span class="variable">$path_e</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_dir(<span class="variable">$path_e</span>)) &#123;</span><br><span class="line">        <span class="comment">//扫描一个目录内的所有目录和文件并返回数组</span></span><br><span class="line">        <span class="variable">$dirs</span> = scandir(<span class="variable">$path_e</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$dirs</span> <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">            <span class="comment">//排除目录中的当前目录(.)和上一级目录(..)</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$dir</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$dir</span> != <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是目录则递归子目录，继续操作</span></span><br><span class="line">                <span class="variable">$sonDir</span> = <span class="variable">$path_e</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$dir</span>;</span><br><span class="line">                <span class="keyword">if</span> (is_dir(<span class="variable">$sonDir</span>)) &#123;</span><br><span class="line">                    <span class="comment">//递归删除</span></span><br><span class="line">                    deleteDir(<span class="variable">$sonDir</span>);</span><br><span class="line">                    <span class="comment">//目录内的子目录和文件删除后删除空目录</span></span><br><span class="line">                    @rmdir(<span class="variable">$sonDir</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果是文件直接删除</span></span><br><span class="line">                    @unlink(<span class="variable">$sonDir</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @rmdir(<span class="variable">$path_e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Python-主程序"><a href="#Python-主程序" class="headerlink" title="Python 主程序"></a>Python 主程序</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>下载服务器端的图片文件，并转码为bmp格式，给Windows系统设置为壁纸。</p><blockquote><p>对于其他系统可以自行研究相关代码</p></blockquote><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>一下实例程序为了更加直观的人机交互，设置了很多提示语句，如果想做成无窗口的程序可删除提示语句。</p><h3 id="需求依赖"><a href="#需求依赖" class="headerlink" title="需求依赖"></a>需求依赖</h3><p><code>pyinstaller</code>为打包Python程序所用，直接运行<code>python main.py</code>可以不安装此依赖包</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requests</span><br><span class="line">pywi<span class="symbol">n32</span></span><br><span class="line">Pillow</span><br><span class="line">pyi<span class="symbol">nstaller</span></span><br></pre></td></tr></table></figure><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a><code>main.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: Steven Yan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time, os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> win32api, win32gui, win32con</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tempDir = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span>():</span></span><br><span class="line">    <span class="comment"># month0 = time.strftime(&quot;%Y%m&quot;,time.localtime())</span></span><br><span class="line">    <span class="comment"># today0 = time.strftime(&quot;%d&quot;,time.localtime())</span></span><br><span class="line">    <span class="comment"># myUrl = &quot;https://example.com/home/&quot;+month0+&quot;/&quot;+today0+&quot;.jpg&quot;</span></span><br><span class="line">    myUrl = <span class="string">&quot;http://example.com/home/bing.php&quot;</span></span><br><span class="line">    <span class="keyword">return</span> myUrl</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span>(<span class="params">picUrl</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Downloading picture...\n&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = requests.get(picUrl)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;DONT-MOVE-S-Wallpaper-Pic.jpg&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> ccc:</span><br><span class="line">            ccc.write(req.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Picture saved at: &#123;&#125;\n&quot;</span>.<span class="built_in">format</span>(tempDir + <span class="string">&quot;\\DONT-MOVE-S-Wallpaper-Pic.jpg&quot;</span>))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t download Picture!\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Check your Internet access and try again.&quot;</span>)</span><br><span class="line">        goodBye()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveFile</span>(<span class="params">file,des</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file):</span><br><span class="line">        <span class="built_in">print</span>(file + <span class="string">&quot; is not exist.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;DON&#x27;T MOVE or DELETE picture file!!!&quot;</span>)</span><br><span class="line">        goodBye()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(des):</span><br><span class="line">            os.makedirs(des)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.system(<span class="string">&quot;move /y &quot;</span>+file+<span class="string">&quot; &quot;</span>+des)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convPic</span>(<span class="params">jpg,bmp</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img = Image.<span class="built_in">open</span>(jpg)</span><br><span class="line">        img.save(bmp, <span class="string">&#x27;BMP&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t convert picture.&quot;</span>)</span><br><span class="line">        goodBye()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    os.remove(jpg)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;The picture has been converted successfully.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setWallpaper</span>(<span class="params">picUri</span>):</span></span><br><span class="line">    key = win32api.RegOpenKeyEx(win32con.HKEY_CURRENT_USER, <span class="string">&quot;Control Panel\\Desktop&quot;</span>, <span class="number">0</span>, win32con.KEY_SET_VALUE)</span><br><span class="line">    win32api.RegSetValueEx(key, <span class="string">&quot;WallpaperStyle&quot;</span>, <span class="number">0</span>, win32con.REG_SZ, <span class="string">&quot;10&quot;</span>) </span><br><span class="line">    win32api.RegSetValueEx(key, <span class="string">&quot;TileWallpaper&quot;</span>, <span class="number">0</span>, win32con.REG_SZ, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER, picUri, <span class="number">1</span>+<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n  --&gt; TODAY Wallpaper has been set!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMe</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                 Website: RyzenX.com                ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                     By Steven Yan                    ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodBye</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n  Good Bye! Program will exit soon!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&gt; %s&quot;</span> % <span class="built_in">str</span>(<span class="number">3</span>-i))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This Program only supports Windows&quot;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.system(<span class="string">&quot;mode con cols=60 lines=30&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;color 0e&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;title Daily Wallpaper from Bing.com&quot;</span>)</span><br><span class="line">        printMe()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nNow: %s \n&quot;</span> % time.ctime())</span><br><span class="line">    tempDir = os.getenv(<span class="string">&#x27;TEMP&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your TEMP dir is: &quot;</span> + tempDir + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    downloadPic(getUrl())</span><br><span class="line">    moveFile(<span class="string">&quot;DONT-MOVE-S-Wallpaper-Pic.jpg&quot;</span>,tempDir)</span><br><span class="line">    convPic(tempDir + <span class="string">&quot;\\DONT-MOVE-S-Wallpaper-Pic.jpg&quot;</span>, tempDir + <span class="string">&quot;\\DONT-MOVE-S-Wallpaper-Pic.bmp&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    setWallpaper(tempDir + <span class="string">&quot;\\DONT-MOVE-S-Wallpaper-Pic.bmp&quot;</span>)</span><br><span class="line">    goodBye()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="辅助程序"><a href="#辅助程序" class="headerlink" title="辅助程序"></a>辅助程序</h2><h3 id="Windows启动工具命令行批处理"><a href="#Windows启动工具命令行批处理" class="headerlink" title="Windows启动工具命令行批处理"></a>Windows启动工具命令行批处理</h3><p>为了更好、更优雅地设置Windows开机自运行、右键运行、定时运行主程序，特别编写了这个批处理工具集。</p><p>实现的功能有：</p><ul><li>写入注册表，开机启动</li><li>添加程序到Windows计划任务</li><li>设置为桌面右键菜单项</li></ul><h3 id="start-bat"><a href="#start-bat" class="headerlink" title="start.bat"></a><code>start.bat</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">title Program Starter</span><br><span class="line">%1 %2</span><br><span class="line">ver|find <span class="string">&quot;5.&quot;</span> &gt; nul &amp;&amp; goto :main</span><br><span class="line">mshta vbscript:createobject(<span class="string">&quot;shell.application&quot;</span>).shellexecute(<span class="string">&quot;%~s0&quot;</span>,<span class="string">&quot;goto :main&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;runas&quot;</span>,1)(window.close) &amp; goto :eof</span><br><span class="line">:main</span><br><span class="line">  cls</span><br><span class="line">  mode con cols=60 lines=20</span><br><span class="line">  color 06</span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##        You can just drag your file into here         ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##                                                      ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##                 Website: RyzenX.com                  ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##                      By Steven                       ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  pause</span><br><span class="line">:ch</span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##   1, Add the Program to `Run` Registry               ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##   2, Add the program to scheduled task               ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##   3, Add the program to Desktop Right-Click *Good    ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  <span class="built_in">echo</span> Pleas enter your choice</span><br><span class="line">  <span class="built_in">set</span> /p a= :</span><br><span class="line">  <span class="built_in">set</span> /p src= Enter the Program path:</span><br><span class="line">  <span class="built_in">set</span> /p name= Enter the Key Name (Important):</span><br><span class="line">  <span class="keyword">if</span> %a%==1 goto addReg</span><br><span class="line">  <span class="keyword">if</span> %a%==2 goto addSchtask</span><br><span class="line">  <span class="keyword">if</span> %a%==3 goto rc</span><br><span class="line">  <span class="built_in">echo</span> Not good. &amp; pause &amp; goto ch</span><br><span class="line">:addReg</span><br><span class="line">  reg add <span class="string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span> /v %name% /d %src% /f</span><br><span class="line">  pause&amp;goto main</span><br><span class="line">:addSchtask</span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  <span class="built_in">echo</span> CAUTION: Time formatted like this: 10:10:00 </span><br><span class="line">  <span class="built_in">set</span> /p ttt= What time <span class="keyword">do</span> you want to change your Wallpaper: </span><br><span class="line">  schtasks /create /tn %name% /ru system /tr %src% /sc DAILY /st %ttt%</span><br><span class="line">  pause&amp;goto main</span><br><span class="line">:rc</span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  <span class="built_in">echo</span> Right-Click at desktop, you can click <span class="string">&quot;%name%&quot;</span> to change your wallpaper manually.</span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  pause</span><br><span class="line">  reg add <span class="string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\%name%&quot;</span> /f</span><br><span class="line">  reg add <span class="string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\%name%\command&quot;</span> /f</span><br><span class="line">  reg add <span class="string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\%name%\command&quot;</span> /ve /d <span class="string">&quot;%src%&quot;</span> /f</span><br><span class="line">  pause&amp;goto main</span><br></pre></td></tr></table></figure><h2 id="欢迎使用！"><a href="#欢迎使用！" class="headerlink" title="欢迎使用！"></a>欢迎使用！</h2><p><a href="https://github.com/Steven-nagisa-Y/S-Wallpaper">Steven-nagisa-Y/S-Wallpaper (github.com)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;给桌面换上bing壁纸-S-Wallpaper&quot;&gt;&lt;a href=&quot;#给桌面换上bing壁纸-S-Wallpaper&quot; class=&quot;headerlink&quot; title=&quot;给桌面换上bing壁纸  S-Wallpaper&quot;&gt;&lt;/a&gt;给桌面换上bing壁纸  S-Wallpaper&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bing.com&quot;&gt;bing&lt;/a&gt;的每日壁纸都很好看，很多时候就想把它下载下来，保存、设置为自己的电脑桌面壁纸。&lt;/p&gt;
&lt;p&gt;网上有类似功能的软件不少，不过自己实际做一个还是很有趣味的！&lt;/p&gt;
&lt;p&gt;服务器端是通过php实现的，下面会给出代码，可以自行部署在服务器上然后实现多端保存。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="essay" scheme="https://ryzenx.com/tags/essay/"/>
    
      <category term="code" scheme="https://ryzenx.com/tags/code/"/>
    
      <category term="Python" scheme="https://ryzenx.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Rust 学习记录</title>
    <link href="https://ryzenx.com/2021/05/Rust-learning/"/>
    <id>https://ryzenx.com/2021/05/Rust-learning/</id>
    <published>2021-05-23T08:13:56.000Z</published>
    <updated>2021-09-14T10:12:24.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-语言学习记录"><a href="#Rust-语言学习记录" class="headerlink" title="Rust 语言学习记录"></a>Rust 语言学习记录</h1><blockquote><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>一门赋予每个人 构建可靠且高效软件能力的语言。</p><p>Rust 官方文档 -&gt; <a href="https://doc.rust-lang.org/book/">The Rust Programming Language - (rust-lang.org)</a></p></blockquote><span id="more"></span><h2 id="Rust-安装"><a href="#Rust-安装" class="headerlink" title="Rust 安装"></a>Rust 安装</h2><p>参见<strong>官方文档</strong>：<a href="https://www.rust-lang.org/zh-CN/tools/install">安装 Rust - Rust 程序设计语言 (rust-lang.org)</a></p><p>或者 <strong>菜鸟教程</strong>：<a href="https://www.runoob.com/rust/rust-setup.html">Rust 环境搭建 | 菜鸟教程 (runoob.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rustc -V</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rustc 1.51.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cargo -V</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cargo 1.51.0</span></span><br></pre></td></tr></table></figure><h2 id="使用-Cargo-建立第一个项目"><a href="#使用-Cargo-建立第一个项目" class="headerlink" title="使用 Cargo 建立第一个项目"></a>使用 Cargo 建立第一个项目</h2><p>参考官方：<a href="https://www.rust-lang.org/learn/get-started">Getting started - Rust Programming Language (rust-lang.org)</a></p><h3 id="使用Cargo-toml配置项目"><a href="#使用Cargo-toml配置项目" class="headerlink" title="使用Cargo.toml配置项目"></a>使用Cargo.toml配置项目</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;Steven Yan&quot;</span>]</span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="comment"># 新引入了一个ferris-says包，显示螃蟹对话框</span></span><br><span class="line"><span class="attr">ferris-says</span> = <span class="string">&quot;0.2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="编写主函数"><a href="#编写主函数" class="headerlink" title="编写主函数"></a>编写主函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用新引入的包</span></span><br><span class="line"><span class="keyword">use</span> ferris_says::say;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;stdout, BufWriter&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> stdout = stdout();</span><br><span class="line">    <span class="keyword">let</span> message = <span class="built_in">String</span>::from(<span class="string">&quot;Hello fellow Rustaceans!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> width = message.chars().count();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> writer = BufWriter::new(stdout.lock());</span><br><span class="line">    say(message.as_bytes(), width, &amp;<span class="keyword">mut</span> writer).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建编译项目"><a href="#构建编译项目" class="headerlink" title="构建编译项目"></a>构建编译项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cargo build</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cargo 工具将从crates.io下载依赖包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cargo run</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Compiling one v0.1.0 (/Users/steven/_Code/Rust/one)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.81s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     Running `/Users/steven/_Code/Rust/one/target/debug/one`</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> __________________________</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&lt; Hello fellow Rustaceans! &gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        \</span></span><br><span class="line"><span class="bash"><span class="comment">#         \</span></span></span><br><span class="line"><span class="bash"><span class="comment">#            _~^~^~_</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        \) /  o o  \ (/</span></span><br><span class="line"><span class="meta">#</span><span class="bash">          <span class="string">&#x27;_   -   _&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">          / <span class="string">&#x27;-----&#x27;</span> \</span></span><br></pre></td></tr></table></figure><h3 id="猜字符游戏"><a href="#猜字符游戏" class="headerlink" title="猜字符游戏"></a>猜字符游戏</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guess the number!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> secret_number = rand::thread_rng().gen_range(<span class="number">1</span>..<span class="number">101</span>);</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line">        io::stdin()</span><br><span class="line">            .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">            .expect(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> guess: <span class="built_in">u32</span> = <span class="keyword">match</span> guess.trim().parse() &#123;</span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line">        <span class="keyword">match</span> guess.cmp(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 使用let关键字创建变量，该变量默认是不可变的</span></span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// num1 is not changeable</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num1 = &#123;&#125;&quot;</span>, num1);</span><br><span class="line">    <span class="comment">// 使用mut关键字将该变量声明为可变的</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num2 = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// num2 is changeable</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num2 = &#123;&#125;&quot;</span>, num2);</span><br><span class="line">    num2 += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num2 = &#123;&#125;&quot;</span>, num2);</span><br><span class="line">    <span class="comment">// 常量用关键字const声明，一般用大写，且需要标注值的类型</span></span><br><span class="line">    <span class="keyword">const</span> MAX_NUM: <span class="built_in">u32</span> = <span class="number">100_000</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;MAX_NUM = &#123;&#125; is constants&quot;</span>, MAX_NUM);</span><br><span class="line">    <span class="comment">// 使用let可以对一个变量名重新赋值</span></span><br><span class="line">    <span class="keyword">let</span> num3 = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num3 = &#123;&#125;&quot;</span>, num3);</span><br><span class="line">    <span class="comment">// This declare a NEW variable named num3</span></span><br><span class="line">    <span class="keyword">let</span> num3: <span class="built_in">String</span> = (num3 * <span class="number">2</span>).to_string();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;NEW num3 = &#123;&#125;&quot;</span>, num3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="整形变量"><a href="#整形变量" class="headerlink" title="整形变量"></a>整形变量</h4><table><thead><tr><th>长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td><code>i8</code></td><td><code>u8</code></td></tr><tr><td>16-bit</td><td><code>i16</code></td><td><code>u16</code></td></tr><tr><td>32-bit</td><td><strong>*</strong><code>i32</code></td><td><code>u32</code></td></tr><tr><td>64-bit</td><td><code>i64</code></td><td><code>u64</code></td></tr><tr><td>128-bit</td><td><code>i128</code></td><td><code>u128</code></td></tr><tr><td>arch</td><td><code>isize</code></td><td><code>usize</code></td></tr></tbody></table><h4 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h4><table><thead><tr><th>数字字面值</th><th>例子</th></tr></thead><tbody><tr><td>Decimal (十进制)</td><td><code>98_222</code></td></tr><tr><td>Hex (十六进制)</td><td><code>0xff</code></td></tr><tr><td>Octal (八进制)</td><td><code>0o77</code></td></tr><tr><td>Binary (二进制)</td><td><code>0b1111_0000</code></td></tr><tr><td>Byte (单字节字符)(仅限于<code>u8</code>)</td><td><code>b&#39;A&#39;</code></td></tr></tbody></table><h4 id="浮点变量"><a href="#浮点变量" class="headerlink" title="浮点变量"></a>浮点变量</h4><table><thead><tr><th>长度</th><th>关键字</th></tr></thead><tbody><tr><td>32-bit</td><td><code>f32</code></td></tr><tr><td>64-bit</td><td><strong>*</strong><code>f64</code></td></tr></tbody></table><h4 id="布尔型变量"><a href="#布尔型变量" class="headerlink" title="布尔型变量"></a>布尔型变量</h4><table><thead><tr><th>布尔值</th><th>关键字</th></tr></thead><tbody><tr><td>真</td><td><code>true</code></td></tr><tr><td>假</td><td><code>false</code></td></tr></tbody></table><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p><code>char z = &#39;Z&#39;;</code></p><p>char 大小为四个字节(four bytes)，并代表了一个 Unicode 标量值（Unicode Scalar Value）</p><h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组：元组长度固定；元组中的每一个位置都有一个类型，而且这些不同值的类型也不必是相同的</span></span><br><span class="line"><span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"><span class="comment">// x = 500; y = 6.4; z = 1</span></span><br><span class="line"><span class="comment">// tup.0 = 500; tup.1 = 6.4; tup.2 = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组： Rust 中的数组是固定长度的；数组中的每个元素的类型必须相同</span></span><br><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr[0] = 1; arr[1] = 2; arr[5] = thread &#x27;main&#x27; panicked at &#x27;index out of bounds: the len is 5 but the index is 5&#x27;</span></span><br><span class="line"><span class="comment">// 初始化数组：5个为0的数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>; <span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr = [0, 0, 0, 0, 0];</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> input = <span class="number">5408</span>;</span><br><span class="line">    show_input(input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数签名中，必须声明每个参数的类型。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">show_input</span></span>(input: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Your input is &#123;&#125;&quot;</span>, input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头 -&gt; 指明返回值类型</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">x_times</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="comment">// 不添加;表示一个表达式作为返回值</span></span><br><span class="line">    x * x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h3><p><strong>语句</strong>（<em>Statements</em>）是执行一些操作但不返回值的指令。<strong>表达式</strong>（<em>Expressions</em>）计算并产生一个值。</p><p><code>let x = 10;</code> 是一个语句，<code>5 + 6</code> 是一个表达式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">    n * n</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// n * n 是一个表达式，返回值是25</span></span><br><span class="line"><span class="comment">// m = 25;</span></span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    for_fn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">if_condition</span></span>(a: <span class="built_in">bool</span>, b: <span class="built_in">bool</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &amp;&amp; b &#123;</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> a &#123;</span><br><span class="line">        <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> b &#123;</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">loop_fn</span></span>(times: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;counter = &#123;&#125;&quot;</span>, counter);</span><br><span class="line">        <span class="keyword">if</span> counter &gt;= times &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">while_fn</span></span>(times: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> counter &lt;= times &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;counter = &#123;&#125;&quot;</span>, counter);</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">for_fn</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;value is &#123;&#125;&quot;</span>, ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><h3 id="什么是所有权？"><a href="#什么是所有权？" class="headerlink" title="什么是所有权？"></a>什么是所有权？</h3><blockquote><p>Rust 的核心功能（之一）是 <strong>所有权</strong>（<em>ownership</em>）。虽然该功能很容易解释，但它对语言的其他部分有着深刻的影响。</p><p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。在运行时，所有权系统的任何功能都不会减慢程序。</p></blockquote><h3 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h3><ol><li>Rust 中的每一个值都有一个被称为其 <strong>所有者</strong>（<em>owner</em>）的变量。</li><li>值在任一时刻有且只有一个所有者。</li><li>当所有者（变量）离开作用域，这个值将被丢弃。</li></ol><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// s 在这里无效, 它尚未声明</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 从此处起，s 是有效的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此作用域已结束，s 不再有效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量与数据的交互"><a href="#变量与数据的交互" class="headerlink" title="变量与数据的交互"></a>变量与数据的交互</h3><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line"><span class="comment">// 此时 x = y = 5</span></span><br><span class="line"><span class="comment">// Rust 有一个叫做 Copy trait 的特殊注解，可以用在类似整型这样的存储在栈上的类型上。如果一个类型拥有 Copy trait，一个旧的变量在将其赋值给其他变量后仍然可用。Rust 不允许自身或其任何部分实现了 Drop trait 的类型使用 Copy trait。</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1;</span><br><span class="line"><span class="comment">// 此时应该是s1, s2 -&gt; &quot;hello&quot;两个数据指针指向了同一个地址</span></span><br><span class="line"><span class="comment">// &gt; 当 s2 和 s1 离开作用域，他们都会尝试释放相同的内存。这是一个叫做 二次释放（double free）的错误，也是之前提到过的内存安全性 bug 之一。</span></span><br><span class="line"><span class="comment">// 实际上是s2 -&gt; &quot;hello&quot;, s1被移除掉</span></span><br></pre></td></tr></table></figure><h4 id="有哪些类型是Copy的呢？"><a href="#有哪些类型是Copy的呢？" class="headerlink" title="有哪些类型是Copy的呢？"></a>有哪些类型是<code>Copy</code>的呢？</h4><ul><li>所有整数类型，比如 <code>u32</code>。</li><li>布尔类型，<code>bool</code>，它的值是 <code>true</code> 和 <code>false</code>。</li><li>所有浮点数类型，比如 <code>f64</code>。</li><li>字符类型，<code>char</code>。</li><li>元组，当且仅当其包含的类型也都是 <code>Copy</code> 的时候。比如，<code>(i32, i32)</code> 是 <code>Copy</code> 的，但 <code>(i32, String)</code> 就不是</li></ul><h4 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.clone();</span><br><span class="line"><span class="comment">// s1 -&gt; &quot;hello&quot;(1) s2 -&gt; &quot;hello&quot;(2) </span></span><br><span class="line"><span class="comment">// &quot;hello&quot; 被复制了</span></span><br></pre></td></tr></table></figure><h3 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// s 进入作用域</span></span><br><span class="line">    takes_ownership(s);             <span class="comment">// s 的值移动到函数里 ...</span></span><br><span class="line">                                    <span class="comment">// ... 所以到这里不再有效</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;                      <span class="comment">// x 进入作用域</span></span><br><span class="line">    makes_copy(x);                  <span class="comment">// x 应该移动函数里，</span></span><br><span class="line">                                    <span class="comment">// 但 i32 是 Copy 的，所以在后面可继续使用 x</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span></span><br><span class="line">  <span class="comment">// 所以不会有特殊操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>) &#123; <span class="comment">// some_string 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">makes_copy</span></span>(some_integer: <span class="built_in">i32</span>) &#123; <span class="comment">// some_integer 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_integer);</span><br><span class="line">&#125; <span class="comment">// 这里，some_integer 移出作用域。不会有特殊操作</span></span><br></pre></td></tr></table></figure><h3 id="引用与借用"><a href="#引用与借用" class="headerlink" title="引用与借用"></a>引用与借用</h3><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">// 可变引用</span></span><br><span class="line">    change(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);  <span class="comment">// hello world</span></span><br><span class="line">    <span class="comment">// 只能有一个可变引用</span></span><br><span class="line">    <span class="comment">// cannot borrow `s` as mutable more than once at a time</span></span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="comment">// 我们也不能在拥有不可变引用的同时拥有可变引用。</span></span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s; <span class="comment">// 大问题</span></span><br><span class="line">    <span class="comment">// 一个引用的作用域从声明的地方开始一直持续到最后一次使用为止</span></span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2);</span><br><span class="line">    <span class="comment">// 此位置之后 r1 和 r2 不再使用</span></span><br><span class="line">    <span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="comment">// 错误！无法修改引用的值</span></span><br><span class="line">    some_string.push_str(<span class="string">&quot;, world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(<span class="built_in">str</span>: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">str</span>.push_str(<span class="string">&quot; world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们将获取引用作为函数参数称为 <strong>借用</strong></p><ul><li>在任意给定时间，<strong>要么</strong> 只能有一个可变引用，<strong>要么</strong> 只能有多个不可变引用。</li><li>引用必须总是有效的。</li></ul></blockquote><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><blockquote><p>另一个没有所有权的数据类型是 <em>slice</em>。slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串切片</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> hello = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> world = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line"><span class="comment">// 数字切片</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><blockquote><p>struct<em>，或者 *structure</em>，是一个自定义数据类型，允许你命名和包装多个相关的值，从而形成一个有意义的组合。</p><p>不需要依赖顺序来指定或访问实例中的值。</p><p>定义结构体，需要使用 <code>struct</code> 关键字并为整个结构体提供一个名字。结构体的名字需要描述它所组合的数据的意义。接着，在大括号中，定义每一部分数据的名字和类型，我们称为 <strong>字段</strong>（<em>field</em>）。</p></blockquote><h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    account: <span class="built_in">String</span>,</span><br><span class="line">    id: <span class="built_in">i32</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实例化结构体"><a href="#实例化结构体" class="headerlink" title="实例化结构体"></a>实例化结构体</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = User &#123;</span><br><span class="line">    name: <span class="built_in">String</span>::from(<span class="string">&quot;Van&quot;</span>),</span><br><span class="line">    account: <span class="built_in">String</span>::from(<span class="string">&quot;vansama&quot;</span>),</span><br><span class="line">    id: <span class="number">123456</span>,</span><br><span class="line">    extra: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 可变结构体实例</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> user2 = User &#123;</span><br><span class="line">    name: <span class="built_in">String</span>::from(<span class="string">&quot;Dark&quot;</span>),</span><br><span class="line">    account: <span class="built_in">String</span>::from(<span class="string">&quot;darkholme&quot;</span>),</span><br><span class="line">    id: <span class="number">1234567</span>,</span><br><span class="line">    extra: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 获取值、改变值可以用点&quot;.&quot;号</span></span><br><span class="line"><span class="built_in">print!</span>(user1.name);</span><br><span class="line"><span class="comment">// 从已有结构体创建新结构体实例</span></span><br><span class="line"><span class="keyword">let</span> user3 = User &#123;</span><br><span class="line">    name: <span class="built_in">String</span>::from(<span class="string">&quot;Sam&quot;</span>),</span><br><span class="line">    account: <span class="built_in">String</span>::from(<span class="string">&quot;sans&quot;</span>),</span><br><span class="line">    ..user1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过派生-trait-增加实用功能"><a href="#通过派生-trait-增加实用功能" class="headerlink" title="通过派生 trait 增加实用功能"></a>通过派生 trait 增加实用功能</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加结构体打印功能</span></span><br><span class="line"><span class="comment">// Rust 确实 包含了打印出调试信息的功能，不过我们必须为结构体显式选择这个功能。为此，在结构体定义之前加上 #[derive(Debug)] 注解</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rect1 is &#123;:#?&#125;&quot;</span>, rect1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">rect1 is Rectangle &#123;</span><br><span class="line">    width: <span class="number">30</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p><strong>方法</strong> 与函数类似：它们使用 <code>fn</code> 关键字和名称声明，可以拥有参数和返回值，同时包含在某处调用该方法时会执行的代码。不过方法与函数是不同的，因为它们在结构体的上下文中被定义（或者是枚举或 trait 对象的上下文，将分别在第六章和第十七章讲解），并且它们第一个参数总是 <code>self</code>，它代表调用该方法的结构体实例。</p><p><code>impl</code>块允许有多个。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">can_hold</span></span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt;= other.width &amp;&amp; <span class="keyword">self</span>.height &gt;= other.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect2 = Rectangle &#123; width: <span class="number">10</span>, height: <span class="number">40</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect3 = Rectangle &#123; width: <span class="number">60</span>, height: <span class="number">45</span> &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">      <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">      rect1.area()</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Can rect1 hold rect2? &#123;&#125;&quot;</span>, rect1.can_hold(&amp;rect2));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Can rect1 hold rect3? &#123;&#125;&quot;</span>, rect1.can_hold(&amp;rect3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关联函数"><a href="#关联函数" class="headerlink" title="关联函数"></a>关联函数</h3><p><code>impl</code> 块的另一个有用的功能是：允许在 <code>impl</code> 块中定义 <strong>不</strong> 以 <code>self</code> 作为参数的函数。这被称为 <strong>关联函数</strong>（<em>associated functions</em>），因为它们与结构体相关联。它们仍是函数而不是方法，因为它们并不作用于一个结构体的实例。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如轻松地创建一个正方形</span></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rectangle &#123;</span><br><span class="line">        Rectangle &#123; width: size, height: size &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举与模式匹配"><a href="#枚举与模式匹配" class="headerlink" title="枚举与模式匹配"></a>枚举与模式匹配</h2><p><strong>枚举</strong>（<em>enumerations</em>），也被称作 <em>enums</em>。枚举允许你通过列举可能的 <strong>成员</strong>（<em>variants</em>） 来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，我们会探索一个特别有用的枚举，叫做 <code>Option</code>，它代表一个值要么是某个值要么什么都不是。然后会讲到在 <code>match</code> 表达式中用模式匹配，针对不同的枚举值编写相应要执行的代码。最后会介绍 <code>if let</code>，另一个简洁方便处理代码中枚举的结构。</p><h3 id="创建枚举"><a href="#创建枚举" class="headerlink" title="创建枚举"></a>创建枚举</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举例：IP 地址的类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrType</span></span> &#123;</span><br><span class="line">    v4,</span><br><span class="line">    v6,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">let</span> ipv4 = IpAddrType:v4;</span><br><span class="line"><span class="keyword">let</span> ipv6 = IpAddrType:v6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 IP 数据放在结构体中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span>: <span class="title">IpAddrType</span></span>,</span><br><span class="line">    addr: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简洁的方式：将数据直接放进枚举成员中。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Option-枚举"><a href="#Option-枚举" class="headerlink" title="Option 枚举"></a>Option 枚举</h3><p>Rust 并没有空值，不过它确实拥有一个可以编码存在或不存在概念的枚举。这个枚举是 <code>Option&lt;T&gt;</code>，而且它<a href="https://doc.rust-lang.org/std/option/enum.Option.html">定义于标准库中</a></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Option&lt;T&gt; 枚举是如此有用以至于它甚至被包含在了 prelude 之中，不需要将其显式引入作用域。另外，它的成员也是如此，可以不需要 Option:: 前缀来直接使用 Some 和 None。即便如此 Option&lt;T&gt; 也仍是常规的枚举，Some(T) 和 None 仍是 Option&lt;T&gt; 的成员。</span></span><br><span class="line"><span class="keyword">let</span> some_number = <span class="literal">Some</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h4 id="为什么-Option-lt-T-gt-比空值安全？"><a href="#为什么-Option-lt-T-gt-比空值安全？" class="headerlink" title="为什么 Option&lt;T&gt; 比空值安全？"></a>为什么 <code>Option&lt;T&gt;</code> 比空值安全？</h4><p>当在 Rust 中拥有一个像 <code>i8</code> 这样类型的值时，编译器确保它总是有一个有效的值。只有当使用 <code>Option&lt;i8&gt;</code>（或者任何用到的类型）的时候需要担心可能没有值，而编译器会确保在<code>Option&lt;i8&gt;</code>使用值之前处理了为空的情况。</p><h3 id="控制流运算符"><a href="#控制流运算符" class="headerlink" title="控制流运算符"></a>控制流运算符</h3><p>Rust 有一个叫做 <code>match</code> 的极为强大的控制流运算符，它允许我们将一个值与一系列的模式相比较，并根据相匹配的模式执行相应代码。模式可由字面值、变量、通配符和许多其他内容构成。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter,</span><br><span class="line">    Buck,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">    <span class="comment">// match 分支分为两部分：目标匹配模式和代码；分支之间使用 , 分隔</span></span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">        <span class="comment">// 如果分支代码较短的话通常不使用大括号，如果想要在分支中运行多行代码，可以使用大括号。</span></span><br><span class="line">        Coin::Buck =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;a buck equals 100 coins.&quot;</span>);</span><br><span class="line">            <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rust 中的匹配是 <strong>穷尽的</strong>（<em>exhaustive</em>）：必须穷举到最后的可能性来使代码有效。</p><h3 id="更简洁的控制流"><a href="#更简洁的控制流" class="headerlink" title="更简洁的控制流"></a>更简洁的控制流</h3><p>使用<code>if let</code>实现单个<code>match</code>选项。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> choice = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">match</span> choice &#123;</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;This is 1&quot;</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, choice)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等同于</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="number">1</span> = choice &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;This is 1.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;.&quot;</span>, choice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-语言学习记录&quot;&gt;&lt;a href=&quot;#Rust-语言学习记录&quot; class=&quot;headerlink&quot; title=&quot;Rust 语言学习记录&quot;&gt;&lt;/a&gt;Rust 语言学习记录&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&quot;Rust&quot;&gt;&lt;a href=&quot;#Rust&quot; class=&quot;headerlink&quot; title=&quot;Rust&quot;&gt;&lt;/a&gt;Rust&lt;/h2&gt;&lt;p&gt;一门赋予每个人 构建可靠且高效软件能力的语言。&lt;/p&gt;
&lt;p&gt;Rust 官方文档 -&amp;gt; &lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;The Rust Programming Language - (rust-lang.org)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习" scheme="https://ryzenx.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Rust" scheme="https://ryzenx.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Golang 学习记录</title>
    <link href="https://ryzenx.com/2021/01/Golang-learning/"/>
    <id>https://ryzenx.com/2021/01/Golang-learning/</id>
    <published>2021-01-26T03:17:33.000Z</published>
    <updated>2021-05-23T08:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Golang-学习记录"><a href="#Golang-学习记录" class="headerlink" title="Golang 学习记录"></a>Golang 学习记录</h1><p>[toc]</p><span id="more"></span><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="分组定义"><a href="#分组定义" class="headerlink" title="分组定义"></a>分组定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="comment">// 分组导入</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">4<span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样适用于声明和定义</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">4i <span class="keyword">int</span></span><br><span class="line">  ok <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">4str <span class="keyword">string</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">  cmx <span class="keyword">complex64</span> = <span class="number">10</span> + <span class="number">2i</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出的方法、变量必须是首字母大写</span></span><br><span class="line">math.pi <span class="comment">// cannot refer to unexported name math.pi</span></span><br><span class="line">math.Pi <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><h3 id="Go的多线程"><a href="#Go的多线程" class="headerlink" title="Go的多线程"></a>Go的多线程</h3><ul><li><p><strong>GoRoutine</strong> <code>go f(x)</code>表示在新的线程中执行<code>f(x)</code>，但<code>f</code>和<code>x</code>的求值都是在当前线程。</p></li><li><p><strong>信道</strong>是带有类型的管道，你可以通过它用信道操作符 &lt;- 来发送或者接收值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)  <span class="comment">//创建信道</span></span><br><span class="line">ch &lt;- v    <span class="comment">// 将 v 发送至信道 ch。</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从 ch 接收值并赋予 v。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的参数和返回值需要显式声明类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的返回值也可以提前指定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">power</span><span class="params">(x, n <span class="keyword">int</span>)</span> <span class="params">(z <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  i, z := <span class="number">0</span>, <span class="number">1</span> <span class="comment">// 短变量声明，自动判断类型</span></span><br><span class="line">  <span class="keyword">for</span> ;i &lt; n; i++ &#123;</span><br><span class="line">    z *= x</span><br><span class="line">  &#125;</span><br><span class="line">4<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 基本函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 相当于 while &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">4<span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line">    <span class="comment">// v仅在当前结构体内有效</span></span><br><span class="line">44<span class="keyword">return</span> v</span><br><span class="line">4&#125;</span><br><span class="line">4<span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Go 自动提供了在这些语言中每个 case 后面所需的 break 语句。 除非以 fallthrough 语句结束，否则分支会自动终止。 Go 的另一点重要的不同在于 switch 的 case 无需为常量，且取值不必为整数。</span></span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line">4<span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">44fmt.Println(<span class="string">&quot;macOS.&quot;</span>)</span><br><span class="line">4<span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">44fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line">4<span class="keyword">default</span>:</span><br><span class="line">44fmt.Printf(<span class="string">&quot;%s.\n&quot;</span>, os)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defer 语句会将函数推迟到外层函数返回之后执行。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">4<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">4fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// defer 栈：后进先出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">4<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">44<span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">4&#125;</span><br><span class="line">4fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">done 9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内置接口</span></span><br><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123; String() <span class="keyword">string</span> &#125;</span><br><span class="line"><span class="comment">// fmt包将通过String方法打印值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123; Error() <span class="keyword">string</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image接口</span></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">interface</span> &#123;</span><br><span class="line">    ColorModel() color.Model</span><br><span class="line">    Bounds() image.Rectangle</span><br><span class="line">    At(x, y <span class="keyword">int</span>) color.Color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">4X <span class="keyword">int</span></span><br><span class="line">4Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">4v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">  fmt.Println(v) <span class="comment">// &#123;1, 2&#125;</span></span><br><span class="line">4fmt.Println(v.X) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法：带特殊接受者参数的函数</span></span><br><span class="line"><span class="comment">// 例：为自定义类型写方法</span></span><br><span class="line"><span class="keyword">type</span> iFloat <span class="keyword">float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f iFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -f</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用指针接受者来修改原本的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  v.X = v.X + i</span><br><span class="line">  v.Y = v.Y + i</span><br><span class="line">&#125;</span><br><span class="line">v.Add(<span class="number">5</span>)  <span class="comment">// 对于指针接受者，Go会自动转换成(&amp;v).Add(5)</span></span><br><span class="line">p := &amp;v <span class="comment">// 对于值的接受者，也可以传递指针，Go会自动转换成(*p).Add(5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口:接口类型的变量可以保存任何实现了这些方法的值。</span></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">  Method()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口内部包含了值和具体方法的元组</span></span><br><span class="line">=&gt; (value, <span class="keyword">type</span>)</span><br><span class="line"><span class="comment">// 例</span></span><br><span class="line"><span class="keyword">type</span> Text <span class="keyword">struct</span> &#123;</span><br><span class="line">  S <span class="keyword">string</span></span><br><span class="line">&#125; <span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="comment">// 隐式实现接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Text)</span> <span class="title">Method</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i I</span><br><span class="line">i = &amp;Text&#123;<span class="string">&quot;text&quot;</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;%v, %T&quot;</span>, i, i) <span class="comment">// 输出：&amp;&#123;hh&#125;, *main.Text</span></span><br><span class="line"><span class="comment">// 空接口：用来保存任何类型的值</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;  <span class="comment">// (&lt;nil&gt;, &lt;nil&gt;)</span></span><br><span class="line">i = <span class="number">42</span>  <span class="comment">// (42, int)</span></span><br><span class="line">i = <span class="string">&quot;yes&quot;</span>  <span class="comment">// (yes, string)</span></span><br><span class="line"><span class="comment">// 接口类型判断</span></span><br><span class="line">tmp := i.(<span class="keyword">int</span>)  <span class="comment">// 表示获取i中int类型的值并赋值给t。如果i中类型不是int，则会引发panic</span></span><br><span class="line">tmp, ok := i.(<span class="keyword">string</span>)  <span class="comment">// 如果i保存了string类型的值，ok=true。否则tmp=0,ok=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read方法</span></span><br><span class="line"><span class="comment">// io 包指定了 io.Reader 接口，它表示从数据流的末尾进行读取。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;&#125;</span><br><span class="line"><span class="comment">// Read 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 io.EOF 错误。</span></span><br></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>: <span class="literal">true</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">string</span></span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></span><br><span class="line"><span class="keyword">byte</span> <span class="comment">// uint8 的别名</span></span><br><span class="line"><span class="keyword">rune</span> <span class="comment">// int32 的别名</span></span><br><span class="line">    <span class="comment">// 表示一个 Unicode 码点</span></span><br><span class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 类型转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">37</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><br /><center>未完待续，持续学习中...</center>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Golang-学习记录&quot;&gt;&lt;a href=&quot;#Golang-学习记录&quot; class=&quot;headerlink&quot; title=&quot;Golang 学习记录&quot;&gt;&lt;/a&gt;Golang 学习记录&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="后端" scheme="https://ryzenx.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习" scheme="https://ryzenx.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Golang" scheme="https://ryzenx.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Android开发心得：代码管理</title>
    <link href="https://ryzenx.com/2020/11/Android%E5%BC%80%E5%8F%91-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%BF%83%E5%BE%97/"/>
    <id>https://ryzenx.com/2020/11/Android%E5%BC%80%E5%8F%91-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%BF%83%E5%BE%97/</id>
    <published>2020-11-21T15:01:00.000Z</published>
    <updated>2021-06-13T03:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-开发心得"><a href="#Android-开发心得" class="headerlink" title="Android 开发心得"></a>Android 开发心得</h1><h2 id="1-代码的管理和规范化"><a href="#1-代码的管理和规范化" class="headerlink" title="1. 代码的管理和规范化"></a>1. 代码的管理和规范化</h2><p>举例：包名是<strong>com.example.app</strong></p><span id="more"></span><h3 id="文件的安排"><a href="#文件的安排" class="headerlink" title="文件的安排"></a>文件的安排</h3><ul><li><p>package.java</p><ul><li><p>ui</p><blockquote><p>用于存放控制Activity和UI界面的代码</p></blockquote><ul><li>MainActivity.java 则路径为：<code>com.example.app.ui.MainActivity</code></li><li>LaunchActivity.java</li></ul></li><li><p>service</p><blockquote><p>用于存放服务代码</p></blockquote><ul><li>MediaPlayService.java <code>com.expample.app.service.MediaPlayService</code></li><li>KeepAliveService.java</li></ul></li><li><p>receiver</p><blockquote><p>用于存放监听器代码</p></blockquote><ul><li>BoardcastReceiver.java <code>com.example.app.receiver.BoardcastReceiver</code></li><li>LoadReceiver.java</li></ul></li><li><p>utils</p><blockquote><p>用于存放算法类、通用工具类、引入的计算类代码，一般通知类封装后也放在这里</p></blockquote><ul><li>PlaylistSort.java <code>com.example.app.utils.PlaylistSort</code></li><li>ConvertDataFormat.java</li></ul></li><li><p>sdk</p><blockquote><p>用于存放引入的SDK</p></blockquote><ul><li>AMap.java</li></ul></li></ul></li></ul><p>对于多页面多功能性的复杂app，还会通过模块来再次分类。</p><p>比如app有两个模块：<em>看视频<em>和</em>发消息</em></p><ul><li>package.java<ul><li>media<ul><li>ui</li><li>service</li><li>receiver</li><li>provider</li><li>sdk</li></ul></li><li>message<ul><li>ui</li><li>service</li><li>receiver</li><li>provider</li><li>sdk</li></ul></li></ul></li></ul><p>一般来说对于算法：排序、加密等；可复用的工具：网络请求、网络下载等；系统工具：通知、消息、调整屏幕亮度等。这些都是全部页面、组件都会用到的，所以utils基本是放在主目录下。</p><p>考虑到后续加的功能，例如微信：<code>com.tencent.mm.plugin</code>全部把朋友圈、小视频、小程序等组件都放在了plugin里面。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-开发心得&quot;&gt;&lt;a href=&quot;#Android-开发心得&quot; class=&quot;headerlink&quot; title=&quot;Android 开发心得&quot;&gt;&lt;/a&gt;Android 开发心得&lt;/h1&gt;&lt;h2 id=&quot;1-代码的管理和规范化&quot;&gt;&lt;a href=&quot;#1-代码的管理和规范化&quot; class=&quot;headerlink&quot; title=&quot;1. 代码的管理和规范化&quot;&gt;&lt;/a&gt;1. 代码的管理和规范化&lt;/h2&gt;&lt;p&gt;举例：包名是&lt;strong&gt;com.example.app&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="开发" scheme="https://ryzenx.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>前端页面计算SHA256（模拟区块链货币挖矿过程）</title>
    <link href="https://ryzenx.com/2020/11/Front_Calc_SHA265/"/>
    <id>https://ryzenx.com/2020/11/Front_Calc_SHA265/</id>
    <published>2020-11-14T10:00:23.000Z</published>
    <updated>2020-11-14T10:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端页面计算SHA256"><a href="#前端页面计算SHA256" class="headerlink" title="前端页面计算SHA256"></a>前端页面计算SHA256</h1><blockquote><p>模拟计算区块链货币的“挖矿”过程。参考课程：<a href="https://www.icourse163.org/learn/NJU-1449346161">https://www.icourse163.org/learn/NJU-1449346161</a></p><p>使用了CryptoJS计算SHA256，使用bootstrap框架。</p></blockquote><span id="more"></span><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;onLoad()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>区块: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;basic-addon1&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;block number&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;block&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;calc()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>随机数: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;random&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;random number&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;random&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;calc()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span> <span class="attr">style</span>=<span class="string">&quot;align-items: flex-start;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>数据: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;data&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;With textarea&quot;</span> <span class="attr">style</span>=<span class="string">&quot;min-height: 150px;&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;calc()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>SHA256: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;hash&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;hash number&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;hash&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;word-break:break-all;word-wrap:break-all;resize:unset;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>前几位为0？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;int&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;int&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-area&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;start()&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>Start!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">420px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">226</span>, <span class="number">240</span>, <span class="number">220</span>, <span class="number">200</span>);</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.label</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-area</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: left;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>格式化的字符串为：<code>block=$&#123;block&#125;;random=$&#123;random&#125;;data=$&#123;data&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> block = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> random = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> int = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">src, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>)).join(src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeLocal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  json = <span class="string">`&#123;&quot;block&quot;: &quot;<span class="subst">$&#123;block&#125;</span>&quot;, &quot;random&quot;: &quot;<span class="subst">$&#123;random&#125;</span>&quot;, &quot;data&quot;: &quot;<span class="subst">$&#123;data&#125;</span>&quot;, &quot;int&quot;: &quot;<span class="subst">$&#123;int&#125;</span>&quot;, &quot;hash&quot;: &quot;<span class="subst">$&#123;hash&#125;</span>&quot;&#125;`</span>;</span><br><span class="line">  <span class="built_in">localStorage</span>.calc_hash = json;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value = block;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = random;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value = data;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readLocal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  json = <span class="built_in">localStorage</span>.calc_hash;</span><br><span class="line">  <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">    json = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    json = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(json);</span><br><span class="line">  <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  block = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value;</span><br><span class="line">  random = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value;</span><br><span class="line">  data = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value;</span><br><span class="line">  <span class="keyword">var</span> input = <span class="string">`block=<span class="subst">$&#123;block&#125;</span>;random=<span class="subst">$&#123;random&#125;</span>;data=<span class="subst">$&#123;data&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">var</span> output = CryptoJS.SHA256(input);</span><br><span class="line">  hash = output.toString(CryptoJS.enc.Hex).toUpperCase();</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value = block;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = random;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value = data;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  block = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value;</span><br><span class="line">  random = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value;</span><br><span class="line">  data = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value;</span><br><span class="line">  int = <span class="built_in">Number</span>(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value);</span><br><span class="line">  <span class="keyword">if</span> (int &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;取0的个数太少了！&quot;</span>);</span><br><span class="line">    int = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (int &gt; <span class="number">9</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;取0的个数太多了！\n你想让你的电脑燃烧吗？？&quot;</span>);</span><br><span class="line">    int = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  random = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> now, target, input, output;</span><br><span class="line">  target = repeat(<span class="string">&#x27;0&#x27;</span>, int);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = <span class="string">&#x27;计算中...&#x27;</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (now != target) &#123;</span><br><span class="line">      input = <span class="string">`block=<span class="subst">$&#123;block&#125;</span>;random=<span class="subst">$&#123;random&#125;</span>;data=<span class="subst">$&#123;data&#125;</span>`</span>;</span><br><span class="line">      output = CryptoJS.SHA256(input);</span><br><span class="line">      hash = output.toString(CryptoJS.enc.Hex);</span><br><span class="line">      now = hash.slice(<span class="number">0</span>, int);</span><br><span class="line">      <span class="built_in">console</span>.log(now);</span><br><span class="line">      random += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    random -= <span class="number">1</span>;</span><br><span class="line">    hash = hash.toUpperCase();</span><br><span class="line">    writeLocal();</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  localData = readLocal();</span><br><span class="line">  <span class="keyword">if</span> (localData != <span class="literal">null</span>) &#123;</span><br><span class="line">    block = localData.block;</span><br><span class="line">    random = localData.random;</span><br><span class="line">    data = localData.data;</span><br><span class="line">    int = localData.int;</span><br><span class="line">    hash = localData.hash;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value = block;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = random;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value = data;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = hash;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    writeLocal();</span><br><span class="line">    calc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CodePen-预览"><a href="#CodePen-预览" class="headerlink" title="CodePen 预览"></a>CodePen 预览</h2><p><a href="https://codepen.io/irispro/full/jOrKodY">https://codepen.io/irispro/full/jOrKodY</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端页面计算SHA256&quot;&gt;&lt;a href=&quot;#前端页面计算SHA256&quot; class=&quot;headerlink&quot; title=&quot;前端页面计算SHA256&quot;&gt;&lt;/a&gt;前端页面计算SHA256&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;模拟计算区块链货币的“挖矿”过程。参考课程：&lt;a href=&quot;https://www.icourse163.org/learn/NJU-1449346161&quot;&gt;https://www.icourse163.org/learn/NJU-1449346161&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用了CryptoJS计算SHA256，使用bootstrap框架。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://ryzenx.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="模拟" scheme="https://ryzenx.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>利用Tinify缩小图片体积(Python实现)</title>
    <link href="https://ryzenx.com/2020/08/py-tinify/"/>
    <id>https://ryzenx.com/2020/08/py-tinify/</id>
    <published>2020-08-16T03:31:58.000Z</published>
    <updated>2021-03-07T13:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用Tinify缩小图片体积-Python实现"><a href="#利用Tinify缩小图片体积-Python实现" class="headerlink" title="利用Tinify缩小图片体积(Python实现)"></a>利用Tinify缩小图片体积(Python实现)</h1><blockquote><p>在博客上传图片的时候往往不需要很高的清晰度，越小的图片体积能够减少图床的空间占用。所以我一般会先通过一些工具缩小图片体积。</p><p>具有代表性的在线图片压缩网站是<a href="https://tinypng.com/">tinyPNG</a></p></blockquote><span id="more"></span><h2 id="首先在官网注册api"><a href="#首先在官网注册api" class="headerlink" title="首先在官网注册api"></a>首先在官网注册api</h2><p>-&gt; 官网：<a href="https://tinypng.com/developers">https://tinypng.com/developers</a></p><h2 id="安装python依赖"><a href="#安装python依赖" class="headerlink" title="安装python依赖"></a>安装python依赖</h2><p><code>pip install --upgrade tinify</code></p><h2 id="在py文件中引入依赖"><a href="#在py文件中引入依赖" class="headerlink" title="在py文件中引入依赖"></a>在py文件中引入依赖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tinify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填写api</span></span><br><span class="line">tinify.key = <span class="string">&quot;&lt;your api key here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据需要设置代理</span></span><br><span class="line">tinify.proxy = <span class="string">&quot;http://&lt;user&gt;:&lt;pass&gt;@&lt;ip addr&gt;:&lt;port&gt;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line"><span class="comment"># Author: Steven Yan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tinify</span><br><span class="line"><span class="keyword">import</span> os, time, sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tinify.key = <span class="string">&quot;&lt;your key here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                 Website: StevenOS.com                ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                     By Steven Yan                    ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于在Windows平台设置窗口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setWindow</span>():</span></span><br><span class="line">    os.system(<span class="string">&quot;mode con cols=60 lines=30&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;color 0e&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;title Convert png/jpg to tiny ones&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodBye</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nGood Bye! See you next time!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&gt; %s&quot;</span> % <span class="built_in">str</span>(<span class="number">4</span> - i))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历目录中的文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">for</span> dirpath, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            imgpath = os.path.join(dirpath, file)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;compressing... &quot;</span> + imgpath)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                tinify.from_file(imgpath).to_file(imgpath)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># 如果不是图片文件则显示异常，但不要raiseError</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;...Failed to compress &quot;</span> + imgpath)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;...Maybe it is not a PNG/JPG image.&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;...Or, please check your internet access.\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Saved at &quot;</span> + path)</span><br><span class="line">    goodBye()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPath</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter your image-path: &quot;</span>)</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">        setWindow()</span><br><span class="line">        welcome()</span><br><span class="line">        path = getPath()</span><br><span class="line">        convert(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        welcome()</span><br><span class="line">        path = getPath()</span><br><span class="line">        convert(path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更多语言开发参考"><a href="#更多语言开发参考" class="headerlink" title="更多语言开发参考"></a>更多语言开发参考</h2><p>官方文档：<a href="https://tinypng.com/developers/reference/python">https://tinypng.com/developers/reference/python</a></p><blockquote><p><a href="https://tinypng.com/developers/reference/nodejs">Node.js</a></p><p><a href="https://tinypng.com/developers/reference/java">Java</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用Tinify缩小图片体积-Python实现&quot;&gt;&lt;a href=&quot;#利用Tinify缩小图片体积-Python实现&quot; class=&quot;headerlink&quot; title=&quot;利用Tinify缩小图片体积(Python实现)&quot;&gt;&lt;/a&gt;利用Tinify缩小图片体积(Python实现)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在博客上传图片的时候往往不需要很高的清晰度，越小的图片体积能够减少图床的空间占用。所以我一般会先通过一些工具缩小图片体积。&lt;/p&gt;
&lt;p&gt;具有代表性的在线图片压缩网站是&lt;a href=&quot;https://tinypng.com/&quot;&gt;tinyPNG&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Python" scheme="https://ryzenx.com/tags/python/"/>
    
      <category term="Code" scheme="https://ryzenx.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>绝美终端：Zsh(安装Oh My Zsh)</title>
    <link href="https://ryzenx.com/2020/07/oh-my-zsh/"/>
    <id>https://ryzenx.com/2020/07/oh-my-zsh/</id>
    <published>2020-07-13T14:24:51.000Z</published>
    <updated>2022-01-14T05:12:34.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绝美终端：Zsh-安装-Oh-My-Zsh"><a href="#绝美终端：Zsh-安装-Oh-My-Zsh" class="headerlink" title="绝美终端：Zsh(安装 Oh My Zsh)"></a>绝美终端：Zsh(安装 Oh My Zsh)</h1><blockquote><p>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p><p>“Oh My ZSH!”</p></blockquote><center><a href="https://ohmyz.sh/">Oh-My-zsh网站</a></center><span id="more"></span><h2 id="1-Zsh-是什么？"><a href="#1-Zsh-是什么？" class="headerlink" title="1-Zsh 是什么？"></a>1-Zsh 是什么？</h2><p>Z shell（Zsh）是一款可用作交互式登录的 shell 及脚本编写的命令解释器。Zsh 对 Bourne shell 做出了大量改进，同时加入了 Bash、ksh 及 tcsh 的某些功能。</p><p>特性包括：</p><ul><li>可帮助用户键入常用命令选项及参数的可编程命令行补全功能，自带对数百条命令的支持</li><li>可与任意 Shell 共享命令历史</li><li>可在无需运行外部程序（如 find）的情况下通过 文件扩展匹配文件</li><li>改进变量/数组处理方式</li><li>在单缓冲区内编辑多行命令</li><li>拼写检查</li><li>多种兼容模式（例如，Zsh 可在运行为<code>/bin/sh</code>的情况下伪装成 Bourne shell）</li><li>可编程的命令行界面，包括将提示行信息显示在屏幕右侧并在输入过长指令时自动隐藏的功能</li><li>可加载模块可提供额外支持：完整传输控制协议、Unix 域套接字控制、FTP 客户端及扩展数学函数。</li><li>自带<code>where</code>命令，其与<code>which</code>命令类似，但是显示指定于<code>$PATH</code>中所指定指令的全部位置，而不是仅显示所使用指令的位置。</li><li>目录名称。此功能可让用户设置快捷方式，（如<code>~mydir</code>，与<code>~</code>及<code>~user</code>的工作方式相似）。</li></ul><p>我认识 Zsh 是在 macOS 从<strong>bash</strong>转换为<strong>zsh</strong>的时候，最开始是好奇这个 shell/bash/zsh 到底有什么不同：<a href="https://en.wikipedia.org/wiki/Comparison_of_command_shells">终端有什么不同</a>。后来发现了有 Oh My Zsh 的框架，主题倒是非常好看。</p><h2 id="2-Oh-My-Zsh-是什么？"><a href="#2-Oh-My-Zsh-是什么？" class="headerlink" title="2-Oh-My-Zsh 是什么？"></a>2-Oh-My-Zsh 是什么？</h2><p><em>Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.</em></p><p>Oh My Zsh 是一个开源的、由社区驱动的 zsh 管理框架。</p><p><em>Sounds boring. Let’s try again.</em></p><p>听起来没什么大不了的，来一起试一试。</p><p><em>Oh My Zsh will not make you a 10x developer…but you may feel like one.</em></p><p>Oh My Zsh 不能让你变成 10 倍的开发人员，但你很可能有这个感觉。</p><p><em>Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you’ll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, “that is amazing! are you some sort of genius?”</em></p><p>当你安装好之后，你的终端界面将成为别人讨论的话题，不信给你钱！在命令提示符中的每次击键操作中，您将利用数百个功能强大的插件和精美的主题。陌生人会到咖啡馆来找你，问你：“这太帅了！你是不是天才？”</p><p><em>Finally, you’ll begin to get the sort of attention that you have always felt you deserved. …or maybe you’ll use the time that you’re saving to start flossing more often.</em></p><p>最后，你将开始得到你一直以来应该得到的关注……或者你将用省下来的时间多用牙线清洁下牙齿？</p><p><strong>简单来说</strong>，Oh My Zsh 就是一个用来管理 zsh 的一个框架，有许多的插件、主题还有庞大的社区支持。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-22.51.50.png" alt="截屏2020-07-13-22.51.50"></p><h2 id="3-Zsh-的安装"><a href="#3-Zsh-的安装" class="headerlink" title="3-Zsh 的安装"></a>3-Zsh 的安装</h2><p>在 macOS 中，新版已经自动把终端设置为 Zsh 了，如果没有，可以通过<a href="https://brew.sh/"><strong>HomeBrew</strong></a>进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><p>苹果官方帮助页面：<a href="https://support.apple.com/zh-cn/HT208050">在 Mac 上将 zsh 用作默认 Shell</a></p><hr><p>在 Linux 系统中：</p><ol><li><p>查看内置 shell:</p><p><code>cat /etc/shells</code></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.00.57.png" alt="截屏2020-07-13-23.00.57"></p></li><li><p>用包管理软件进行安装：</p><p><code>sudo apt-get install zsh</code></p></li><li><p>安装 Oh-My-Zsh：</p><p><em>通过 curl</em></p><p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p><p><em>通过 wget</em></p><p><code>sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</code></p><p><strong><code>raw.github.com</code>页面可能被 DNS 污染，国内用户自行解决</strong></p></li><li><p>安装完成后会自动切换到 Zsh</p></li></ol><h2 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4-主题配置"></a>4-主题配置</h2><p>内置了许多、各种各样的主题文件，详见<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">官方 Wiki</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改zsh配置文件</span></span><br><span class="line">nano ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主题文件指向</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置Zsh配置</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.11.40.png" alt="截屏2020-07-13-23.11.40"></p><p><strong>主题肯定是要自己改改的</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以robbyrussell主题为例</span></span><br><span class="line">nano ~/.oh-my-zsh/themes/robbyrussell.zsh-theme</span><br></pre></td></tr></table></figure><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.21.23.png" alt="截屏2020-07-13-23.21.23"></p><p><strong>主要是前两行</strong>我的配置参考：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PROMPT=<span class="string">&quot;%(?:%&#123;$fg_bold[green]%&#125;➜ :%&#123;$fg_bold[red]%&#125;➜ )&quot;</span></span><br><span class="line">PROMPT+=<span class="string">&quot;%&#123;$fg[red]%&#125;(%T)%&#123;$fg[cyan]%&#125;[%~]$ %&#123;$reset_color%&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>可以自定义修改提示符，其中：</p><table><thead><tr><th>占位符</th><th>内容</th></tr></thead><tbody><tr><td>%T</td><td>系统时间（时：分）</td></tr><tr><td>%*</td><td>系统时间（时：分：秒）</td></tr><tr><td>%D</td><td>系统日期（年-月-日）</td></tr><tr><td>%n</td><td>你的用户名</td></tr><tr><td>%B - %b</td><td>开始到结束使用粗体打印</td></tr><tr><td>%U - %u</td><td>开始到结束使用下划线打印</td></tr><tr><td>%d</td><td>你目前的工作目录</td></tr><tr><td>%~</td><td>你目前的工作目录相对于 Home 的相对路径</td></tr><tr><td>%M</td><td>计算机的主机名</td></tr><tr><td>%m</td><td>计算机的主机名（在第一个句号之前截断）</td></tr><tr><td>%l</td><td>你当前的 tty</td></tr></tbody></table><p>效果如下：</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.37.49.png" alt="截屏2020-07-13-23.37.49"></p><h2 id="5-后记"><a href="#5-后记" class="headerlink" title="5-后记"></a>5-后记</h2><p>本文也算是我自己的一个记录，我比较习惯各个设备上的样式尽可能的保持统一，所以我需要在不同设备上安装 Zsh，并且保持几乎一致的主题配置。</p><p>本篇文章可能干货不算很多，建议有兴趣的朋友去官方 wiki 网站查看一下更加详细的主题、插件配置方法。</p><p>如果自己写出了很漂亮的主题配置，欢迎下方评论留言一起分享哦～</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;绝美终端：Zsh-安装-Oh-My-Zsh&quot;&gt;&lt;a href=&quot;#绝美终端：Zsh-安装-Oh-My-Zsh&quot; class=&quot;headerlink&quot; title=&quot;绝美终端：Zsh(安装 Oh My Zsh)&quot;&gt;&lt;/a&gt;绝美终端：Zsh(安装 Oh My Zsh)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…&lt;/p&gt;
&lt;p&gt;“Oh My ZSH!”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh-My-zsh网站&lt;/a&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Zsh" scheme="https://ryzenx.com/tags/zsh/"/>
    
      <category term="Terminal" scheme="https://ryzenx.com/tags/terminal/"/>
    
      <category term="Console" scheme="https://ryzenx.com/tags/console/"/>
    
  </entry>
  
  <entry>
    <title>使用Scrcpy连接手机与电脑</title>
    <link href="https://ryzenx.com/2020/06/scrcpy/"/>
    <id>https://ryzenx.com/2020/06/scrcpy/</id>
    <published>2020-06-20T08:43:04.000Z</published>
    <updated>2022-01-14T05:12:34.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Scrcpy-连接手机与电脑"><a href="#使用-Scrcpy-连接手机与电脑" class="headerlink" title="使用 Scrcpy 连接手机与电脑"></a>使用 Scrcpy 连接手机与电脑</h1><blockquote><p>要想在电脑上运行手机应用，最多的做法是采用虚拟机，但是有许多应用并不支持 x86 架构，导致了模拟器的应用体验极差。</p><p>这样一款应用能够解决这个问题，采用 ADB 连接电脑与你的 Android 手机，并且还能流畅的操控，这就是 Scrcpy。</p><p>Scrcpy 是一款开源应用，能够支持在不同平台的电脑上连接和操控 Android 设备。有理由怀疑华为的“多屏协同”也来自于此。</p></blockquote><span id="more"></span><h2 id="1-官方文档"><a href="#1-官方文档" class="headerlink" title="1-官方文档"></a>1-官方文档</h2><p>Scrcpy 在 Github 的项目地址为：<a href="https://github.com/Genymobile/scrcpy">github.com/Genymobile/scrcpy</a></p><p>基本的安装和命令在官方文档中已经十分详细，适合有经验的朋友自行摸索，这里提供适合大众阅读的安装和使用介绍。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2-安装"></a>2-安装</h2><blockquote><p>本人目前的平台是 macOS，所以配图是 macOS 平台的，其他平台我也会讲述，大体上一致。</p></blockquote><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>推荐使用<code>Homebrew</code>进行安装，什么？没有<strong>Homebrew</strong>？</p><ul><li><p><code>Homebrew</code>的安装：<a href="https://brew.sh/index_zh-cn">官方说明</a></p><p>在终端中运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装Scrcpy</span></span><br><span class="line">brew install scrcpy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装ADB</span></span><br><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure></li><li><p>打开你的 Android 设备的<strong>开发者选项</strong>，并打开<strong>USB 调试</strong></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-06-20-17.03.04.png" alt="截屏2020-06-20-17.03.04"></p></li><li><p>在终端中输入<code>adb devices</code>；adb 将会列出设备，在设备上点击“允许”（一律允许此计算机调试）。</p></li><li><p>再次输入<code>adb devices</code>；如果一切正常，将会显示：</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-06-20-17.10.16.png" alt="截屏2020-06-20-17.10.16"></p></li><li><p>在终端中输入<code>scrcpy</code>即可连接上你的 Android 设备啦～</p></li></ul><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在<a href="https://github.com/Genymobile/scrcpy/releases">Releases 页面</a>下载最新的 zip 格式文件。</p><p>解压后在当前目录打开<strong>cmd 或 PowerShell</strong></p><p>按照上述命令即可执行。</p><h2 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3-快捷键"></a>3-快捷键</h2><table><thead><tr><th>动作</th><th align="left">Windows 按键</th><th align="left">macOS 按键</th></tr></thead><tbody><tr><td>Switch fullscreen mode</td><td align="left"><code>Ctrl</code>+<code>f</code></td><td align="left"><code>Cmd</code>+<code>f</code></td></tr><tr><td>左旋屏幕</td><td align="left"><code>Ctrl</code>+<code>←</code> <em>(left)</em></td><td align="left"><code>Cmd</code>+<code>←</code> <em>(left)</em></td></tr><tr><td>右旋屏幕</td><td align="left"><code>Ctrl</code>+<code>→</code> <em>(right)</em></td><td align="left"><code>Cmd</code>+<code>→</code> <em>(right)</em></td></tr><tr><td>屏幕 1:1 显示</td><td align="left"><code>Ctrl</code>+<code>g</code></td><td align="left"><code>Cmd</code>+<code>g</code></td></tr><tr><td>Resize window to remove black borders</td><td align="left"><code>Ctrl</code>+<code>x</code> | <em>Double-click¹</em></td><td align="left"><code>Cmd</code>+<code>x</code> | <em>Double-click¹</em></td></tr><tr><td>点击主页键</td><td align="left"><code>Ctrl</code>+<code>h</code> | <em>Middle-click</em></td><td align="left"><code>Ctrl</code>+<code>h</code> | <em>Middle-click</em></td></tr><tr><td>点击返回键</td><td align="left"><code>Ctrl</code>+<code>b</code> | <em>Right-click²</em></td><td align="left"><code>Cmd</code>+<code>b</code> | <em>Right-click²</em></td></tr><tr><td>点击应用切换器键</td><td align="left"><code>Ctrl</code>+<code>s</code></td><td align="left"><code>Cmd</code>+<code>s</code></td></tr><tr><td>点击菜单键</td><td align="left"><code>Ctrl</code>+<code>m</code></td><td align="left"><code>Ctrl</code>+<code>m</code></td></tr><tr><td>点击音量增加键</td><td align="left"><code>Ctrl</code>+<code>↑</code> <em>(up)</em></td><td align="left"><code>Cmd</code>+<code>↑</code> <em>(up)</em></td></tr><tr><td>点击音量减少键</td><td align="left"><code>Ctrl</code>+<code>↓</code> <em>(down)</em></td><td align="left"><code>Cmd</code>+<code>↓</code> <em>(down)</em></td></tr><tr><td>点击电源键</td><td align="left"><code>Ctrl</code>+<code>p</code></td><td align="left"><code>Cmd</code>+<code>p</code></td></tr><tr><td>开机</td><td align="left"><em>Right-click²</em></td><td align="left"><em>Right-click²</em></td></tr><tr><td>关闭屏幕并保持投屏</td><td align="left"><code>Ctrl</code>+<code>o</code></td><td align="left"><code>Cmd</code>+<code>o</code></td></tr><tr><td>开启屏幕</td><td align="left"><code>Ctrl</code>+<code>Shift</code>+<code>o</code></td><td align="left"><code>Cmd</code>+<code>Shift</code>+<code>o</code></td></tr><tr><td>旋转屏幕方向</td><td align="left"><code>Ctrl</code>+<code>r</code></td><td align="left"><code>Cmd</code>+<code>r</code></td></tr><tr><td>展开通知面板</td><td align="left"><code>Ctrl</code>+<code>n</code></td><td align="left"><code>Cmd</code>+<code>n</code></td></tr><tr><td>收起通知面板</td><td align="left"><code>Ctrl</code>+<code>Shift</code>+<code>n</code></td><td align="left"><code>Cmd</code>+<code>Shift</code>+<code>n</code></td></tr><tr><td>将设备剪贴板拷贝到电脑</td><td align="left"><code>Ctrl</code>+<code>c</code></td><td align="left"><code>Cmd</code>+<code>c</code></td></tr><tr><td>将电脑剪贴板拷贝到设备</td><td align="left"><code>Ctrl</code>+<code>v</code></td><td align="left"><code>Cmd</code>+<code>v</code></td></tr><tr><td>将电脑剪贴板拷贝到设备并粘贴</td><td align="left"><code>Ctrl</code>+<code>Shift</code>+<code>v</code></td><td align="left"><code>Cmd</code>+<code>Shift</code>+<code>v</code></td></tr><tr><td>控制台中开关 FPS 计数</td><td align="left"><code>Ctrl</code>+<code>i</code></td><td align="left"><code>Cmd</code>+<code>i</code></td></tr></tbody></table><p><em>¹</em>双击黑边可隐藏</p><p>²Right-click turns the screen on if it was off, presses BACK otherwise.</p><h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4-常用命令"></a>4-常用命令</h2><p>全部命令请参照<a href="https://github.com/Genymobile/scrcpy/blob/master/README.md">官方文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 调整显示分辨率（最宽处）为 1024 pixel</span></span><br><span class="line">scrcpy -m 1024</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调整镜像码率为 2Mbps</span></span><br><span class="line">scrcpy -b 2M</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 限制最大帧率为 30fps</span></span><br><span class="line">scrcpy --max-fps 30</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 锁定屏幕旋转</span></span><br><span class="line">scrcpy --lock-video-orientation 0   # 初始方向</span><br><span class="line">scrcpy --lock-video-orientation 1   # 90° 逆时针</span><br><span class="line">scrcpy --lock-video-orientation 2   # 180°</span><br><span class="line">scrcpy --lock-video-orientation 3   # 90° 顺时针</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 录屏到 rec.mp4</span></span><br><span class="line">scrcpy -r rec.mp4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止录屏使用：Ctrl + C</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只投屏，不操作</span></span><br><span class="line">scrcpy -n</span><br></pre></td></tr></table></figure><h2 id="5-Enjoy"><a href="#5-Enjoy" class="headerlink" title="5-Enjoy!"></a>5-Enjoy!</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用-Scrcpy-连接手机与电脑&quot;&gt;&lt;a href=&quot;#使用-Scrcpy-连接手机与电脑&quot; class=&quot;headerlink&quot; title=&quot;使用 Scrcpy 连接手机与电脑&quot;&gt;&lt;/a&gt;使用 Scrcpy 连接手机与电脑&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;要想在电脑上运行手机应用，最多的做法是采用虚拟机，但是有许多应用并不支持 x86 架构，导致了模拟器的应用体验极差。&lt;/p&gt;
&lt;p&gt;这样一款应用能够解决这个问题，采用 ADB 连接电脑与你的 Android 手机，并且还能流畅的操控，这就是 Scrcpy。&lt;/p&gt;
&lt;p&gt;Scrcpy 是一款开源应用，能够支持在不同平台的电脑上连接和操控 Android 设备。有理由怀疑华为的“多屏协同”也来自于此。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="note" scheme="https://ryzenx.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>App对你的手机做了什么？</title>
    <link href="https://ryzenx.com/2020/06/app%E5%AF%B9%E4%BD%A0%E7%9A%84%E6%89%8B%E6%9C%BA%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://ryzenx.com/2020/06/app%E5%AF%B9%E4%BD%A0%E7%9A%84%E6%89%8B%E6%9C%BA%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2020-06-11T09:29:06.000Z</published>
    <updated>2022-01-14T05:12:34.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App-对你的手机做了什么？"><a href="#App-对你的手机做了什么？" class="headerlink" title="App 对你的手机做了什么？"></a>App 对你的手机做了什么？</h1><p>前段时间，央视新闻频道播出了一则<a href="http://m.news.cctv.com/2020/06/08/ARTImcAiqsUb3bPRnKMS8nBk200608.shtml"><strong>手机 App 频繁自启动 收集个人隐私触目惊心</strong>的新闻</a>，报告出多款常用的手机 App 在后台有自启动、读取照片文件、读取手机信息和读取定位信息的行为。这则新闻再次引起了很多人的关注。虽然在手机普及的信息时代，信息的互通给大家带来了极大的便利，但是个人的隐私信息是否能够”守得住“需要引起更大关注。</p><p>下面我将基于 Android 平台，以开发者的身份深入解析：<strong>App 到底在后台对你的手机做了什么</strong>。</p><blockquote><p>Android = 安卓</p><p>App = 应用</p></blockquote><center>本文是由Steven Yan原创</center><center>转载或引用请注明作者和出处👉<a href="https://ryzenx.com/2020/06/app对你的手机做了什么/">RyzenX.com</a></center><span id="more"></span><h2 id="1-App-能“偷窥”些什么？"><a href="#1-App-能“偷窥”些什么？" class="headerlink" title="1-App 能“偷窥”些什么？"></a>1-App 能“偷窥”些什么？</h2><p>打开你的安卓手机，进入：<strong>设置-&gt;应用/应用管理/应用设置-&gt;找到你一个常用的 app-&gt;点击 app 图标-&gt;点击“权限/权限管理”</strong>，你就能看到这个 App 向你的手机申请了多少权限。下面将以<strong>微信</strong>为示例，介绍 App 拿到这些权限一般会做什么？</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200611_175752.jpg" style="zoom:50%;" /><center>这是一张微信的权限示例图</center><h3 id="什么是权限？"><a href="#什么是权限？" class="headerlink" title="什么是权限？"></a>什么是权限？</h3><p>在 Google Android 开发者文档中，这样描述<strong>权限(Permissions)</strong></p><blockquote><p>The purpose of a <em>permission</em> is to protect the privacy of an Android user. Android apps must request permission to access sensitive user data (such as contacts and SMS), as well as certain system features (such as camera and internet). Depending on the feature, the system might grant the permission automatically or might prompt the user to approve the request.</p></blockquote><p>设置“权限”的目的是为了保护安卓用户的隐私。安卓应用必须先请求用户同意才能获得如“读取通讯录”“读取短信”这样的敏感权限，或者获得某些如“访问相机”和“访问网络“等的系统功能的许可。取决于某些功能特性，系统会默认许可一部分权限或者建议用户同意某些权限请求。</p><p>简单来说，手机应用想要读取用户的信息和访问某些功能是需要用户手动同意的。这种“权限”是强制要求应用“先申请，后使用”，目的肯定是想要尽可能把控制权交给用户自己，可是为什么现在的应用都无视这个设置了呢？权限有什么用呢？</p><p>谷歌将安卓应用的权限分为三个级别：普通权限(<em>Normal permissions</em>)、签名权限(<em>Signature permissions</em>)、危险权限(<em>Dangerous permissions</em>)。</p><ul><li>普通权限表示一些不会影响到用户隐私的权限，例如访问互联网、访问网络状态、显示通知等等。</li><li>签名权限一般和某些系统应用联动，例如更换桌面图标，就需要桌面启动器提供的权限。</li><li>危险权限表示可能影响到设备功能和用户隐私的权限，例如录音录像、访问照片文件、发送短信彩信等等。这类权限几乎都需要用户手动确认。</li></ul><h3 id="App-会拿这些权限做些什么？"><a href="#App-会拿这些权限做些什么？" class="headerlink" title="App 会拿这些权限做些什么？"></a>App 会拿这些权限做些什么？</h3><p>回到刚刚微信的权限示例截图，来具体分析一下。</p><ul><li>发送短信/彩信：这一项权限大家应该不陌生，会想大约五年以前，可能你的手机中病毒后第一件事就是“帮”你向运营商订购一大堆“彩铃”“礼包”“游戏充值卡”，由此来获利；而且以前的手机病毒还通过手机短信群发病毒链接，以此来进行传播。那么微信拿它有什么用呢？其实是在你<strong>注册微信/验证微信密保/重置微信密码</strong>时，“帮助”你发送一条校验短信的，当然这条短信可以自己手动发出，所以这项权限——<strong>拒绝</strong></li><li>读取联系人/修改联系人：发现微信在给你推荐通讯录好友了吗？是的，微信拿这一项权限就是用来实现这个功能的。当然我们可以猜测，微信可能会利用你的通讯录实现信息联网，如果你并不需要推荐手机通讯录微信好友的功能，那么建议——<strong>拒绝</strong></li><li>定位：不必多说，在你向好友共享位置的时候就会用到它，如果你不想时时刻刻让微信了解你的行踪，在 Android 10 及以上的系统中，可以选择——<strong>仅在使用过程中允许</strong></li><li>获取手机信息/获取应用列表/访问手机账户：这一般是为了让应用识别你的登陆手机是否是常用手机，避免盗号风险，不过还是那句话，你也不知道应用会在后台拿你的数据干嘛。获取手机信息——<strong>允许</strong>；获取应用列表/访问手机账户——<strong>拒绝</strong></li><li>相机/录音：这两个是最容易出现隐私泄露风险的，但是你也不得不允许的权限。你想在朋友圈分享小视频，你需要允许微信访问相机；你想给好友发送语音，你需要允许微信录音。所以为了不牺牲功能还是选择——<strong>允许</strong></li><li>读写手机存储：这是一项非常有争议的功能，想了解详细的说明请<strong>继续阅读</strong>。你只需要知道，本来你不需要给这个权限你也能正常使用，但是你不得不给这个权限。我们妥协吧，选择——<strong>允许</strong></li><li>“设置相关”：这些权限可以按照需求开启，一般允许<strong>显示悬浮窗</strong>和<strong>常驻通知</strong>，因为这两个权限在屏幕上都能看得到的，而且不会对隐私有关。所以按照需求可以——<strong>选择性开启</strong></li></ul><h2 id="2-App-为什么能拖慢手机运行速度？"><a href="#2-App-为什么能拖慢手机运行速度？" class="headerlink" title="2-App 为什么能拖慢手机运行速度？"></a>2-App 为什么能拖慢手机运行速度？</h2><p>App 运行的时候会占用系统资源，这我们都知道，但是为什么我没有用这些 App 的时候，手机还是很卡顿、耗电还是很高？</p><p>这就牵扯到应用在安卓系统中的一项功能——<strong>自启动</strong></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/ysxw-2020-06-11-1.png" alt="ysxw-2020-06-11-1"></p><p><strong>自启动</strong>本身并不是一个坏东西，你的手机电脑启动的时候，就会自动启动一些系统应用：启动桌面应用，这样你才能看到应用图标；启动设置，这样你的手机才能自动连接上无线网络和蓝牙。也就是说，合理利用“自启动”这个功能是能够方便用户的使用的，但是错就错在很多应用<strong>滥用</strong>了“自启动”功能。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>自启动可以按照启动对象分为：<strong>系统唤醒</strong>和<strong>关联唤醒</strong></p><h4 id="系统唤醒"><a href="#系统唤醒" class="headerlink" title="系统唤醒"></a>系统唤醒</h4><p>系统自启动是使用了 Android 提供的：Broadcast 系统广播和 Receiver 广播接收类来完成的。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/boardcast.actions.png" alt="boardcast.actions"></p><center>Android 9广播通知多达219种</center><p>系统广播可以说是知无不言，可以理解为安卓系统对着所有 App 用大喇叭喊道：</p><ul><li>我开机啦！</li><li>我在充电啦！</li><li>我充电完成啦！</li><li>我连接上网络啦！</li><li>我的下载任务完成啦！</li><li>我安装好应用啦！</li><li>…………</li></ul><p>那么既然系统都这么喊了，我应用是不是应该做点什么？于是应用就添加了相应行为(<em>action</em>)的接收器，当应用一旦接收到系统的广播，就会开始执行自启动，这就是为什么你没有点击应用图标，应用却还能照常运行。</p><p>示例 MyBroadcastReceiver.java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_BOOT = <span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_SCREEN_ON = <span class="string">&quot;android.intent.ACTION_SCREEN_ON&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_SCREEN_OFF = <span class="string">&quot;android.intent.ACTION_SCREEN_OFF&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_CONNECTION_CHANGED = <span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_WIFI_CHANGED = <span class="string">&quot;android.net.wifi.WIFI_STATE_CHANGED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_ADDED_APP = <span class="string">&quot;android.intent.action.PACKAGE_ADDED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_REMOVED_APP = <span class="string">&quot;android.intent.action.PACKAGE_REMOVED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_MEDIA_MOUNTED = <span class="string">&quot;android.intent.action.MEDIA_MOUNTED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_MEDIA_REMOVED = <span class="string">&quot;android.intent.action.MEDIA_REMOVED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_POWER_CON = <span class="string">&quot;android.intent.action.ACTION_POWER_CONNECTED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_POWER_DISCON = <span class="string">&quot;android.intent.action.ACTION_POWER_DISCONNECTED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_WALLPAPER_CHANGED = <span class="string">&quot;android.intent.action.WALLPAPER_CHANGED&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intent.getAction().equals(ACTION_BOOT))&#123;</span><br><span class="line">            TipsUtils.notify(context, <span class="string">&quot;开机完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_SCREEN_ON)) &#123;</span><br><span class="line">            TipsUtils.notify(context, <span class="string">&quot;屏幕打开&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_ADDED_APP)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已安装应用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_REMOVED_APP)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已卸载应用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_WIFI_CHANGED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;WiFi连接变化&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_CONNECTION_CHANGED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;网络连接变化&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_MEDIA_MOUNTED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已挂载存储介质&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(intent.getAction().equals(ACTION_MEDIA_REMOVED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已移除存储介质&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_POWER_CON)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已连接电源&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_POWER_DISCON)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已断开电源&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_WALLPAPER_CHANGED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已更换壁纸&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联唤醒"><a href="#关联唤醒" class="headerlink" title="关联唤醒"></a>关联唤醒</h4><p>顾名思义，关联启动就是已经运行的应用去启动其他应用的行为，要是说现在的定制安卓系统能够防止系统唤醒，可是关联唤醒可是不那么容易防止的。因为很多时候关联唤醒的必要的，比如你想在”图库”中分享图片到”QQ”，那么图库就必须唤醒 QQ，你想在”淘宝”中支付，淘宝就必须唤醒支付宝。</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/zfb-被关联启动.png" alt="zfb-被关联启动" style="zoom:50%;" /><center>在某手机管家中显示支付宝被关联启动的情况</center><p>Android 操作系统启动就是上文说的“系统唤醒”；</p><p>手机淘宝想要启动支付宝付款我知道，还有那么多奇奇怪怪的应用，干嘛要启动支付宝？</p><p>其实并不是应用要主动启动支付宝，故意拖慢你手机速度。实际上是其他应用使用了支付宝的 SDK，也就是内嵌了支付宝的一部分用来方便用户通过支付宝支付。但是其他应用没办法控制 SDK 的行为，这相当于霸王条款：你想用我的功能，就别管我做什么。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/ysxw-2020-06-11-2.png" alt="ysxw-2020-06-11-2"></p><p>除了阿里系的 SDK，还有腾讯系的 SDK、百度系的 SDK、头条系的 SDK 等等，很多应用都使用了这些 SDK 来便捷化应用的开发。比如我想实现地图导航，采取高德地图的 SDK 就可以，不需要开发者自己去设计地图、设计路线，但是这个高德地图 SDK 具体除了实现地图导航，还要干些什么，那开发者也是不得而知的。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>App 想要自启动，在后台一直运行的目的其实挺复杂。</p><p>往好的方面说：你可以及时收到消息，能够在应用间更加流畅的使用不同的功能；</p><p>往坏的方面说：应用在后台收集你的数据，用来实现用户画像或者干脆直接出售。</p><h2 id="3-App-做的这些事情有必要吗？"><a href="#3-App-做的这些事情有必要吗？" class="headerlink" title="3-App 做的这些事情有必要吗？"></a>3-App 做的这些事情有必要吗？</h2><p>很明确的说：<strong>大多数是没必要的</strong></p><p>也就是说，很多权限不给应用，应用不需要后台自启动，你的使用上不会有任何影响。</p><p>就拿上文说的<strong>读写手机存储</strong>，对于大多数应用来说，根本不需要这一项权限，但是事实上大多数应用都会向你请求这一权限，<strong>不允许还没法用！</strong>应用会给出各种各样的理由：不给权限没办法保存图片；不给权限您不能上传图片；不给权限您不能下载音乐……</p><p>事实：</p><p>想要访问相册？安卓提供了通过“图库”应用获得你图片的方法，你可以选择图片或者视频，应用也只能读取到你所选择的图片，给予应用<strong>读写手机存储</strong>的权限之后，它能够读取你<strong>所有</strong>的照片。</p><p>没法保存数据？安卓为应用在存储中专门划分了独立的存储空间，就在<code>Android/data</code>中，按照应用分成文件夹，互不干扰不杂乱，给予应用<strong>读写手机存储</strong>的权限后，应用想保存在哪里就保存在哪里，想创建多少个文件夹就创建多少个文件夹，垃圾数据想存多少就存多少，而且卸载了应用还是不能完全删除。</p><p>想要发送通知？GMS 提供了统一的通知发送 API，应用不需要持续运行也能发送通知。没有 GMS？国内也有统一通知平台，比如 MiPush。</p><p>本来能够通过官方的渠道实现某一项功能，反而大费周章想你索取权限，这些 App 的目的实在让人琢磨不透。</p><h2 id="4-国内-App-乱象"><a href="#4-国内-App-乱象" class="headerlink" title="4-国内 App 乱象"></a>4-国内 App 乱象</h2><p>很有意思的是，网络上那些最“讨厌”的 App，往往是大家常用的国产 App。反而国外的 App 十分“乖巧”。</p><p>而且国内的 App 功能相当复杂：购物、聊天、直播、新闻、小视频……结果就是<strong>App 容量大幅增大</strong>，你是否已经习惯了只用来支付的支付宝占用 270MB 的容量？是否习惯了只用来聊天看朋友圈的微信占用 530MB 的容量？你是否习惯了网络购物的淘宝占用 430MB 的容量？</p><p>曾几何时，内存 1GB 不卡、2GB 流畅、4GB 全能；存储空间 8GB 够用、16GB 随心、32GB 海量。而现在的国产手机高配版直接内存 12GB、存储高达 512GB，甚至内存低于 6GB 就会被认为太小无法流畅运行。</p><p>几年之前诺基亚手机回归，诺基亚为中国市场推出的 8GB 大内存版本的做法不知是喜是忧。要知道除了不能打电话其他啥都能干的 Windows，仅仅 2GB 的内存就能运行，4GB 内存就能流畅运行办公软件；而现在手机的内存和存储容量，比大多数普通笔记本电脑还要大。但是你依然会觉得卡顿。</p><p>要知道在印度，很多人的手机内存还只有 2GB，存储空间也才仅仅 16GB，然而他们跟我们享受着同一个互联网生活：网购、发照片、导航、直播……</p><p><strong>应该反思这究竟是我们的软件厂商“技术很好”还是“技术很差”？</strong></p><h2 id="5-我想做手机的主人？"><a href="#5-我想做手机的主人？" class="headerlink" title="5-我想做手机的主人？"></a>5-我想做手机的主人？</h2><p>很抱歉，目前甚至之后的很多年，国内安卓圈依然会保持这样一个乱象，App 为了抢占你手机的隐私数据费劲心机。一方面是国家没有针对性的法律条文，一方面是互联网公司的利益驱使。</p><p>最近，小米和华为都主动向应用的“流氓”行为作出了行动，MIUI 和 EMUI 内置的权限管理能够显示 App 的后台行为，并且制止其读取用户隐私数据。可以说开了一个好头，我也希望能有更多的厂商能够加入，尽快实现安卓手机 App 的法律化、规范化、合理化。</p><p>当然，如果你现在实在受不了 App 采集你的隐私，可以换用 iPhone。iOS 生态圈的应用将会严格进行审核，几乎没有上述的问题：不会不经允许读取个人信息，不会后台占用，不会产生垃圾数据……</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;App-对你的手机做了什么？&quot;&gt;&lt;a href=&quot;#App-对你的手机做了什么？&quot; class=&quot;headerlink&quot; title=&quot;App 对你的手机做了什么？&quot;&gt;&lt;/a&gt;App 对你的手机做了什么？&lt;/h1&gt;&lt;p&gt;前段时间，央视新闻频道播出了一则&lt;a href=&quot;http://m.news.cctv.com/2020/06/08/ARTImcAiqsUb3bPRnKMS8nBk200608.shtml&quot;&gt;&lt;strong&gt;手机 App 频繁自启动 收集个人隐私触目惊心&lt;/strong&gt;的新闻&lt;/a&gt;，报告出多款常用的手机 App 在后台有自启动、读取照片文件、读取手机信息和读取定位信息的行为。这则新闻再次引起了很多人的关注。虽然在手机普及的信息时代，信息的互通给大家带来了极大的便利，但是个人的隐私信息是否能够”守得住“需要引起更大关注。&lt;/p&gt;
&lt;p&gt;下面我将基于 Android 平台，以开发者的身份深入解析：&lt;strong&gt;App 到底在后台对你的手机做了什么&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android = 安卓&lt;/p&gt;
&lt;p&gt;App = 应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;本文是由Steven Yan原创&lt;/center&gt;

&lt;center&gt;转载或引用请注明作者和出处👉&lt;a href=&quot;https://ryzenx.com/2020/06/app对你的手机做了什么/&quot;&gt;RyzenX.com&lt;/a&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="essay" scheme="https://ryzenx.com/categories/essay/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="公众号文章" scheme="https://ryzenx.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>git忽略文件换行/回车符和权限</title>
    <link href="https://ryzenx.com/2020/06/git-ignore-crlf/"/>
    <id>https://ryzenx.com/2020/06/git-ignore-crlf/</id>
    <published>2020-06-10T11:38:01.000Z</published>
    <updated>2021-03-07T13:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-忽略换行符和权限变化"><a href="#git-忽略换行符和权限变化" class="headerlink" title="git 忽略换行符和权限变化"></a>git 忽略换行符和权限变化</h1><blockquote><p>由于我经常在多平台写代码，Windows/macOS/Linux，每个系统的换行符又不一样，导致git提交的时候会由一大堆的变化，当然这些变化都是没必要的。故在此备忘。</p></blockquote><span id="more"></span><h2 id="1-什么是换行符"><a href="#1-什么是换行符" class="headerlink" title="1-什么是换行符"></a>1-什么是换行符</h2><p><code>&quot;\r&quot;</code>是回车：使光标到行首（carriage return）</p><p><code>&quot;\n&quot;</code>是换行：使光标下移一格（line feed）</p><p><code>\r</code> 是回车（return）</p><p><code>\n</code> 是换行，（newline）</p><p>对于换行这个动作，unix下一般只有一个0x0A表示换行(“\n”），Windows下一般都是0x0D和0x0A两个字符(“\r\n”)，macOS则采用回车符CR表示下一行(\r)，Unix系统里，每行结尾只有“&lt;换行&gt;”，即“\n”；Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\r\n”；Mac系统里，每行结尾是“&lt;回车&gt;”,即“\r”。</p><p>windows采用回车+换行CR/LF表示下一行,即^M$ </p><h2 id="2-git如何忽略"><a href="#2-git如何忽略" class="headerlink" title="2-git如何忽略"></a>2-git如何忽略</h2><ul><li><p>忽略换行符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br><span class="line">git config --global core.safecrlf true</span><br></pre></td></tr></table></figure></li><li><p>忽略权限变化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.filemode false</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-忽略换行符和权限变化&quot;&gt;&lt;a href=&quot;#git-忽略换行符和权限变化&quot; class=&quot;headerlink&quot; title=&quot;git 忽略换行符和权限变化&quot;&gt;&lt;/a&gt;git 忽略换行符和权限变化&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于我经常在多平台写代码，Windows/macOS/Linux，每个系统的换行符又不一样，导致git提交的时候会由一大堆的变化，当然这些变化都是没必要的。故在此备忘。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="git" scheme="https://ryzenx.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Fiil CC 半入耳式蓝牙无线耳机开箱</title>
    <link href="https://ryzenx.com/2020/06/fiil-cc/"/>
    <id>https://ryzenx.com/2020/06/fiil-cc/</id>
    <published>2020-06-05T08:57:42.000Z</published>
    <updated>2022-01-14T05:12:35.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fill-CC-蓝牙无线耳机开箱"><a href="#Fill-CC-蓝牙无线耳机开箱" class="headerlink" title="Fill CC 蓝牙无线耳机开箱"></a>Fill CC 蓝牙无线耳机开箱</h1><blockquote><p>FIIL 耳机是摇滚音乐人汪峰亲自参与创立的耳机品牌，中文名斐耳。这是一个生造的英文词，是“fill”和“feel”的谐音联合体。</p><p>这款耳机最吸引我的一点是它的外观设计，在市场上无数果味的蓝牙真无线耳机之中显得十分的好看。</p><p>毕竟想要摆脱果味实在太难了( ´▽ ｀)</p></blockquote><span id="more"></span><h2 id="1-开箱"><a href="#1-开箱" class="headerlink" title="1-开箱"></a>1-开箱</h2><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200605_103150.jpg" style="zoom:50%;" /><center>包装正面</center><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200605_103157.jpg" style="zoom:50%;" /><center>包装背面</center><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200605_103308.jpg" alt=""></p><center>全部内容物品</center><p>包含<strong>耳机一对</strong>、<strong>充电盒一个</strong>、<strong>快速入门卡片</strong>、<strong>说明书</strong>、<strong>USB-C 充电线</strong>。</p><h2 id="2-外观"><a href="#2-外观" class="headerlink" title="2-外观"></a>2-外观</h2><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/20200326162313_96.jpg" style="zoom:67%;" /><p>不同于市面上一堆一堆的果味无线耳机，这款耳机的外观着实不错。四周为磨砂质感的金属外壳，正面开了一个窗口，能够方便地使用拇指推出耳机；底面为 USB-C 接口，没有用 Micro-USB 实在是很棒。</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200605_172201.jpg" style="zoom: 50%;" /><p>耳机主体为圆角四棱柱，十分具有特色；半入耳式的耳机头是 EarPods 的设计，十分适合大部分人的佩戴，而且也不容易掉落。</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200605_105403.jpg" style="zoom:50%;" /><h2 id="3-功能"><a href="#3-功能" class="headerlink" title="3-功能"></a>3-功能</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-06-05%2017.32.53.png" alt=""></p><ul><li><p>这款耳机采用<strong>Bluetooth 5.0</strong>技术，能够有更好的传输带宽和更快的连接速度。</p></li><li><p>在小米 10 青春版中实测能够支持 AAC 格式的无线音频传输。</p></li><li><p>支持低延迟模式（<a href="#4-App功能">App 中调节</a>）有音乐模式（更好的音质）、视频模式（音质和延迟均衡）、游戏模式（低延时｜牺牲音质）。</p></li><li><p>ENC 通话降噪。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-06-05%2017.37.16.png" alt=""></p></li><li><p>触控功能（<a href="#4-App功能">App 中调节</a>）。</p></li><li><p>定制的 13.1mm 动圈，据说音质很不错，我不是追求音质党，所以感知不强。</p></li><li><p>单耳机可听歌 3 小时，充电盒支持额外充电 4 次。</p></li></ul><h2 id="4-App-功能"><a href="#4-App-功能" class="headerlink" title="4-App 功能"></a>4-App 功能</h2><p>FIIL 耳机还有一个适配的移动端 App，功能还是很齐全。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/Screenshot_2020-06-05-10-56-14-272_com.fengeek.f0.jpg" alt=""></p><p>此外，还提供服务功能。内置“煲机”功能和音乐播放器。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/Screenshot_2020-06-05-10-56-51-036_com.fengeek.f0.jpg" alt=""></p><h2 id="5-简单体验"><a href="#5-简单体验" class="headerlink" title="5-简单体验"></a>5-简单体验</h2><h3 id="5-1-舒适度"><a href="#5-1-舒适度" class="headerlink" title="5-1-舒适度"></a>5-1-舒适度</h3><p>单耳机只有 4g，而且很适合我的耳朵，几乎能做到和 AirPods 相似的“无感”体验。但是耳机主体部分比较宽，侧卧时还是不是很舒服，有点压耳。</p><h3 id="5-2-操作"><a href="#5-2-操作" class="headerlink" title="5-2-操作"></a>5-2-操作</h3><p>由于耳机的充电盒采用了无盖式设计，所以有甩动导致耳机调出的问题，不过一般情况还是不容易掉出啦。</p><p>相比于其他耳机打开耳机一个一个拿出来，这样的设计能够实现拇指同时推出的动作，还是方便了不少。</p><p>虽然耳机支持“全能操控模式”但是单击操作还是容易误触，一般情况我没有开启，在长时间听歌的时候（出行、运动）打开“全能操控模式”能够方便进行歌曲切换和音量调节功能。</p><h3 id="5-3-聆听效果"><a href="#5-3-聆听效果" class="headerlink" title="5-3-聆听效果"></a>5-3-聆听效果</h3><p>连接速度还是很快，几乎是秒连接了。在 App 中可以调节 EQ 效果，聆听效果还是很明显变化。</p><p>耳机延迟测试没有试过，据说能降低 70ms 的延迟。</p><h2 id="6-值不值得买？"><a href="#6-值不值得买？" class="headerlink" title="6-值不值得买？"></a>6-值不值得买？</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-06-05%2018.05.27.png" alt=""></p><p>官网售价 ¥399，618 活动价格 ¥349。总体来说功能还是非常全面，主要是外形设计就很棒。</p><p>如果特别想要个别功能：低延迟、好音质、长续航，这个价位还是有很多选择。</p><p>如果对特别功能没有什么需求，这款别样的外观的真无线蓝牙耳机就很合适。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Fill-CC-蓝牙无线耳机开箱&quot;&gt;&lt;a href=&quot;#Fill-CC-蓝牙无线耳机开箱&quot; class=&quot;headerlink&quot; title=&quot;Fill CC 蓝牙无线耳机开箱&quot;&gt;&lt;/a&gt;Fill CC 蓝牙无线耳机开箱&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;FIIL 耳机是摇滚音乐人汪峰亲自参与创立的耳机品牌，中文名斐耳。这是一个生造的英文词，是“fill”和“feel”的谐音联合体。&lt;/p&gt;
&lt;p&gt;这款耳机最吸引我的一点是它的外观设计，在市场上无数果味的蓝牙真无线耳机之中显得十分的好看。&lt;/p&gt;
&lt;p&gt;毕竟想要摆脱果味实在太难了( ´▽ ｀)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="essay" scheme="https://ryzenx.com/categories/essay/"/>
    
    
      <category term="开箱" scheme="https://ryzenx.com/tags/%E5%BC%80%E7%AE%B1/"/>
    
      <category term="蓝牙耳机" scheme="https://ryzenx.com/tags/%E8%93%9D%E7%89%99%E8%80%B3%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>JS声明函数的三种方式</title>
    <link href="https://ryzenx.com/2020/06/js-create-function/"/>
    <id>https://ryzenx.com/2020/06/js-create-function/</id>
    <published>2020-06-03T04:19:53.000Z</published>
    <updated>2022-01-10T04:11:59.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-声明函数"><a href="#JavaScript-声明函数" class="headerlink" title="JavaScript 声明函数"></a>JavaScript 声明函数</h1><blockquote><p>2022-01-10 更新</p></blockquote><span id="more"></span><h2 id="1-函数声明"><a href="#1-函数声明" class="headerlink" title="1. 函数声明"></a>1. 函数声明</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* function body */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明创建了一个变量，在当前作用域，这个变量就是函数的名称，而且是一个函数对象。这个函数变量存在变量提升，它会提到当前作用域的顶部，也就是说，在函数声明之前可以调用。</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(foo);</span><br><span class="line"><span class="comment">// -&gt; [Function: foo]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>注意，这种函数声明并不能覆盖已声明的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="string">&quot;string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn);</span><br><span class="line"><span class="comment">// -&gt; string</span></span><br></pre></td></tr></table></figure><h2 id="2-函数表达式"><a href="#2-函数表达式" class="headerlink" title="2. 函数表达式"></a>2. 函数表达式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表达式声明</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* function body */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数表达式创建了一个函数对象。</p><h2 id="3-箭头函数"><a href="#3-箭头函数" class="headerlink" title="3. 箭头函数"></a>3. 箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="params">arg</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* function body */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>箭头函数不创建自己的上下文，<code>this</code>指向上文中的<code>this</code>。箭头函数是匿名函数。</p><h2 id="4-构造函数"><a href="#4-构造函数" class="headerlink" title="4. 构造函数"></a>4. 构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Funcion构造函数</span></span><br><span class="line"><span class="keyword">var</span> baz = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;return arg1 + arg2&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(baz(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// -&gt; 3</span></span><br></pre></td></tr></table></figure><p>这种方式创建的函数不能访问当前的作用域，因为没办法创建闭包。他们总是在全局作用域内创建的。</p><p>可以通过这种方式获得浏览器全局对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line">4<span class="keyword">var</span> <span class="built_in">global</span> = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">&#x27;return this&#x27;</span>)();</span><br><span class="line">4<span class="built_in">console</span>.log(<span class="built_in">global</span> == <span class="built_in">window</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><hr><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>　　foobar广泛用在示例代码中是怎么回事呢？foobar相信大家都很熟悉，但是foobar广泛用在示例代码中是怎么回事呢，下面就让小编带大家一起了解吧。<br>　　foobar广泛用在示例代码中，其实就是foobar就如同中文的张三李四，大家可能会很惊讶foobar怎么会广泛用在示例代码中呢？但事实就是这样，小编也感到非常惊讶。<br>　　这就是关于foobar广泛用在示例代码中的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</p><p>常见的代称有：</p><ul><li><p><code>foobar</code>：常常单独使用，如同中文中“某某”</p></li><li><p><code>foo</code>：如同“张三”</p></li><li><p><code>bar</code>：如同“李四”</p></li><li><p><code>baz</code>：如同“王五”</p></li><li><p><code>qux</code>：如同“赵六”</p></li></ul><p>参考<a href="https://cloud.tencent.com/developer/article/1360988">文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-声明函数&quot;&gt;&lt;a href=&quot;#JavaScript-声明函数&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 声明函数&quot;&gt;&lt;/a&gt;JavaScript 声明函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;2022-01-10 更新&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="essay" scheme="https://ryzenx.com/tags/essay/"/>
    
      <category term="JS" scheme="https://ryzenx.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>MySQL在macOS上的安装</title>
    <link href="https://ryzenx.com/2020/05/install-mysql-on-macOS/"/>
    <id>https://ryzenx.com/2020/05/install-mysql-on-macOS/</id>
    <published>2020-05-31T10:38:28.000Z</published>
    <updated>2022-01-14T05:12:35.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL-在-macOS-上的安装"><a href="#MySQL-在-macOS-上的安装" class="headerlink" title="MySQL 在 macOS 上的安装"></a>MySQL 在 macOS 上的安装</h1><blockquote><p>System version: macOS Catalina 10.15.5</p><p>MySQL cersion: 8.0.20</p><p>MySQL offical download site: <a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p></blockquote><span id="more"></span><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1-安装"></a>1-安装</h2><p>前往 MySQL 的官方网站下载安装 MySQL Community Server（免费版）</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/20200531185157.png" alt=""></p><p>选择<code>DMG Archive</code>或者<code>Compressed TAR Archive</code>均可。这里选择 dmg 格式的包。</p><p>下载，打开压缩包，双击运行<strong>pkg</strong>安装包。</p><p>如果出现“无法验证开发者”的情况，前往<code>系统偏好设置-&gt;安全性与隐私-&gt;通用-&gt;仍要打开</code></p><p>之后按照提示下一步。</p><p>最后安装完成需要你设置 root 用户的密码，自行设置密码后牢记。</p><p>建议安装后选择<strong>自动启动 MySQL Server 服务</strong>，否则请按照<a href="#3-启动与停止">启动与停止</a>启动服务。</p><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2-使用"></a>2-使用</h2><p>如果你在 Mac 上的<strong>终端</strong>上输入<code>mysql</code>后提示<code>command not found</code>，那么请这样做：</p><ul><li>打开终端</li><li>切换目录：<code>cd /usr/local/bin</code></li><li>设置软链：<code>ln -fs /usr/local/mysql/bin/mysql mysql</code></li><li>完成。只需要在终端中输入：<code>mysql -u root -p</code>即可使用 MySQL。</li></ul><h2 id="3-启动与停止"><a href="#3-启动与停止" class="headerlink" title="3-启动与停止"></a>3-启动与停止</h2><h3 id="启动："><a href="#启动：" class="headerlink" title="启动："></a>启动：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/MySQL/support-files/mysql.server start</span><br></pre></td></tr></table></figure><h3 id="停止："><a href="#停止：" class="headerlink" title="停止："></a>停止：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/support-files/mysql.server stop</span><br></pre></td></tr></table></figure><h3 id="重启："><a href="#重启：" class="headerlink" title="重启："></a>重启：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/support-files/mysql.server restart</span><br></pre></td></tr></table></figure><h3 id="通过系统偏好设置："><a href="#通过系统偏好设置：" class="headerlink" title="通过系统偏好设置："></a>通过系统偏好设置：</h3><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/20200531190500.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MySQL-在-macOS-上的安装&quot;&gt;&lt;a href=&quot;#MySQL-在-macOS-上的安装&quot; class=&quot;headerlink&quot; title=&quot;MySQL 在 macOS 上的安装&quot;&gt;&lt;/a&gt;MySQL 在 macOS 上的安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;System version: macOS Catalina 10.15.5&lt;/p&gt;
&lt;p&gt;MySQL cersion: 8.0.20&lt;/p&gt;
&lt;p&gt;MySQL offical download site: &lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot;&gt;https://dev.mysql.com/downloads/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="essay" scheme="https://ryzenx.com/tags/essay/"/>
    
      <category term="MySQL" scheme="https://ryzenx.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 十个高效扩展程序</title>
    <link href="https://ryzenx.com/2020/05/Chrome-10-extensions/"/>
    <id>https://ryzenx.com/2020/05/Chrome-10-extensions/</id>
    <published>2020-05-17T13:00:49.000Z</published>
    <updated>2022-01-14T05:12:35.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chrome-十个高效扩展程序"><a href="#Chrome-十个高效扩展程序" class="headerlink" title="Chrome 十个高效扩展程序"></a>Chrome 十个高效扩展程序</h1><blockquote><p>Google Chrome 能一越成为浏览器的霸主，不仅仅是其优秀的渲染引擎 Blink 和高效的脚本引擎 V8，更因为是其拥有丰富的扩展插件，为浏览器开启了更多的功能。</p></blockquote><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/chrome_img_1.png" style="zoom:50%;" /><p>下面，将介绍 10 个扩展 chrome 浏览器功能的扩展程序，它们都可以在<strong>Chrome 网上商店找到</strong>。</p><span id="more"></span><h2 id="1-Google-Translate-谷歌翻译"><a href="#1-Google-Translate-谷歌翻译" class="headerlink" title="1. Google Translate 谷歌翻译"></a>1. Google Translate 谷歌翻译</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517210754274.png" alt=""></p><p>众所周知，Chrome 的“传统艺能”就是有内置的 Google Translate，可以帮你翻译整个网页，这一点使得 Chrome 成为研究人士、在校学生和老师的首选浏览器。既然 Chrome 内置了网页翻译，为什么我还要再推荐一次谷歌翻译扩展程序呢？</p><p>网页整页翻译经常会出现：翻译不连贯、专有名词错误、排版错误、翻译结果“过于机械”的问题，特别是在学术性、专业性的网页上。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517210943296.png" alt=""></p><p>而扩展版谷歌翻译，你可以在网页上选择一句话、一个词语，然后点击悬浮在鼠标上方的谷歌翻译图标、或者右键选择谷歌翻译、又或者点击菜单栏中的谷歌翻译图标，谷歌翻译就会告诉你这句话或者这个词语的意思，还能达到学习外语的辅助作用。</p><h2 id="2-Video-Speed-Controller-视频速度控制器"><a href="#2-Video-Speed-Controller-视频速度控制器" class="headerlink" title="2. Video Speed Controller 视频速度控制器"></a>2. Video Speed Controller 视频速度控制器</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211058955.png" alt=""></p><p>这个扩展程序即可帮你对视频进行倍数播放，虽然日常用得不多，但是我们都知道，有些时候可缺少不得。</p><p><em>16 倍速刷完视频课，太爽啦～</em></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211315221.png" alt=""></p><p>而这个扩展程序的功能设置项也很丰富，可以自定义一档的间隔、静音、设置关键点等，它会在识别到视频之后在视频的左上角显示一个半透明的控制按钮，经过测试最高可以到 16 倍速。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211355988.png" alt=""></p><p>需要注意的是，这个扩展只能调整 HTML5 的视频，不能调整 Flash 视频。</p><h2 id="3-DownThemAll-全部下载！"><a href="#3-DownThemAll-全部下载！" class="headerlink" title="3. DownThemAll! 全部下载！"></a>3. DownThemAll! 全部下载！</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211439471.png" alt=""></p><p>听名字就知道，这是一个能够下载页面上资源文件的一个扩展。虽然在调试控制台的<strong>source</strong>中可以找到这些资源文件，但是这个扩展显然对普通用户更加友好。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211729525.png" alt=""></p><p>你只需要在菜单栏点击 DownThemAll! 即可检测所有的资源文件，并按照类型进行分类，同时支持正则表达式进行筛选。</p><p>当然了，现在的网站对自己网站的资源文件可谓是层层防护加密；所以对于有些资源文件，这个扩展可能没有办法检测到了。</p><h2 id="4-Color-Picker-颜色拾取器"><a href="#4-Color-Picker-颜色拾取器" class="headerlink" title="4. Color Picker 颜色拾取器"></a>4. Color Picker 颜色拾取器</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211824062.png" alt=""></p><p>现在的网页设计是越来越漂亮了，想取一下网页的某个颜色，就可以尝试用这个扩展插件。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211923968.png" alt=""></p><p>安装它后，你可以在菜单栏找到它，点击它再点击<strong>Pick color from web page</strong>，你的光标下方就会会出现一个小方框，里面是当前像素的颜色，而网页的右下方将出现一个颜色提示框，会为你自动转换成<strong>网页十六进制颜色、RGB 颜色</strong>代码。还不够？</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517211954497.png" alt=""></p><p>点击你想要选择的颜色之后，扩展插件会自动帮你保存，点击菜单栏的 Color Picker 图标，在<strong>Selected color</strong>下就有多种格式的颜色代码，复制后即可使用。</p><h2 id="5-What-The-Font-什么字体"><a href="#5-What-The-Font-什么字体" class="headerlink" title="5. What The Font 什么字体"></a>5. What The Font 什么字体</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212057444.png" alt=""></p><p>这也是一个设计师喜欢的扩展，现在很多网站都会自定义字体，使用这个扩展即可自动为你从网页源代码中提取字体名称。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212211717.png" alt=""></p><p>这也算是个平常用不着，需要的时候又不可或缺的扩展。</p><h2 id="6-Whatruns-什么在运行"><a href="#6-Whatruns-什么在运行" class="headerlink" title="6. Whatruns 什么在运行"></a>6. Whatruns 什么在运行</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212332165.png" alt=""></p><p>这个扩展程序则是前段设计师最喜欢的，它会帮你分析支持网页所运行的：<strong>CDN / 框架 / 跟踪器 / 字体 / 通信服务 /脚本 / 插件 等等</strong>。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212258428.png" alt=""></p><p>你需要做的只是在网页正常加载之后，点击工具栏的 Whatruns 图标。</p><h2 id="7-FireShot-网页截图"><a href="#7-FireShot-网页截图" class="headerlink" title="7. FireShot 网页截图"></a>7. FireShot 网页截图</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212429589.png" alt=""></p><p>FireShot 算是在 Chrome 扩展中非常闻名的扩展插件了，虽然现在系统都内置了屏幕截图，但是这个扩展插件在网页截图上仍然难以替代。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212615349.png" alt=""></p><p>FireShot 支持三种截图方式：<strong>捕捉选定区域、捕捉整个页面、捕捉可见部分</strong>；对截图可以进行：<strong>另存为图片、另存为 PDF、Email 发送、复制到剪贴板和打印</strong>。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212556253.png" alt=""></p><p><strong>捕捉整个页面</strong>是特色功能，点击后它会帮助你直接完整截图整个网页，这是大多数系统内置的截图功能无法实现的功能。</p><h2 id="8-OneTab-标签页集合"><a href="#8-OneTab-标签页集合" class="headerlink" title="8. OneTab 标签页集合"></a>8. OneTab 标签页集合</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212705539.png" alt=""></p><p>在很多情况下，我们需要打开很多标签页，进行资料的对比和收集整理。多标签页的 Chrome 就是个“内存猛兽”分分钟占用完你的 64GB 海量内存，但是有的标签页又需要留着备用。那么这个 OneTab 就能拯救你的 Chrome 内存。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212801229.png" alt=""></p><p>首先，右键固定你必须要用的标签页；在菜单栏中点击 OneTab，它会帮你把你暂时不需要的页面集合到一个页面中；你需要打开时，只需要在 OneTab 页面中点击即可。</p><h2 id="9-Tab-Resize-标签页分屏"><a href="#9-Tab-Resize-标签页分屏" class="headerlink" title="9. Tab Resize 标签页分屏"></a>9. Tab Resize 标签页分屏</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212859294.png" alt=""></p><p>如果你喜欢上一个 OneTab 扩展，那么这个 Tab Resize 也绝对很适合你。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517212928211.png" alt=""></p><p>Tab Resize 会自动新建页面将 Chrome 分屏，预设的有：<strong>2x2 / 2x1 / 1x2 / 1x1</strong>，当然你也可以自定义行列分屏个数。在大屏电脑上能够方便地在各个常用页面进行浏览和对比。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517213015476.png" alt=""></p><p>这个扩展在<strong>macOS / Linux</strong>系统上尤为好用，因为 macOS/Linux 还没有像 Windows 平台那样方便好用的窗口管理。</p><h2 id="10-Tampermonkey-油猴"><a href="#10-Tampermonkey-油猴" class="headerlink" title="10. Tampermonkey 油猴"></a>10. Tampermonkey 油猴</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517213317089.png" alt=""></p><p>最后一定要来一个重磅扩展插件，Tampermonkey，习惯叫它油猴，是一个能够自定义运行浏览器 UserScript 的扩展。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517213405731.png" alt=""></p><p>油猴的强大之处不是它本身能干什么，而是借助它，你能做各种各样的事，因为它本身只是一个运行平台，你需要自己往其中添加脚本。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200517213447136.png" alt=""></p><p>你可以：</p><ul><li>屏蔽广告</li><li>破除网页复制限制</li><li>提取网页视频文件</li><li>电商平台自动比价</li><li>…………</li></ul><p>它有大量的活跃脚本开发者，创造了各种各样的 UserScript，油猴就是 Chrome 的百宝箱。</p><h2 id="EFO"><a href="#EFO" class="headerlink" title="EFO"></a>EFO</h2><p>还有推荐的 Chrome 扩展，可以在下方评论留言哦~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Chrome-十个高效扩展程序&quot;&gt;&lt;a href=&quot;#Chrome-十个高效扩展程序&quot; class=&quot;headerlink&quot; title=&quot;Chrome 十个高效扩展程序&quot;&gt;&lt;/a&gt;Chrome 十个高效扩展程序&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Google Chrome 能一越成为浏览器的霸主，不仅仅是其优秀的渲染引擎 Blink 和高效的脚本引擎 V8，更因为是其拥有丰富的扩展插件，为浏览器开启了更多的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/chrome_img_1.png&quot; style=&quot;zoom:50%;&quot; /&gt;

&lt;p&gt;下面，将介绍 10 个扩展 chrome 浏览器功能的扩展程序，它们都可以在&lt;strong&gt;Chrome 网上商店找到&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="essay" scheme="https://ryzenx.com/categories/essay/"/>
    
    
      <category term="essay" scheme="https://ryzenx.com/tags/essay/"/>
    
      <category term="Chrome" scheme="https://ryzenx.com/tags/chrome/"/>
    
      <category term="note" scheme="https://ryzenx.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>(RPi#1) Raspberry Pi 搭建支持苹果AirPlay的播放器</title>
    <link href="https://ryzenx.com/2020/05/airplay-on-rpi/"/>
    <id>https://ryzenx.com/2020/05/airplay-on-rpi/</id>
    <published>2020-05-12T09:09:06.000Z</published>
    <updated>2022-01-14T05:12:35.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RPi-1-Raspberry-Pi-搭建支持苹果-AirPlay-的播放器"><a href="#RPi-1-Raspberry-Pi-搭建支持苹果-AirPlay-的播放器" class="headerlink" title="(RPi#1) Raspberry Pi 搭建支持苹果 AirPlay 的播放器"></a>(RPi#1) Raspberry Pi 搭建支持苹果 AirPlay 的播放器</h1><blockquote><p>Raspberry Pi 4B 内置了 Bluetooth 5.0，按道理说可以把它变成一个蓝牙音响的接收器。不过苹果的 Bonjour 协议是真的好用，可以在局域网内共享音视频播放。</p></blockquote><span id="more"></span><h2 id="准备工作（一堆废话）"><a href="#准备工作（一堆废话）" class="headerlink" title="准备工作（一堆废话）"></a>准备工作（一堆废话）</h2><h3 id="1-联网"><a href="#1-联网" class="headerlink" title="1. 联网"></a>1. 联网</h3><p>确保你的 RPi 链接上了跟你的 Apple 设备同一个网络。</p><h3 id="2-连接树莓派"><a href="#2-连接树莓派" class="headerlink" title="2. 连接树莓派"></a>2. 连接树莓派</h3><ul><li><p>ssh 连接：</p><p>​ <code>ssh pi@&lt;ip addr&gt;</code></p></li><li><p>vnc 连接：</p><p><code>vnc://&lt;ip addr&gt;</code></p></li></ul><h3 id="3-更新源"><a href="#3-更新源" class="headerlink" title="3. 更新源"></a>3. 更新源</h3><p>根据个人需要可以换源：<code>sudo vim /etc/apt/sources.list</code></p><p>已知问题：通过代理下载包经常 wait for header 等很久</p><p><code>sudo apt-get update</code></p><h2 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h2><p>项目名称是<strong>shairplay</strong></p><p><code>git clone https:*//github.com/juhovh/shairplay.git &amp;&amp; cd shairplay</code></p><h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install autoconf automake libtool</span><br><span class="line">sudo apt-get -y install libltdl-dev libao-dev libavahi-compat-libdnssd-dev</span><br><span class="line">sudo apt-get -y install avahi-daemon</span><br></pre></td></tr></table></figure><h2 id="在本地编译并安装"><a href="#在本地编译并安装" class="headerlink" title="在本地编译并安装"></a>在本地编译并安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./autogen.sh</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>如果上几步没有错误就能运行了，程序会在运行时输出日志，建议开个 screen 运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shairplay -a &lt;your_server_name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如我的server_name 就是 RPi</span></span><br></pre></td></tr></table></figure><p>在 Apple 设备播放音乐的时候选择<your_server_name>就好了</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/RPi-airplay.jpg" alt=""></p><h2 id="按照需求设置开机自启动"><a href="#按照需求设置开机自启动" class="headerlink" title="按照需求设置开机自启动"></a>按照需求设置开机自启动</h2><p>Linux 设置自启动方法有多种，写一个最简单的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改文件rc.local</span></span><br><span class="line">sudo vim /etc/rc.local</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 <span class="built_in">exit</span> 0 之前加命令</span></span><br><span class="line">shairplay -a &lt;your_server_name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出编辑模式</span></span><br><span class="line">&#123;esc&#125;</span><br><span class="line">:wq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加运行权限</span></span><br><span class="line">sudo chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><ul><li><p>开机后执行<code>shairplay</code>命令提示 key 没有放到正确的目录</p><p>解决方法：在 shairplay 源代码目录中执行：<code>shairplay -a &lt;server_name&gt;</code></p></li><li><p>播放过程中，音乐中断：</p><p>解决办法：点亮屏幕就恢复播放了。是休眠了还是网络原因不得而知。</p></li></ul><h2 id="Enjoy"><a href="#Enjoy" class="headerlink" title="Enjoy!"></a>Enjoy!</h2><p>Raspberry Pi (RPi) 玩法第一节 (#1)</p><p>后续继续更新…</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RPi-1-Raspberry-Pi-搭建支持苹果-AirPlay-的播放器&quot;&gt;&lt;a href=&quot;#RPi-1-Raspberry-Pi-搭建支持苹果-AirPlay-的播放器&quot; class=&quot;headerlink&quot; title=&quot;(RPi#1) Raspberry Pi 搭建支持苹果 AirPlay 的播放器&quot;&gt;&lt;/a&gt;(RPi#1) Raspberry Pi 搭建支持苹果 AirPlay 的播放器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Raspberry Pi 4B 内置了 Bluetooth 5.0，按道理说可以把它变成一个蓝牙音响的接收器。不过苹果的 Bonjour 协议是真的好用，可以在局域网内共享音视频播放。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="essay" scheme="https://ryzenx.com/tags/essay/"/>
    
      <category term="Raspberry Pi" scheme="https://ryzenx.com/tags/raspberry-pi/"/>
    
      <category term="AirPlay" scheme="https://ryzenx.com/tags/airplay/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft NNI 样例分析</title>
    <link href="https://ryzenx.com/2020/05/NNI-example/"/>
    <id>https://ryzenx.com/2020/05/NNI-example/</id>
    <published>2020-05-10T07:58:21.000Z</published>
    <updated>2022-01-14T05:12:35.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NNI-样例分析"><a href="#NNI-样例分析" class="headerlink" title="NNI 样例分析"></a>NNI 样例分析</h1><blockquote><p>NNI (<a href="https://github.com/microsoft/nni">Neural Network Intelligence</a>) 是微软亚洲研究院开源的自动机器学习工具。</p><p>分析样例：<code>nni/examples/trials/mnist-tfv2</code></p></blockquote><span id="more"></span><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作者名字</span></span><br><span class="line"><span class="attr">authorName:</span> <span class="string">StevenOS</span></span><br><span class="line"><span class="comment"># 实验名称</span></span><br><span class="line"><span class="attr">experimentName:</span> <span class="string">Test</span></span><br><span class="line"><span class="comment"># 定义trial的数量，一般不大于空闲GPU的数量</span></span><br><span class="line"><span class="attr">trialConcurrency:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 定义此实验的最长执行时间，单位有:s, m, h, d</span></span><br><span class="line"><span class="attr">maxExecDuration:</span> <span class="string">1h</span></span><br><span class="line"><span class="comment"># 最大trail的数量</span></span><br><span class="line"><span class="attr">maxTrialNum:</span> <span class="number">10</span></span><br><span class="line"><span class="comment"># choices: local, remote, pai</span></span><br><span class="line"><span class="comment"># 运行此nni服务的位置：</span></span><br><span class="line"><span class="comment"># local: 本地</span></span><br><span class="line"><span class="comment"># remote: ssh链接到的远程计算机</span></span><br><span class="line"><span class="comment"># pai: 提交任务到微软开源的 OpenPAI 上。</span></span><br><span class="line"><span class="attr">trainingServicePlatform:</span> <span class="string">local</span></span><br><span class="line"><span class="comment"># 搜索空间路径</span></span><br><span class="line"><span class="attr">searchSpacePath:</span> <span class="string">search_space.json</span></span><br><span class="line"><span class="comment"># 定义使用标记来分析代码并生成搜索空间。使用Annotation则设置为true</span></span><br><span class="line"><span class="attr">useAnnotation:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">tuner:</span></span><br><span class="line">44<span class="comment"># 系统Tuner的名字</span></span><br><span class="line">44<span class="comment"># choices: TPE, Random, Anneal, Evolution, BatchTuner, MetisTuner,</span></span><br><span class="line">44<span class="comment">#          GPTuner, SMAC (SMAC should be installed through nnictl)</span></span><br><span class="line">    <span class="attr">builtinTunerName:</span> <span class="string">TPE</span></span><br><span class="line">    <span class="comment"># Tuner算法的参数</span></span><br><span class="line">    <span class="attr">classArgs:</span></span><br><span class="line">    <span class="comment"># choices: maximize, minimize</span></span><br><span class="line">        <span class="attr">optimize_mode:</span> <span class="string">maximize</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trail配置</span></span><br><span class="line"><span class="attr">trial:</span></span><br><span class="line">4<span class="comment"># trial执行命令</span></span><br><span class="line">  <span class="attr">command:</span> <span class="string">python3</span> <span class="string">mnist.py</span></span><br><span class="line">  <span class="comment"># 代码相对路径</span></span><br><span class="line">  <span class="attr">codeDir:</span> <span class="string">.</span></span><br><span class="line">  <span class="comment"># 设置GPU个数</span></span><br><span class="line">  <span class="attr">gpuNum:</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="参数定义"><a href="#参数定义" class="headerlink" title="参数定义"></a>参数定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">params = &#123;</span><br><span class="line">        <span class="string">&quot;dropout_rate&quot;</span>: <span class="number">0.5</span>,</span><br><span class="line">        <span class="string">&quot;conv_size&quot;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&quot;hidden_size&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">        <span class="string">&quot;batch_size&quot;</span>: <span class="number">32</span>,</span><br><span class="line">        <span class="string">&quot;learning_rate&quot;</span>: <span class="number">1e-4</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model = MnistModel(</span><br><span class="line">        conv_size=params[<span class="string">&quot;conv_size&quot;</span>],</span><br><span class="line">        hidden_size=params[<span class="string">&quot;hidden_size&quot;</span>],</span><br><span class="line">        dropout_rate=params[<span class="string">&quot;dropout_rate&quot;</span>],</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">model.fit(</span><br><span class="line">        x_train,</span><br><span class="line">        y_train,</span><br><span class="line">        batch_size=params[<span class="string">&quot;batch_size&quot;</span>],</span><br><span class="line">        epochs=<span class="number">10</span>,</span><br><span class="line">        verbose=<span class="number">0</span>,</span><br><span class="line">        callbacks=[ReportIntermediates()],</span><br><span class="line">        validation_data=(x_test, y_test),</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Download and reformat MNIST dataset&quot;&quot;&quot;</span></span><br><span class="line">    mnist = tf.keras.datasets.mnist</span><br><span class="line">    (x_train, y_train), (x_test, y_test) = mnist.load_data()</span><br><span class="line">    x_train, x_test = x_train / <span class="number">255.0</span>, x_test / <span class="number">255.0</span></span><br><span class="line">    x_train = x_train[..., tf.newaxis]</span><br><span class="line">    x_test = x_test[..., tf.newaxis]</span><br><span class="line">    <span class="keyword">return</span> (x_train, y_train), (x_test, y_test)</span><br></pre></td></tr></table></figure><h3 id="提交中间结果"><a href="#提交中间结果" class="headerlink" title="提交中间结果"></a>提交中间结果</h3><blockquote><p>主要代码：</p><p><code>nni.report_intermediate_result()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_epoch_end</span>(<span class="params">self, epoch, logs=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;Reports intermediate accuracy to NNI framework&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;val_acc&quot;</span> <span class="keyword">in</span> logs:</span><br><span class="line">            nni.report_intermediate_result(logs[<span class="string">&quot;val_acc&quot;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nni.report_intermediate_result(logs[<span class="string">&quot;val_accuracy&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="提交最终结果"><a href="#提交最终结果" class="headerlink" title="提交最终结果"></a>提交最终结果</h3><blockquote><p>主要代码</p><p><code>nni.report_final_result()</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss, accuracy = model.evaluate(x_test, y_test, verbose=<span class="number">0</span>)</span><br><span class="line">  nni.report_final_result(accuracy)  <span class="comment"># send final accuracy to NNI tuner and web UI</span></span><br><span class="line">  _logger.info(<span class="string">&quot;Final accuracy reported: %s&quot;</span>, accuracy)</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>从配置文件中的<code>searchSpacePath</code>中读取超级参数和搜索范围字典文件：<code>search_space.json</code></li><li>获得命令行参数，或者采用默认参数</li><li>加载参数，用以产生 2D 图表</li><li>若需要将每次实验结果上报，则使用：<br><code>nni.report_intermediate_result(metric)</code></li><li>若要上报最终结果（以此最终结果作为参数选择的参考），则使用：<br><code>nni.report_final_result(metric)</code></li><li>每次 Trial 重复实现，直到达到配置文件中的<code>maxTrialNum</code></li></ol><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200510204056750.png" alt=""></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200510204115621.png" alt=""></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200510204131183.png" alt=""></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/image-20200510204148149.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NNI-样例分析&quot;&gt;&lt;a href=&quot;#NNI-样例分析&quot; class=&quot;headerlink&quot; title=&quot;NNI 样例分析&quot;&gt;&lt;/a&gt;NNI 样例分析&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;NNI (&lt;a href=&quot;https://github.com/microsoft/nni&quot;&gt;Neural Network Intelligence&lt;/a&gt;) 是微软亚洲研究院开源的自动机器学习工具。&lt;/p&gt;
&lt;p&gt;分析样例：&lt;code&gt;nni/examples/trials/mnist-tfv2&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="ML" scheme="https://ryzenx.com/tags/ml/"/>
    
      <category term="Microsoft" scheme="https://ryzenx.com/tags/microsoft/"/>
    
  </entry>
  
  <entry>
    <title>Linux tar 命令</title>
    <link href="https://ryzenx.com/2020/05/linux-tar/"/>
    <id>https://ryzenx.com/2020/05/linux-tar/</id>
    <published>2020-05-10T04:15:40.000Z</published>
    <updated>2021-03-07T13:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-tar-命令备忘"><a href="#Linux-tar-命令备忘" class="headerlink" title="Linux tar 命令备忘"></a>Linux tar 命令备忘</h1><blockquote><p>tar</p><p>​    -c: 建立压缩档案<br>​    -x：解压<br>​    -t：查看内容<br>​    -r：向压缩归档文件末尾追加文件<br>​    -u：更新原压缩包中的文件</p></blockquote><span id="more"></span><p>下面的参数是根据需要在压缩或解压档案时可选的。</p><p>-z：有gzip属性的<br>-j：有bz2属性的<br>-Z：有compress属性的<br>-v：显示所有过程<br>-O：将文件解开到标准输出</p><p>下面的参数-f是必须的</p><p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p><p># tar -cf all.tar *.jpg<br>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。</p><p># tar -rf all.tar *.gif<br>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。</p><p># tar -uf all.tar logo.gif<br>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。</p><p># tar -tf all.tar<br>这条命令是列出all.tar包中所有文件，-t是列出文件的意思</p><p># tar -xf all.tar<br>这条命令是解出all.tar包中所有文件，-x是解开的意思</p><h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ul><li>tar –cvf jpg.tar *.jpg 将目录里所有jpg文件打包成tar.jpg</li><li>tar –czf jpg.tar.gz *.jpg  将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</li><li>tar –cjf jpg.tar.bz2 *.jpg 将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</li><li>tar –cZf jpg.tar.Z *.jpg  将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</li><li>rar a jpg.rar *.jpg rar格式的压缩，需要先下载rar for linux</li><li>zip jpg.zip *.jpg  zip格式的压缩，需要先下载zip for linux</li></ul><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><ul><li>tar –xvf file.tar 解压 tar包</li><li>tar -xzvf file.tar.gz 解压tar.gz</li><li>tar -xjvf file.tar.bz2  解压 tar.bz2</li><li>tar –xZvf file.tar.Z  解压tar.Z</li><li>unrar e file.rar 解压rar</li><li>unzip file.zip 解压zip</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>*.tar 用 tar –xvf 解压</li><li>*.gz 用 gzip -d或者gunzip 解压</li><li><em>.tar.gz和</em>.tgz 用 tar –xzf 解压</li><li>*.bz2 用 bzip2 -d或者用bunzip2 解压</li><li>*.tar.bz2用tar –xjf 解压</li><li>*.Z 用 uncompress 解压</li><li>*.tar.Z 用tar –xZf 解压</li><li>*.rar 用 unrar e解压</li><li>*.zip 用 unzip 解压</li></ol><p>1．命令格式：</p><p>tar[必要参数][选择参数][文件] </p><p>2．命令功能：</p><p>用来压缩和解压文件。tar本身不具有压缩功能。他是调用压缩功能实现的 </p><p>3．命令参数：</p><p>必要参数有如下：</p><p>-A 新增压缩文件到已存在的压缩</p><p>-B 设置区块大小</p><p>-c 建立新的压缩文件</p><p>-d 记录文件的差别</p><p>-r 添加文件到已经压缩的文件</p><p>-u 添加改变了和现有的文件到已经存在的压缩文件</p><p>-x 从压缩的文件中提取文件</p><p>-t 显示压缩文件的内容</p><p>-z 支持gzip解压文件</p><p>-j 支持bzip2解压文件</p><p>-Z 支持compress解压文件</p><p>-v 显示操作过程</p><p>-l 文件系统边界设置</p><p>-k 保留原有文件不覆盖</p><p>-m 保留文件不被覆盖</p><p>-W 确认压缩文件的正确性</p><p>可选参数如下：</p><p>-b 设置区块数目</p><p>-C 切换到指定目录</p><p>-f 指定压缩文件</p><p>–help 显示帮助信息</p><p>–version 显示版本信息</p><p>4．常见解压/压缩命令</p><p>tar<br>解包：tar xvf FileName.tar<br>打包：tar cvf FileName.tar DirName<br>（注：tar是打包，不是压缩！）</p><p>.gz<br>解压1：gunzip FileName.gz<br>解压2：gzip -d FileName.gz<br>压缩：gzip FileName</p><p>.tar.gz 和 .tgz<br>解压：tar zxvf FileName.tar.gz<br>压缩：tar zcvf FileName.tar.gz DirName</p><p>.bz2<br>解压1：bzip2 -d FileName.bz2<br>解压2：bunzip2 FileName.bz2<br>压缩： bzip2 -z FileName</p><p>.tar.bz2<br>解压：tar jxvf FileName.tar.bz2<br>压缩：tar jcvf FileName.tar.bz2 DirName</p><p>.bz<br>解压1：bzip2 -d FileName.bz<br>解压2：bunzip2 FileName.bz<br>压缩：未知</p><p>.tar.bz<br>解压：tar jxvf FileName.tar.bz<br>压缩：未知</p><p>.Z<br>解压：uncompress FileName.Z<br>压缩：compress FileName</p><p>.tar.Z<br>解压：tar Zxvf FileName.tar.Z<br>压缩：tar Zcvf FileName.tar.Z DirName</p><p>.zip<br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName</p><p>.rar<br>解压：rar x FileName.rar<br>压缩：rar a FileName.rar DirName</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Linux-tar-命令备忘&quot;&gt;&lt;a href=&quot;#Linux-tar-命令备忘&quot; class=&quot;headerlink&quot; title=&quot;Linux tar 命令备忘&quot;&gt;&lt;/a&gt;Linux tar 命令备忘&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;tar&lt;/p&gt;
&lt;p&gt;​    -c: 建立压缩档案&lt;br&gt;​    -x：解压&lt;br&gt;​    -t：查看内容&lt;br&gt;​    -r：向压缩归档文件末尾追加文件&lt;br&gt;​    -u：更新原压缩包中的文件&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Linux" scheme="https://ryzenx.com/tags/linux/"/>
    
      <category term="Command" scheme="https://ryzenx.com/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>小米10青春版开箱</title>
    <link href="https://ryzenx.com/2020/05/mi10-lite-room/"/>
    <id>https://ryzenx.com/2020/05/mi10-lite-room/</id>
    <published>2020-05-08T01:22:55.000Z</published>
    <updated>2022-01-14T05:12:35.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小米-10-青春版开箱"><a href="#小米-10-青春版开箱" class="headerlink" title="小米 10 青春版开箱"></a>小米 10 青春版开箱</h1><blockquote><p>小米 10 青春版是小米公司旗下的手机，是“一部专为年轻人打造的 5G 手机”，搭载高通骁龙 765G 双模 5G 平台，支持双卡双待，采用三星 AMOLED 钻石排列屏，搭载后置 4 摄，潜望式长焦镜头，最高支持 50 倍变焦。</p></blockquote><span id="more"></span><h2 id="01-前言"><a href="#01-前言" class="headerlink" title="01-前言"></a>01-前言</h2><p>这次购买的<strong>小米 10 青春版</strong>也叫<strong>Mi 10 Lite Room</strong>，听名字也就知道这部手机的卖点是潜望式摄像头，支持 5x 光学变焦。而这部手机也算是我购买得“最及时”的一部手机，几乎是在预售已开始就购买了。</p><p>选择这部手机的原因也比较简单，就是以前的旧手机已经有卡顿迹象了，而且潜望式变焦也是我想体验的一个功能，还能赶在 2020 的春天用上 5G。我知道这部手机的缺点其实不少，比如最坑人的<strong>高通骁龙 765G</strong>和<strong>LPDDR4X+UFS2.1</strong>，这些方面在今年属实有些落伍。请看下方详细体验后，可以自行决定是否值得购买。</p><h2 id="02-配置"><a href="#02-配置" class="headerlink" title="02-配置"></a>02-配置</h2><center><p style="font-size:14px;">以下数据来自小米商城官网</p></center><h3 id="02-01-颜色"><a href="#02-01-颜色" class="headerlink" title="02-01-颜色"></a>02-01-颜色</h3><p>小米 10 青春版一共提供了五种颜色：</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/mi-store-screenshots-1.png" alt=""></p><ul><li>黑巧风暴（深空灰）</li><li>蓝莓薄荷（蓝绿渐变）</li><li>桃子西柚（橙色）</li><li>四季春奶绿（绿色）</li><li>白桃乌龙（粉白渐变）</li></ul><p>但是在首发预售中只提供了：<em>黑巧风暴、蓝莓薄荷、白桃乌龙</em>三种颜色，不过我个人认为<strong>四季春奶绿</strong>是最好看的配色了。</p><h2 id="02-02-处理器"><a href="#02-02-处理器" class="headerlink" title="02-02-处理器"></a>02-02-处理器</h2><p>骁龙 765G 5G 处理器</p><p>CPU 架构工艺：Kryo 475 架构，7nm EUV 工艺制程</p><p>CPU 主频：八核处理器，最高主频可达：2.4GHz；</p><p>高通三丛集设计：1x2.4GHz，1x2.2GHz，6x1.80GHz</p><p>GPU ：Adreno 620 图形处理器，最高频率可达 625MHz</p><p>AIE：第五代 AI 引擎</p><h3 id="02-03-内存与存储空间"><a href="#02-03-内存与存储空间" class="headerlink" title="02-03-内存与存储空间"></a>02-03-内存与存储空间</h3><p>运行内存：6GB / 8GB LPDDR4X 高速内存</p><p>机身存储：64GB / 128GB / 256GB UFS 2.1 高速存储</p><h3 id="02-04-屏幕"><a href="#02-04-屏幕" class="headerlink" title="02-04-屏幕"></a>02-04-屏幕</h3><p>6.57″ 三星 AMOLED 原色屏</p><p>180Hz 采样率丨屏下光学指纹</p><p>分辨率 2400 x 1080 FHD+</p><p>屏幕亮度 800nit（峰值亮度）<em>/ 600nit（HBM）</em></p><p>对比度 4,300,000 : 1</p><p>支持 HDR10/ 10+ 视频播放</p><p>支持阳光屏 3.0 | 夜光屏 | 护眼模式 | 色温调节 | 色彩风格自定义</p><p>德国莱茵 TÜV 低蓝光认证</p><p>康宁第 5 代大猩猩玻璃 （屏幕盖板）</p><h3 id="02-05-相机"><a href="#02-05-相机" class="headerlink" title="02-05-相机"></a>02-05-相机</h3><h4 id="后置"><a href="#后置" class="headerlink" title="后置"></a>后置</h4><ul><li><p>4800 万像素超清主摄</p><p>1/2″ 超大感光元件、1.6μm 4 合 1 超大像素、f/1.79 超大光圈、6P 镜头</p></li><li><p>800 万潜望式长焦镜头</p><p>50 倍潜望式变焦、5 倍光学变焦、10 倍混合光学变焦、分体式 OIS 光学防抖</p></li><li><p>800 万超广角镜头</p><p>120° 超大广角、f/2.2 光圈</p></li><li><p>独立微距镜头</p><p>2cm-10cm 对焦距离</p></li></ul><p>后置视频拍摄帧率</p><table><thead><tr><th>分辨率</th><th>帧率</th></tr></thead><tbody><tr><td>4K 视频拍摄</td><td>30fps</td></tr><tr><td>1080p 视频拍摄</td><td>30 / 60fps</td></tr><tr><td>720p 视频拍摄</td><td>30fps</td></tr></tbody></table><p>后置视频慢动作帧率</p><table><thead><tr><th>分辨率</th><th>帧率</th></tr></thead><tbody><tr><td>720p</td><td>120 / 240 / 960fps</td></tr><tr><td>1080p</td><td>120fps</td></tr></tbody></table><h4 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h4><ul><li>1600 万超清前置相机</li></ul><p>视频拍摄</p><table><thead><tr><th>分辨率</th><th>帧率</th></tr></thead><tbody><tr><td>1080p</td><td>30fps</td></tr><tr><td>720p</td><td>30 / 120fps</td></tr></tbody></table><h3 id="02-06-电池与充电"><a href="#02-06-电池与充电" class="headerlink" title="02-06-电池与充电"></a>02-06-电池与充电</h3><ul><li><p>容量：4160mAh（typ） / 4060mAh（min）</p></li><li><p>接口：USB Type-C 双面充电接口</p></li><li><p>快充协议：QC4+ / QC3+ / PD3.0</p></li><li><p>快充功率：22.5W</p></li></ul><h3 id="02-07-网络制式"><a href="#02-07-网络制式" class="headerlink" title="02-07-网络制式"></a>02-07-网络制式</h3><ul><li><p>SA/NSA 双模丨双卡丨全网通 6.0</p></li><li><p>支持移动 5G / 4G+ / 4G / 2G，联通 5G / 4G+ / 4G / 3G / 2G，电信 5G / 4G+ / 4G / 3G / 2G</p></li><li><p>支持双卡 VoLTE 高清语音</p></li><li><p>支持频段：</p><ul><li>5G ：n1 / n41 / n78 / n79</li><li>4G ：FDD-LTE ：B1 / B2 / B3 / B4 / B5 / B7 / B8 ｜ TDD-LTE：B34 / B38 / B39 / B40 / B41</li><li>3G：WCDMA：B1 / B2 / B5 / B8 ; CDMA EVDO : BC0</li><li>2G：GSM：B2 / B3 / B5 / B8 ; CDMA 1X : BC0</li></ul></li><li><p>支持 4×4 MIMO 天线技术 | HPUE | HO RxD</p></li></ul><h3 id="02-08-无线连接"><a href="#02-08-无线连接" class="headerlink" title="02-08-无线连接"></a>02-08-无线连接</h3><ul><li><p>WLAN 协议：Wi-Fi 5，Wi-Fi 4 以及 802.11a / b / g</p></li><li><p>WLAN 频率： 2.4G Wi-Fi | 5G Wi-Fi</p></li><li><p>支持 2x2 MIMO，Wi-Fi Direct，Miracast，2.4G、5G 双路并发</p></li><li><p>蓝牙：Bluetooth 5.1，高通 TrueWireless Stereo Plus</p></li><li><p>支持 AAC / LDAC / LHDC / aptX / aptX -Adaptive</p></li><li><p>NFC</p></li><li><p>双频 GNSS：</p><p>北斗: B1I+B2a 丨 GPS :L1+L5 丨 Galileo: E1+E5a 丨 GLONASS: G1 丨 QZSS: L1+L5</p><p>AGPS 辅助定位丨数据网络定位丨 Wi-Fi 网络定位</p></li></ul><h3 id="02-09-外形与按键"><a href="#02-09-外形与按键" class="headerlink" title="02-09-外形与按键"></a>02-09-外形与按键</h3><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/mi-store-screenshots-2.png" alt=""></p><center>有极其先进的3.5mm接口和线性马达还是不错的</center><h3 id="02-10-传感器"><a href="#02-10-传感器" class="headerlink" title="02-10-传感器"></a>02-10-传感器</h3><ul><li>超声波距离传感器</li><li>环境光传感器</li><li>加速度传感器</li><li>陀螺仪</li><li>电子罗盘</li><li>线性马达</li><li>红外线遥控器</li></ul><h3 id="02-11-包装内容"><a href="#02-11-包装内容" class="headerlink" title="02-11-包装内容"></a>02-11-包装内容</h3><p>值得一提的是小米 10 青春版的包装内容中有一个银离子抗菌手机壳，和一张抗菌贴膜。这一点小的变换我还是非常喜欢，希望以后的手机厂商都应该制作抗菌的手机壳或者手机贴膜。</p><h2 id="03-开箱"><a href="#03-开箱" class="headerlink" title="03-开箱"></a>03-开箱</h2><p>小米的物流还是相当的快的，发货后隔日达，先来看看有哪些东西吧。</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200503_093205.jpg" style="zoom:67%;" /><p>小米 10 青春版采用盲盒包装，也就是说，小米 10 青春版的盒子有多种，发货是随机的。预购小米 10 青春版会赠送一个小米双单元入耳式耳机，还有新品 5G 手机会赠送的小米移动定制手机卡。</p><p>下面来打开主体包装：</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200503_093355.jpg" style="zoom:67%;" /><p>除了手机充电器、上文提到的抗菌手机膜和手机壳外，小米 10 青春版还随机赠送了两张贴纸，当然贴纸图案也是随机的。这是我贴上图案的手机，贴完之后才发现有点花里胡哨了哈哈哈哈哈。</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG20200508101753.jpg" style="zoom:67%;" /><p>也看的出来，我购买的颜色是蓝莓薄荷，也就是蓝绿渐变，我觉得还不错，相对于四季春奶绿还差点，你们觉得呢？</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200503_093829.jpg" style="zoom:67%;" /><h2 id="04-功能体验"><a href="#04-功能体验" class="headerlink" title="04-功能体验"></a>04-功能体验</h2><h3 id="04-01-外观设计"><a href="#04-01-外观设计" class="headerlink" title="04-01-外观设计"></a>04-01-外观设计</h3><p>背面的渐变设计和<strong>“火箭炮”</strong>相机矩阵算是今年的流行设计元素了。相机矩阵还做了以主摄像头为中心的反光辐射条纹，这种设计在隔壁荣耀上也有；而小米 10 青春版的渐变颜色后盖确实很得人心，相对于一些平常色彩的旗舰机，还是很有青春活力。但是正面的设计就如同<em>梦回 2019</em>，水滴屏和较宽的上下侧边框。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG20200508104439.jpg" alt=""></p><h3 id="04-02-相机"><a href="#04-02-相机" class="headerlink" title="04-02-相机"></a>04-02-相机</h3><p>小米 10 青春版的 50x 混合式变焦是它的主要卖点，这也是小米第一次做潜望式摄像头，也符合小米把新技术放在中端机上试试水的操作。下面是手持、自动模式、5 倍光学变焦状态下的照片（照片经过压缩）</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200503_212424.jpg" alt=""></p><p>个人感觉小米这一次，并没有把潜望式镜头做好：CMOS 采用的是 OV48B2Q，不是好一点的三星 GW 或者索尼 IMX；潜望式镜头才给了 800 万像素，数码变焦也就是裁切，所以 50x 变焦下的效果其实很糊。不过经过实际测试，空旷场景 50x 下看清几公里外的建筑还是没有问题，看清字的话，一公里就差不多了。</p><p>微距效果：</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200508_102136.jpg" alt=""></p><p>对焦距离两厘米左右，中规中矩。</p><p>电影模式和更加好玩的短视频功能以及 120 度的广角和 4800 万的主摄就暂时没有样片了，等有机会出门游玩再拍拍看。<strong>AI 魔法换天、前后摄同屏</strong>功能还需要等待之后的 OTA 推送，后续会针对相机专门出一节。</p><h3 id="04-03-屏幕"><a href="#04-03-屏幕" class="headerlink" title="04-03-屏幕"></a>04-03-屏幕</h3><p>这次小米 10 青春版的屏幕也算是一个卖点，三星 AMOLED 屏：原色屏、专业色准 Delta E 1.1、JNCD &lt; 0.7 超高色彩精准度、钻石排列。屏幕素质说是旗舰级也是不过分的，有 180Hz 采样率但是没有 90Hz 刷新率也应该是为了其中档的定位。至少不会像隔壁又抽奖生产厂商又抽奖屏幕排列了。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/Screenshot_2020-05-08-11-08-52-23.jpg" alt=""></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/Screenshot_2020-05-08-11-09-09-09.jpg" alt=""></p><h3 id="04-04-性能"><a href="#04-04-性能" class="headerlink" title="04-04-性能"></a>04-04-性能</h3><p>小米 10 青春版搭载的就是青春版处理器：<strong>高通骁龙 765G</strong></p><p>这个性能我也不必多说，毕竟只是去年的中高端 Soc，想要完全流畅的玩游戏还是有点费劲。</p><h3 id="04-05-其他"><a href="#04-05-其他" class="headerlink" title="04-05-其他"></a>04-05-其他</h3><p>其他方面堆料还是很足：红外遥控、双频 GPS、线性马达、NFC 等日常需要的都有。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/mi-store-screenshots-3.png" alt=""></p><h2 id="05-总结"><a href="#05-总结" class="headerlink" title="05-总结"></a>05-总结</h2><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/mi-store-screenshots-4.png" alt=""></p><p>对于这个 ¥2099 起售的中端机型来说，个人认为光是潜望式摄像头不足以支撑其卖点，如果能提升摄像头的像素或者采用 LPDDR5+UFS3.0 的话，这个价格就非常香了。</p><p>总的来说，小米 10 青春版还是很对<strong>青春</strong>的味：</p><ul><li>50x 变焦能够让大学生坐在后排也能拍清楚黑板；</li><li>4800 万主摄也能满足日常拍照和扫码；</li><li>能够及时体验到 5G，不落伍；</li><li>好玩的电影相机、分身照片等也能丰富同学在一起的活动；</li><li>去年中高端的 765G 不仅能在聚会时能开黑不尴尬，又能控制对游戏的沉迷；</li><li>花花绿绿的配色和贴纸能让手机更具个性化。</li></ul><p>如果是高端玩家，这款机型显然不能满足性能需求。同价位不如选购去年的旗舰机，能够上骁龙 855 甚至骁龙 855+，比如 <a href="https://ryzenx.com/2020/02/realme_x2_pro/">realme X2 Pro</a> ，还能上个 90Hz 刷新率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;小米-10-青春版开箱&quot;&gt;&lt;a href=&quot;#小米-10-青春版开箱&quot; class=&quot;headerlink&quot; title=&quot;小米 10 青春版开箱&quot;&gt;&lt;/a&gt;小米 10 青春版开箱&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;小米 10 青春版是小米公司旗下的手机，是“一部专为年轻人打造的 5G 手机”，搭载高通骁龙 765G 双模 5G 平台，支持双卡双待，采用三星 AMOLED 钻石排列屏，搭载后置 4 摄，潜望式长焦镜头，最高支持 50 倍变焦。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="essay" scheme="https://ryzenx.com/categories/essay/"/>
    
    
      <category term="开箱" scheme="https://ryzenx.com/tags/%E5%BC%80%E7%AE%B1/"/>
    
      <category term="小米" scheme="https://ryzenx.com/tags/%E5%B0%8F%E7%B1%B3/"/>
    
  </entry>
  
  <entry>
    <title>快充技术的前世今生</title>
    <link href="https://ryzenx.com/2020/04/charge-fast/"/>
    <id>https://ryzenx.com/2020/04/charge-fast/</id>
    <published>2020-04-23T15:19:10.000Z</published>
    <updated>2021-06-13T03:51:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在快充技术逐渐成熟，人们对电量的焦虑在逐渐下降。</p><blockquote><p>2020年了，你还想手机能手动换电池吗？</p><p>➡️<a href="https://shimo.im/docs/m6kMLxenVoUrFBqD/">石墨文档预览</a></p></blockquote><span id="more"></span><h2 id="前世"><a href="#前世" class="headerlink" title="前世"></a>前世</h2><p>1994年8月 Simon 这部完全靠触摸操作的智能手机问世，给手机界开了这样一个先河：<strong>不可拆卸式电池</strong>。虽然 IBM 开了这样一个头，但是当时似乎并没有多少手机采用不可拆卸电池的设计，因为当时电池的比容量很小，为了能让用户使用更长时间，让当时的商务人士不会漏接电话，可替换式电池设计更能满足需求。</p><img src="https://uploader.shimo.im/f/rZwhtFRU1m8pmjzG.jpeg!thumbnail" alt="图片" style="zoom:67%;" /><center>图片来源：百度百科</center><p>人们所熟悉的不可拆卸式电池设计的还是于2007年发布的 iPhone 手机，给手机界真正带来了触控式交互和不可拆卸式电池设计。之后很多手机厂商渐渐地都开始设计了不可拆卸式电池，之后很多年，对于可更换式电池的手机，追求者不在少数。所以就有了这样一件东西——<strong>充电宝。</strong></p><p><img src="https://uploader.shimo.im/f/9JU2OpTS8wi7CjhW.jpg!thumbnail" alt="图片"></p><p>充电宝，其实就是“可更换电池”的另外一种形式，它从容量上从几百毫安时，提升至几万毫安时；功率从5W，提升至了65W。还记得几年前出门不带充电宝，简直就如同随时失踪失连。</p><p>随着电池技术的提升、手机体积的增大，电池的容量不断提升，公众对电量的关注逐渐降低了。但是随之而来的问题是，大容量的电池充电时间会变得很长，于是，快速充电技术应运而生。</p><h2 id="今生"><a href="#今生" class="headerlink" title="今生"></a>今生</h2><center><p style="font-size: 11px">  （以下部分内容源于回形针PaperClip-回形针事务所008)</p></center><h3 id="功率"><a href="#功率" class="headerlink" title="功率"></a>功率</h3><p>在中国，城市内家庭交流电的有效电压是220V，输入功率从77W到330W，而充电器的输出功率却收到多方面的限制：</p><ul><li>首先是充电器的工艺质量，如果电流过大，充电器内部的变压器整流器将产生更多的焦耳热，产生巨大安全隐患。</li><li>其次是充电器的大小，为了转换大功率的电流，充电器的体积必然会加大。</li><li>最后是你的手机电池，它能否承受住高功率的电流输入，决定了你的手机会不会变成一个“定时炸弹”。</li></ul><p><img src="https://uploader.shimo.im/f/lUBIYo6iDCLopabI.jpg!thumbnail" alt="图片"></p><p>为了提升充电功率，多年来出现了不同的充电方案。</p><h3 id="P-U-×-I"><a href="#P-U-×-I" class="headerlink" title="P = U × I"></a>P = U × I</h3><ul><li>小电流高压协议：<ul><li>高通 Quick Charge</li><li>联发科 Pump Express</li><li>德州仪器 TI MaxCharge</li><li>摩托罗拉 Turbo Power</li></ul></li></ul><p>以代表高通 Quick Charge 技术为例。2013 年高通 Quick Charge 1.0 协议随着骁龙600发布，采用了“提升电流”的做法：<strong>I = 1.8A, U = 5V, P = 9W。</strong>因为当时的手机充电器接口通常还是<strong>microUSB</strong>接口，最高通过的电流为2A。</p><p><img src="https://uploader.shimo.im/f/b8EC40vARwIjnG76.png!thumbnail" alt="图片"></p><p>之后2015年高通 Quick Charge 2.0 随着骁龙810发布，电流可选：<strong>1.67A/2.0A/3.0A，</strong>电压可选：<strong>5V/9V/12V</strong>，则最高支持到了36W，但是当时其实并没有普及快充这项快充技术，一是因为快充的充电器价格高昂，而且当时不少手机电池工艺质量不足以承受9V甚至更高的电压。</p><p><img src="https://uploader.shimo.im/f/rA3duuOSlo2T17rH.png!thumbnail" alt="图片"></p><p>2016年，高通随着骁龙820推出了Quick Charge 3.0 技术，考虑到上一代技术在手机上的硬件限制，显著的特点是加入了INOV (Intelligent Negotiation for Optimum Voltage)技术，简单来说，这项技术就是通过与手机“交流”为了不同手机输出不同的电压，范围是 <strong>U = 3.6～20V</strong>，梯度降低到了200mV。而此时 USB Type-C 接口已经普及，所以电流为 <strong>I = 2.6A/4.6A</strong>。最高功率仍然为 <strong>P = 36W</strong>。</p><p><img src="https://uploader.shimo.im/f/Qpl3Xz2ZNQWmouEw.jpeg!thumbnail" alt="图片"></p><p>2017年，高通 Quick Charge 4.0 随着骁龙835发布，随后，高通 Quick Chage 4.0+ 随着骁龙845发布。除了兼容之前的 QC 快充技术外，还特别支持 USB PowerDelivery 3.0 的可编程电源供应技术：电压可以从 3V ～ 11V，步进 20mV；电流从 0A～3A，步进 50mA。而 QC 本身的电流提供：<strong>I = 2.6A/4.6A</strong>，电压提供 <strong>U = 3.6V～20V</strong>，则理论最高功率达到了接近100W，<strong>P = 4.6A × 20V = 92W。</strong></p><p><img src="https://uploader.shimo.im/f/8WVldVnexVYvTbm8.jpeg!thumbnail" alt="图片"></p><hr><ul><li>低压大电流协议：<ul><li>OPPO VOOC</li><li>一加 Dash</li><li>华为 SuperCharge</li></ul></li></ul><p>以小电流高压协议的代表 OPPO VOOC 闪充进行简述：</p><p>VOOC 快充 全称为<strong>V</strong>oltage Open L<strong>oo</strong>p Multi-step Constant-Current <strong>C</strong>harging（电压开环多步恒流充电）。</p><p>2014 年 3 月 19 日，OPPO 率先推出 VOOC 闪充，并在 OPPO Find 7 上商用。相对于高通的 Quick Charge 技术，VOOC 快充的主要特点是在保持电压在 <strong>U = 5V</strong> 的基础上，将电流增大到了 <strong>I = 4A</strong>，所以功率达到了** P = 20W**。但是上文提到，microUSB接口只能支持2A的输出电流。于是OPPO将原有的USB线缆进行改造，增粗以减少电阻，承载更大的电流，同时增加了一个触电以识别VOOC快充协议。</p><img src="https://uploader.shimo.im/f/atzXeomvIOotzRnI.jpg!thumbnail" alt="图片" style="zoom:67%;" /><p>相信大家都还记得当年OPPO的广告词：“充电5分钟，通话2小时”。正是凭借这句广告词，OPPO的专利技术 VOOC 闪充进入大家的视线。</p><img src="https://uploader.shimo.im/f/jm8rRxFv6yMrqNal.jpeg!thumbnail" alt="图片" style="zoom:50%;" /><p>2018 年， SuperVOOC 1.0 由OPPO Find X推出，同时支持的还有 realme X2 Pro，这项技术在前一代的基础上再次增大了电流，使 <strong>I = 5A</strong>，同时提升电压至 <strong>U = 10V</strong>的基础上，使功率一下增加到了 <strong>P = 50W</strong>。之后的2019年，SuperVOOC 2.0 发布，这次直接将电压电流提升至 <strong>I = 6.5A</strong>，电压保持上一代 <strong>U = 10V</strong>，所以最高功率达到了 <strong>P = 65W</strong>，已经和不少笔记本电脑的充电功率相同甚至更高（我手上这台MacBook Air才输入45W）。</p><img src="https://uploader.shimo.im/f/nCCMhd4WZtjBSSd5.jpg!thumbnail" alt="图片" style="zoom:67%;" /><p>而同时OPPO继续升级了VOOC，并没有功率上的激进。2019年发布 VOOC 2.0，电流 <strong>I = 5V</strong>，电压 <strong>U = 5V</strong>，功率为 <strong>P = 25W</strong>。最新一代的VOOC采用电流 <strong>I = 6A</strong>，电压 <strong>U = 5V</strong>，功率 <strong>P = 30W</strong>的设计，可见VOOC系列还一直沿用着5V低压加大电流的方案。</p><p><img src="https://uploader.shimo.im/f/jw9WgbbtMXQYTCji.png!thumbnail" alt="图片"></p><hr><h3 id="充电时间"><a href="#充电时间" class="headerlink" title="充电时间"></a>充电时间</h3><p>搭载 SuperVOOC 2.0 的 OPPO Ace 2 在各类手机充电时间的排行榜中位列第一，不足半小时即可充满一块 4000mAh的电池。</p><p><img src="https://uploader.shimo.im/f/LXw7987HSn8GrTFL.jpg!thumbnail" alt="图片"></p><center>（图片来自：小白测评）</center><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>内置不可拆卸电池的好处有很多，比如提高手机内部的集成度，能够使手机密闭防水，减少后改版散热等。而且目前电池容量已经很高了，充电技术越来越成熟。</p><p>回到最开始那个问题，2020年了，你还想手机能手动换电池吗？</p><p>想？可以购买诺基亚。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在快充技术逐渐成熟，人们对电量的焦虑在逐渐下降。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2020年了，你还想手机能手动换电池吗？&lt;/p&gt;
&lt;p&gt;➡️&lt;a href=&quot;https://shimo.im/docs/m6kMLxenVoUrFBqD/&quot;&gt;石墨文档预览&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="essay" scheme="https://ryzenx.com/categories/essay/"/>
    
    
      <category term="技术" scheme="https://ryzenx.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="快充" scheme="https://ryzenx.com/tags/%E5%BF%AB%E5%85%85/"/>
    
      <category term="公众号文章" scheme="https://ryzenx.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
