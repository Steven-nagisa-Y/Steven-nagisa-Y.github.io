<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小渚w的博客小站</title>
  <icon>https://www.gravatar.com/avatar/6ca04f1323835a0e11ca88932d9026b8</icon>
  <subtitle>小渚w的博客小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ryzenx.com/"/>
  <updated>2022-11-08T03:39:45.654Z</updated>
  <id>https://ryzenx.com/</id>
  
  <author>
    <name>Steven Yan</name>
    <email>me@StevenOS.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用TypeScript创建一个chrome扩展程序</title>
    <link href="https://ryzenx.com/2022/11/Build-a-chrome-extension-with-ts/"/>
    <id>https://ryzenx.com/2022/11/Build-a-chrome-extension-with-ts/</id>
    <published>2022-11-07T09:58:49.000Z</published>
    <updated>2022-11-08T03:39:45.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用TypeScript创建一个chrome扩展程序"><a href="#使用TypeScript创建一个chrome扩展程序" class="headerlink" title="使用TypeScript创建一个chrome扩展程序"></a>使用TypeScript创建一个chrome扩展程序</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>Google Chrome浏览器扩展同时可用于Microsoft Edge浏览器等支持chromium内核与Chrome扩展标准的浏览器，为了叙述方便统一称为chrome扩展。</p><p>本文目标是建立一个基于<code>TypeScript + Webpack</code>的文件模板，并不涉及到网页框架技术。</p><p>需要掌握一定的<code>JavaScript/TypeScript</code>与<code>Nodejs</code>配置知识。</p><p>目前的扩展标准为<a href="https://developer.chrome.com/docs/extensions/mv3/intro/"><code>Manifest V3</code></a></p><span id="more"></span><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h2><h3 id="1-0-本地环境准备"><a href="#1-0-本地环境准备" class="headerlink" title="1.0 本地环境准备"></a>1.0 本地环境准备</h3><p>需要自行安装<code>Nodejs</code>环境，这里不过多赘述。</p><p>包管理器可用<code>npm/yarn/pnpm</code>，本文选用<code>pnpm</code>，可以复用本地包，减少下载、安装量。</p><h3 id="1-1-创建项目文件夹"><a href="#1-1-创建项目文件夹" class="headerlink" title="1.1 创建项目文件夹"></a>1.1 创建项目文件夹</h3><p>在合适的位置创建一个文件夹，为避免不必要的错误，目录的路径需要为ASCII字符。文件夹名称为你的插件名称即可，最好使用<strong>小写英文</strong>，使用<strong>-（减号）代替空格</strong>。例如：<code>mkdir hello-world</code></p><p>进入文件夹<code>cd hello-world</code></p><p>打开终端，将工作目录切换到当前文件夹，例如：<code>cd D:\hello-world</code></p><p>确保终端中的提示符内容为当前文件夹的路径。</p><h3 id="1-2-创建文件"><a href="#1-2-创建文件" class="headerlink" title="1.2 创建文件"></a>1.2 创建文件</h3><p>在刚刚的终端中输入：<code>pnpm init</code>，并<code>enter</code>。目录下会生成一个<code>package.json</code>文件。</p><p>再手动新建一个<code>tsconfig.json</code> </p><p>接下来创建<code>README.md</code>自述文件和<code>LICENSE</code>许可文件。内容自行发挥。</p><h3 id="1-3-创建文件夹"><a href="#1-3-创建文件夹" class="headerlink" title="1.3 创建文件夹"></a>1.3 创建文件夹</h3><p>在项目文件夹的根目录下，创建一个文件夹：<code>src</code></p><p>在<code>src</code>中创建三个文件夹：<code>ts</code> | <code>html</code> | <code>assests</code>。分别表示TypeScript源文件目录、页面目录、资源文件目录。也可按照需求自行发挥。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h2><p>确保终端的当前目录是项目文件夹，输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm i -D typescript ts-loader webpack webpack-cli webpack-dev-server clean-webpack-plugin copy-webpack-plugin @types/chrome</span><br></pre></td></tr></table></figure><p>等待将所有包安装完成，将<code>package.json</code>内容中的<code>&quot;scripts&quot;</code>改为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;webpack --watch --mode development&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;webpack --mode production&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;zip&quot;</span>: <span class="string">&quot;7z a -tzip ./%npm_package_name%-%npm_package_version%.zip -r dist/*&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="3-开发chrome插件的文件配置"><a href="#3-开发chrome插件的文件配置" class="headerlink" title="3. 开发chrome插件的文件配置"></a>3. 开发chrome插件的文件配置</h2><p>编辑项目文件夹下<code>tsconfig.json</code>，填入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;ES2015&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typeRoots&quot;</span>: [<span class="string">&quot;./node_modules/@types&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;./dist/js/&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;buildOptions&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;./src/ts/*.ts&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;node_modules&quot;</span>, <span class="string">&quot;**/*.spec.ts&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目文件夹下新建<code>webpack.config.js</code>，填入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpack = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> TerserPlugin = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="comment">// 用于复制不参与编译的文件</span></span><br><span class="line"><span class="keyword">const</span> copyMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">from</span>: path.resolve(<span class="string">&quot;src/manifest.json&quot;</span>),</span><br><span class="line">    <span class="attr">to</span>: <span class="string">`<span class="subst">$&#123;path.resolve(<span class="string">&quot;dist&quot;</span>)&#125;</span>/manifest.json`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">from</span>: path.resolve(<span class="string">&quot;src/assets&quot;</span>),</span><br><span class="line">    <span class="attr">to</span>: path.resolve(<span class="string">&quot;dist/assets&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">from</span>: path.resolve(<span class="string">&quot;src/html&quot;</span>),</span><br><span class="line">    <span class="attr">to</span>: path.resolve(<span class="string">&quot;dist/&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">//webpack的所有配置信息</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,  <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    <span class="attr">minimizer</span>: [<span class="keyword">new</span> TerserPlugin(&#123; <span class="attr">extractComments</span>: <span class="literal">false</span> &#125;)],  <span class="comment">// 关闭创建代码中的注释文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//入口文件</span></span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;./src/ts/background.ts&quot;</span>,</span><br><span class="line">    <span class="attr">popup</span>: <span class="string">&quot;./src/ts/popup.ts&quot;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&quot;./src/ts/content.ts&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&quot;./dist&quot;</span>,  <span class="comment">// 开发阶段服务器的根目录</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指定打包文件所在目录</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;js/[name].js&quot;</span>,  <span class="comment">// 编译打包后的js文件名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//用来指定那些模块可以用来备注引入</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//指定webpack的打包使用的模块</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="comment">//规则生效的文件</span></span><br><span class="line">        use: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>, <span class="comment">//要使用的loader</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">//编译排除的文件</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> CleanWebpackPlugin(), <span class="keyword">new</span> CopyWebpack(&#123; <span class="attr">patterns</span>: copyMap &#125;)],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>进入<code>src</code>中新建<code>manifest.json</code>文件，这是chrome扩展的描述文件，需要按照一定的要求配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;插件名称&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;插件描述&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;homepage_url&quot;</span>: <span class="string">&quot;插件主页&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;manifest_version&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;icons&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;16&quot;</span>: <span class="string">&quot;assets/logo_16.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;48&quot;</span>: <span class="string">&quot;assets/logo_48.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;64&quot;</span>: <span class="string">&quot;assets/logo_64.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;128&quot;</span>: <span class="string">&quot;assets/logo_128.png&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;background&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;service_worker&quot;</span>: <span class="string">&quot;js/background.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;action&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;default_icon&quot;</span>: <span class="string">&quot;assets/logo_128.png&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;default_popup&quot;</span>: <span class="string">&quot;popup.html&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;content_scripts&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;matches&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;http://*/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://*/*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;js&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;js/content.js&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;run_at&quot;</span>: <span class="string">&quot;document_end&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;web_accessible_resources&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;resources&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/assets/*&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;matches&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;http://*/*&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://*/*&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;permissions&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;notifications&quot;</span>,</span><br><span class="line">        <span class="string">&quot;contextMenus&quot;</span>,</span><br><span class="line">        <span class="string">&quot;webRequest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;storage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;tabs&quot;</span>,</span><br><span class="line">        <span class="string">&quot;activeTab&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在<code>src/ts</code>中新建三个文件：<code>background.ts</code> | <code>content.ts</code> | <code>popup.ts</code>。分别用于chrome扩展的后台服务任务、注入页面脚本、弹出菜单脚本</p><p>几乎所有chrome扩展都需要popup页面，在<code>src/html</code>中新建<code>popup.html</code></p><p>准备chrome扩展的图标，为正方形，边长分别为：16,28,64,128，需要命名为<code>logo_128.png</code>，并保存的<code>src/assets中</code>。</p><h2 id="4-运行命令"><a href="#4-运行命令" class="headerlink" title="4. 运行命令"></a>4. 运行命令</h2><ul><li><code>pnpm run dev</code>: webpack监听文件更改，并实时编译</li><li><code>pnpm run build</code>: 以生产模式编译打包所有文件</li><li><code>pnpm run zip</code>: （仅适用于Windows环境且安装了7-zip）打包扩展并压缩为zip</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用TypeScript创建一个chrome扩展程序&quot;&gt;&lt;a href=&quot;#使用TypeScript创建一个chrome扩展程序&quot; class=&quot;headerlink&quot; title=&quot;使用TypeScript创建一个chrome扩展程序&quot;&gt;&lt;/a&gt;使用TypeScript创建一个chrome扩展程序&lt;/h1&gt;&lt;h2 id=&quot;0-前言&quot;&gt;&lt;a href=&quot;#0-前言&quot; class=&quot;headerlink&quot; title=&quot;0. 前言&quot;&gt;&lt;/a&gt;0. 前言&lt;/h2&gt;&lt;p&gt;Google Chrome浏览器扩展同时可用于Microsoft Edge浏览器等支持chromium内核与Chrome扩展标准的浏览器，为了叙述方便统一称为chrome扩展。&lt;/p&gt;
&lt;p&gt;本文目标是建立一个基于&lt;code&gt;TypeScript + Webpack&lt;/code&gt;的文件模板，并不涉及到网页框架技术。&lt;/p&gt;
&lt;p&gt;需要掌握一定的&lt;code&gt;JavaScript/TypeScript&lt;/code&gt;与&lt;code&gt;Nodejs&lt;/code&gt;配置知识。&lt;/p&gt;
&lt;p&gt;目前的扩展标准为&lt;a href=&quot;https://developer.chrome.com/docs/extensions/mv3/intro/&quot;&gt;&lt;code&gt;Manifest V3&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://ryzenx.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器扩展 - TypeScript" scheme="https://ryzenx.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95-typescript/"/>
    
  </entry>
  
  <entry>
    <title>Vim 常用按键</title>
    <link href="https://ryzenx.com/2022/09/vim-basic/"/>
    <id>https://ryzenx.com/2022/09/vim-basic/</id>
    <published>2022-09-26T12:53:12.000Z</published>
    <updated>2022-09-26T13:45:21.357Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim-常用按键备忘"><a href="#Vim-常用按键备忘" class="headerlink" title="Vim 常用按键备忘"></a>Vim 常用按键备忘</h1><blockquote><p>Get a fully random sequence:</p><p>​    Make a novice exit <em>Vim</em></p><p>参考： <a href="https://b23.tv/BV13t4y1t7Wg">https://b23.tv/BV13t4y1t7Wg</a></p></blockquote><span id="more"></span><h2 id="Vim-三种模式"><a href="#Vim-三种模式" class="headerlink" title="Vim 三种模式"></a>Vim 三种模式</h2><ul><li>NORMAL</li><li>INSERT</li><li>COMMAND</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line"> A[INSERT]</span><br><span class="line"> B[NORMAL]</span><br><span class="line"> C[CMD]</span><br><span class="line"> B --I--&gt; A</span><br><span class="line"> B --:--&gt; C</span><br><span class="line"> A --esc--&gt; B</span><br><span class="line"> C --esc--&gt; B</span><br></pre></td></tr></table></figure><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p><strong>NORMAL</strong> MODE</p><table><thead><tr><th align="center">下</th><th align="center">上</th><th align="center">左</th><th align="center">右</th></tr></thead><tbody><tr><td align="center"><code>j</code></td><td align="center"><code>k</code></td><td align="center"><code>h</code></td><td align="center"><code>l</code></td></tr><tr><td align="center">可视下</td><td align="center">可视上</td><td align="center">行首</td><td align="center">行尾</td></tr><tr><td align="center"><code>gj</code></td><td align="center"><code>gk</code></td><td align="center"><code>0</code></td><td align="center"><code>$</code></td></tr></tbody></table><table><thead><tr><th>下一个单词开头</th><th>上一个单词开头</th><th>下一个单词结尾</th><th>上一个单词结尾</th></tr></thead><tbody><tr><td><code>w</code></td><td><code>b</code></td><td><code>e</code></td><td><code>ge</code></td></tr></tbody></table><table><thead><tr><th align="center">插入</th><th align="center">追加</th></tr></thead><tbody><tr><td align="center"><code>i</code> - insert</td><td align="center"><code>a</code> - append</td></tr></tbody></table><table><thead><tr><th align="center">新增下一行</th><th align="center">新增上一行</th></tr></thead><tbody><tr><td align="center"><code>o</code> - open a new line</td><td align="center"><code>O</code> - Open</td></tr></tbody></table><table><thead><tr><th align="center">移动到最后一行</th><th align="center">移动到第一行</th></tr></thead><tbody><tr><td align="center"><code>G</code> - Ground</td><td align="center"><code>gg</code></td></tr></tbody></table><table><thead><tr><th align="center">按行跳跃</th><th align="center">相对行跳跃</th></tr></thead><tbody><tr><td align="center"><code>nj</code>  <code>nk</code>  <code>nG</code> <code>:n</code></td><td align="center"><code>set relativenumber</code></td></tr></tbody></table><h2 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h2><table><thead><tr><th align="center">复制一行</th><th align="center">粘贴</th><th align="center">删除一行</th></tr></thead><tbody><tr><td align="center"><code>yy</code></td><td align="center"><code>np</code> - n for times</td><td align="center"><code>dd</code></td></tr></tbody></table><table><thead><tr><th align="center">重复上一次操作</th><th align="center">撤回</th><th align="center">重做</th></tr></thead><tbody><tr><td align="center"><code>.</code></td><td align="center"><code>u</code> - undo</td><td align="center"><code>Ctrl - r</code></td></tr></tbody></table><table><thead><tr><th align="center">删除单词</th><th align="center">替换单词</th></tr></thead><tbody><tr><td align="center"><code>dw</code> - delete a word</td><td align="center"><code>cw</code> - change a word</td></tr></tbody></table><table><thead><tr><th align="center">复制单词</th><th align="center">删除括号内容</th></tr></thead><tbody><tr><td align="center"><code>yw</code></td><td align="center"><code>ci&#123;([</code> - change in ..</td></tr></tbody></table><table><thead><tr><th align="center">可视化块选择</th><th align="center">可视化行选择</th></tr></thead><tbody><tr><td align="center"><code>Ctrl - v</code></td><td align="center"><code>V</code>  (<code>Shift - V</code>)</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      Vim 常用按键
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="笔记" scheme="https://ryzenx.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Vim" scheme="https://ryzenx.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>前端基础问题 2209</title>
    <link href="https://ryzenx.com/2022/09/Front-end-questions-2209/"/>
    <id>https://ryzenx.com/2022/09/Front-end-questions-2209/</id>
    <published>2022-09-18T02:05:10.000Z</published>
    <updated>2022-09-26T13:59:32.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端基础问题-2209"><a href="#前端基础问题-2209" class="headerlink" title="前端基础问题 2209"></a>前端基础问题 2209</h1><p>一些网上收集到的前端开发面试题总结…</p><span id="more"></span><h2 id="1-HTML5-的新特性"><a href="#1-HTML5-的新特性" class="headerlink" title="1. HTML5 的新特性"></a>1. HTML5 的新特性</h2><ul><li>新增选择器 document.querySelector、document.querySelectorAll</li><li>拖拽释放(Drag and drop) API</li><li>媒体播放的 video 和 audio</li><li>本地存储 localStorage 和 sessionStorage</li><li>离线应用 manifest</li><li>桌面通知 Notifications</li><li>语意化标签 article、footer、header、nav、section</li><li>增强表单控件 calendar、date、time、email、url、search</li><li>地理位置 Geolocation</li><li>多任务 webworker</li><li>全双工通信协议 websocket</li><li>历史管理 history</li><li>跨域资源共享(CORS) Access-Control-Allow-Origin</li><li>页面可见性改变事件 visibilitychange</li><li>跨窗口通信 PostMessage</li><li>Form Data 对象</li><li>绘画 canvas</li></ul><p>H5移除的元素：</p><ul><li>纯表现的元素：basefont、big、center、font、s、strike、tt、u</li><li>对可用性产生负面影响的元素：frame、frameset、noframes</li></ul><h2 id="2-什么是伪类和伪元素"><a href="#2-什么是伪类和伪元素" class="headerlink" title="2. 什么是伪类和伪元素"></a>2. 什么是伪类和伪元素</h2><ul><li><p>伪类：用于已有元素处于某种状态时为其添加对应的样式，这个状态是根据用户行为而动态变化的。</p><p>例如：当用户悬停在指定元素时，可以通过<code>:hover</code>来描述这个元素的状态，虽然它和一般 css 相似，可以为已有元素添加样式，但是它只有处于DOM树无法描述的状态下才能为元素添加样式，所以称为伪类。</p><p>标准伪类：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:active"><code>:active</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:any-link"><code>:any-link</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:blank"><code>:blank</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:checked"><code>:checked</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebVTT_API"><code>:current</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:default"><code>:default</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:defined"><code>:defined</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:dir"><code>:dir()</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:disabled"><code>:disabled</code></a></li><li><code>:drop</code> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:empty"><code>:empty</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:enabled"><code>:enabled</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first"><code>:first</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-child"><code>:first-child</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:first-of-type"><code>:first-of-type</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:fullscreen"><code>:fullscreen</code></a> 实验性</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:future"><code>:future</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus"><code>:focus</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-visible"><code>:focus-visible</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:focus-within"><code>:focus-within</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:has"><code>:has()</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host"><code>:host</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host_function"><code>:host()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:host-context"><code>:host-context()</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:indeterminate"><code>:indeterminate</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:in-range"><code>:in-range</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:invalid"><code>:invalid</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:is"><code>:is()</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:lang"><code>:lang()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-child"><code>:last-child</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:last-of-type"><code>:last-of-type</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:left"><code>:left</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:link"><code>:link</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:local-link"><code>:local-link</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:not"><code>:not()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-child"><code>:nth-child()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-col"><code>:nth-col()</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-child"><code>:nth-last-child()</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-last-col"><code>:nth-last-col()</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-last-of-type"><code>:nth-last-of-type()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:nth-of-type"><code>:nth-of-type()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-child"><code>:only-child</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:only-of-type"><code>:only-of-type</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:optional"><code>:optional</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:out-of-range"><code>:out-of-range</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:past"><code>:past</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:placeholder-shown"><code>:placeholder-shown</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-only"><code>:read-only</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:read-write"><code>:read-write</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:required"><code>:required</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:right"><code>:right</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root"><code>:root</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:scope"><code>:scope</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:target"><code>:target</code></a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:target-within"><code>:target-within</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:user-invalid"><code>:user-invalid</code> (en-US)</a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:valid"><code>:valid</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited"><code>:visited</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:where"><code>:where()</code></a> 实验性</li></ul></li><li><p>伪元素：用于创建一些不在DOM树中的元素，一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。</p><p>例如，我们可以通过<code>::before</code>来在一个元素之前添加一些文本，并为这些文本添加样式，虽然用户可以看见 这些文本，但是它实际上并不在DOM文档中。</p><p>标准伪元素：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after"><code>::after (:after)</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::backdrop"><code>::backdrop</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::before"><code>::before (:before)</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::cue"><code>::cue (:cue)</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-letter"><code>::first-letter (:first-letter)</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line"><code>::first-line (:first-line)</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::grammar-error"><code>::grammar-error</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::marker"><code>::marker</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::placeholder"><code>::placeholder</code></a> 实验性</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::selection"><code>::selection</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::slotted"><code>::slotted()</code></a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::spelling-error"><code>::spelling-error</code></a> 实验性</li></ul></li></ul><h2 id="3-语义化标签"><a href="#3-语义化标签" class="headerlink" title="3. 语义化标签"></a>3. 语义化标签</h2><p>语义元素对浏览器和开发者都清楚地描述了其含义。</p><p>非语义元素的例子。<code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>–对其内容一无所知。</p><p>语义元素的例子。<code>&lt;form&gt;</code>, <code>&lt;table&gt;</code>, and <code>&lt;article&gt;</code> - 清楚地定义了其内容。</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>      <span class="comment">&lt;!--：页面主体内容。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hn</span>&gt;</span>         <span class="comment">&lt;!--：h1~h6，分级标题，&lt;h1&gt; 与 &lt;title&gt; 协调有利于搜索引擎优化。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>         <span class="comment">&lt;!--：无序列表。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>         <span class="comment">&lt;!--：有序列表。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>     <span class="comment">&lt;!--：页眉通常包括网站标志、主导航、全站链接以及搜索框。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>        <span class="comment">&lt;!--：标记导航，仅对文档中重要的链接群使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span>       <span class="comment">&lt;!--：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>    <span class="comment">&lt;!--：定义外部的内容，其中的内容独立于文档的其余部分。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>    <span class="comment">&lt;!--：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>      <span class="comment">&lt;!--：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>     <span class="comment">&lt;!--：页脚，只有当父级是body时，才是整个页面的页脚。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>      <span class="comment">&lt;!--：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>     <span class="comment">&lt;!--：和 em 标签一样，用于强调文本，但它强调的程度更强一些。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>         <span class="comment">&lt;!--：将其中的文本表示为强调的内容，表现为斜体。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>       <span class="comment">&lt;!--：使用黄色突出显示部分文本。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span>     <span class="comment">&lt;!--：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figcaption</span>&gt;</span> <span class="comment">&lt;!--：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>       <span class="comment">&lt;!--：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquoto</span>&gt;</span> <span class="comment">&lt;!--：定义块引用，块引用拥有它们自己的空间。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>          <span class="comment">&lt;!--：短的引述（跨浏览器问题，尽量避免使用）。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>       <span class="comment">&lt;!--：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>       <span class="comment">&lt;!--：简称或缩写。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dfn</span>&gt;</span>        <span class="comment">&lt;!--：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>    <span class="comment">&lt;!--：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>        <span class="comment">&lt;!--：移除的内容。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>        <span class="comment">&lt;!--：添加的内容。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>       <span class="comment">&lt;!--：标记代码。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meter</span>&gt;</span>      <span class="comment">&lt;!--：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span>&gt;</span>   <span class="comment">&lt;!--：定义运行中的进度（进程）。--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="语义化优点"><a href="#语义化优点" class="headerlink" title="语义化优点"></a>语义化优点</h3><ul><li>易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li><li>方便屏幕阅读器解析，如盲人阅读器根据语义渲染网页</li><li>有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。</li></ul><h2 id="4-HTML5-媒体"><a href="#4-HTML5-媒体" class="headerlink" title="4. HTML5 媒体"></a>4. HTML5 媒体</h2><h3 id="lt-audio-gt"><a href="#lt-audio-gt" class="headerlink" title="&lt;audio&gt;"></a><code>&lt;audio&gt;</code></h3><p>*<em>HTML <code>&lt;audio&gt;</code> *</em>元素用于在文档中嵌入音频内容。 <code>&lt;audio&gt;</code> 元素可以包含一个或多个音频资源， 这些音频资源可以使用 <code>src</code> 属性或者<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/source"><code>source</code></a>元素来进行描述：浏览器将会选择最合适的一个来使用。也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaStream"><code>MediaStream</code></a> 将这个元素用于流式媒体。</p><p><code>&lt;audio&gt;</code>的属性：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-autoplay"><strong><code>autoplay</code></strong></a> 布尔值属性；声明该属性，音频会尽快自动播放，不会等待整个音频文件下载完成。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-controls"><strong><code>controls</code></strong></a> 如果声明了该属性，浏览器将提供一个包含声音，播放进度，播放暂停的控制面板，让用户可以控制音频的播放。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-crossorigin"><strong><code>crossorigin</code></strong></a> 枚举属性 展示音频资源是否可以通过 CORS 加载。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_enabled_image">支持 CORS 的资源</a>可以被 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas"><code>canvas</code></a> 元素复用而不污染。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-currenttime"><strong><code>currentTime</code></strong></a> 读取 <code>currentTime</code> 属性将返回一个双精度浮点值，用以标明以秒为单位的当前音频的播放位置。如果音频的元数据暂时无法访问——这意味着你无法的知道媒体的开始或持续时间。</p><p>这时，<code>currentTime</code> 相对应的，能够被用于改变重播的时间。否则，设置 <code>currentTime</code> 将设置当前的播放位置，并且会自动搜寻到媒体的那个位置，如果媒体目前已经被加载的话。如果音频是以流的形式加载的，并且数据超出了媒体的缓冲区（buffer），<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/User_agent">user agent</a> 可能无法获取资源的某些部分。另一些音频的时间轴可能并非从 0 秒开始，所以设置 <code>currentTime</code> 到一个开始时间之前的时间可能会失败。举个例子，如果音频媒体的时间轴从 12 小时开始，把 <code>currentTime</code> 设置到 3600 将会尝试把当前播放位置设置到媒体的开始位置之前，从而导致错误。<code>getStartDate()</code> 方法能够用于确定媒体时间轴的开始位置。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-disableremoteplayback"><strong><code>disableRemotePlayback</code></strong></a> 实验性。这是一个布尔值，用来禁用在远程设备上进行进度控制的能力</p><p>这些设备通过有线（比如 HDMI, DVI）或无线技术（比如 Miracast, Chromecast, DLNA, AirPlay,）来与 web 连接。请参考 <a href="https://www.w3.org/TR/remote-playback/#the-disableremoteplayback-attribute">this proposed specification</a> 来获取更多信息。</p><p><strong>备注：</strong> 在 Safari 中，你能使用 <a href="https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AirPlayGuide/OptingInorOutofAirPlay/OptingInorOutofAirPlay.html"><code>x-webkit-airplay=&quot;deny&quot;</code></a> 作为兜底方案。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-duration"><strong><code>duration</code></strong></a> 只读这是一个双精度浮点数，指明了音频在时间轴中的持续时间（总长度），以秒为单位。</p><p>如果元素上没有媒体，或者媒体是不可用的，那么会返回 <code>NaN</code>。如果媒体找不到确切的结尾（比如不确定长度的直播流，网络电台，或者是通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API">WebRTC</a> 连接的流），那么这个值将返回 <code>+Infinity</code>。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-loop"><strong><code>loop</code></strong></a> 布尔属性；如果声明该属性，将循环播放音频。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-muted"><strong><code>muted</code></strong></a> 表示是否静音的布尔值。默认值为 <code>false</code>，表示有声音。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-preload"><strong><code>preload</code></strong></a> 枚举属性，让开发者自行思考来示意浏览器使用何种加载方式以达到最好的用户体验。可以是以下属性之一：</p><ul><li><p><code>none</code>: 示意用户可能不会播放该音频，或者服务器希望节省带宽；换句话说，该音频不会被缓存；</p></li><li><p><code>metadata</code>: 示意即使用户可能不会播放该音频，但获取元数据 (例如音频长度) 还是有必要的。</p></li><li><p><code>auto</code>: 示意用户可能会播放音频；换句话说，如果有必要，整个音频都将被加载，即使用户不期望使用。</p></li><li><p><em>空字符串</em> : 等效于<code>auto</code>属性。不同浏览器会有自己的默认值，规范建议的默认值为 <code>metadata</code>。</p></li></ul><p><strong>备注：</strong> <code>autoplay</code> 属性的优先级高于 <code>preload</code>。如果 <code>autoplay</code> 被指定，浏览器将显式地开始下载媒体以供播放。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio#attr-src"><strong><code>src</code></strong></a> 嵌入的音频的 URL。</p><p>该 URL 应遵从 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">HTTP access controls (en-US)</a>. 这是一个可选属性；你可以在 audio 元素中使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/source"><code>source</code></a> 元素来替代该属性指定嵌入的音频。</p></li></ul><p>常用<code>&lt;audio&gt;</code>的事件：</p><ul><li><code>loadstart</code>客户端开始请求数据</li><li><code>progress</code>客户端正在请求数据（或者说正在缓冲）</li><li><code>play</code>play()和autoplay播放时</li><li><code>pause</code>pause()方法促发时</li><li><code>ended</code>当前播放结束</li><li><code>timeupdate</code>当前播放时间发生改变的时候。播放中常用的时间处理哦</li><li><code>canplaythrough</code>歌曲已经载入完全完成</li><li><code>canplay</code>缓冲至目前可播放状态。</li></ul><h3 id="lt-video-gt"><a href="#lt-video-gt" class="headerlink" title="&lt;video&gt;"></a><code>&lt;video&gt;</code></h3><p><strong>HTML <code>&lt;video&gt;</code> 元素</strong> 用于在 HTML 或者 XHTML 文档中嵌入媒体播放器，用于支持文档内的视频播放。你也可以将 <code>&lt;video&gt;</code> 标签用于音频内容，但是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio"><code>audio</code></a> 元素可能在用户体验上更合适。</p><p><code>&lt;video&gt;</code>的属性：</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-autoplay"><strong><code>autoplay</code></strong></a> 布尔属性；声明该属性后，视频会尽快自动开始播放，不会停下来等待数据全部加载完成。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-autopictureinpicture"><strong><code>autopictureinpicture</code></strong></a> 实验性。一个布尔属性，如果为 true，那么当用户在当前页面和另一个页面或应用程序之间来回切换时，会自动切换画中画（picture-in-picture）模式。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-controls"><strong><code>controls</code></strong></a> 加上这个属性，浏览器会在视频底部提供一个控制面板，允许用户控制视频的播放，包括音量，跨帧，暂停/恢复播放。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-controlslist"><strong><code>controlslist</code></strong></a> 实验性。当浏览器显示视频底部的播放控制面板（例如，指定了 <code>controls</code> 属性）时，<a href="https://wicg.github.io/controls-list/html-output/multipage/embedded-content.html#attr-media-controlslist"><code>controlslist</code></a> 属性会帮助浏览器选择在控制面板上显示哪些控件。允许接受的值有 <code>nodownload</code>, <code>nofullscreen</code> 和 <code>noremoteplayback</code>。如果要禁用画中画模式（和控件），请使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-disablepictureinpicture">disablePictureInPicture</a> 属性。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-crossorigin"><strong><code>crossorigin</code></strong></a> 该枚举属性指明是否使用 CORS（跨域资源共享）来获取相关视频。<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/CORS_enabled_image">允许 CORS 的资源</a> 可在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas"><code>canvas</code></a> 元素中被重用，而不会被<em>污染</em>。允许的值如下：</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-disablepictureinpicture"><strong><code>disablepictureinpicture</code></strong></a> 实验性。防止浏览器显示画中画上下文菜单或在某些情况下自动请求画中画模式。该属性可以禁用 <code>video</code> 元素的画中画特性，右键菜单中的“画中画”选项会被禁用</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-disableremoteplayback"><strong><code>disableRemotePlayback</code></strong></a> 实验性。布尔属性，用于在使用有线（HDMI、DVI 等）和无线技术（Miracast、Chromecast、DLNA、AirPlay 等）连接设备时，禁用远程播放功能。在 Safari 中，您可以使用 <a href="https://developer.apple.com/library/archive/documentation/AudioVideo/Conceptual/AirPlayGuide/OptingInorOutofAirPlay/OptingInorOutofAirPlay.html"><code>x-webkit-airplay=&quot;deny&quot;</code></a> 作为兜底方案。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-height"><strong><code>height</code></strong></a> 视频显示区域的高度，单位是 <a href="https://drafts.csswg.org/css-values/#px">CSS 像素</a>（仅限绝对值；<a href="https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes">不支持百分比</a>）。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-loop"><strong><code>loop</code></strong></a> 布尔属性；指定后，会在视频播放结束的时候，自动返回视频开始的地方，继续播放。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-muted"><strong><code>muted</code></strong></a> 布尔属性，指明在视频中音频的默认设置。设置后，音频会初始化为静音。默认值是 false, 意味着视频播放的时候音频也会播放。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-playsinline"><strong><code>playsinline</code></strong></a> 布尔属性，指明视频将内联（inline）播放，即在元素的播放区域内。请注意，没有此属性并不意味着视频始终是全屏播放的。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-poster"><strong><code>poster</code></strong></a> 海报帧图片 URL，用于在视频处于下载中的状态时显示。如果未指定该属性，则在视频第一帧可用之前不会显示任何内容，然后将视频的第一帧会作为海报（poster）帧来显示。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-preload"><strong><code>preload</code></strong></a> 该枚举属性旨在提示浏览器，作者认为在播放视频之前，加载哪些内容会达到最佳的用户体验。可能是下列值之一：</p><ul><li><p><code>none</code>: 表示不应该预加载视频。</p></li><li><p><code>metadata</code>: 表示仅预先获取视频的元数据（例如长度）。</p></li><li><p><code>auto</code>: 表示可以下载整个视频文件，即使用户不希望使用它。</p></li><li><p><em>空字符串</em>: 和值为 <code>auto</code> 一致。每个浏览器的默认值都不相同，即使规范建议设置为 <code>metadata</code>。</p></li></ul><p><strong>备注：</strong> <code>autoplay</code> 属性的优先级比 <code>preload</code> 高。如果制定了 <code>autopaly</code>属性，浏览器显然需要开始下载视频以便回放。规范没有强制浏览器去遵循该属性的值，这仅仅只是个提示。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-src"><strong><code>src</code></strong></a> 要嵌到页面的视频的 URL。可选；你也可以使用 video 块内的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/source">``</a> 元素来指定需要嵌到页面的视频。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video#attr-width"><strong><code>width</code></strong></a> 视频显示区域的宽度，单位是 <a href="https://drafts.csswg.org/css-values/#px">CSS 像素</a>（仅限绝对值；<a href="https://html.spec.whatwg.org/multipage/embedded-content.html#dimension-attributes">不支持百分比</a>）。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端基础问题-2209&quot;&gt;&lt;a href=&quot;#前端基础问题-2209&quot; class=&quot;headerlink&quot; title=&quot;前端基础问题 2209&quot;&gt;&lt;/a&gt;前端基础问题 2209&lt;/h1&gt;&lt;p&gt;一些网上收集到的前端开发面试题总结…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="笔记" scheme="https://ryzenx.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="https://ryzenx.com/tags/web/"/>
    
      <category term="HTML" scheme="https://ryzenx.com/tags/html/"/>
    
      <category term="JavaScript" scheme="https://ryzenx.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Android 基础问题 2204</title>
    <link href="https://ryzenx.com/2022/04/Android-questions-2204/"/>
    <id>https://ryzenx.com/2022/04/Android-questions-2204/</id>
    <published>2022-04-15T11:17:36.000Z</published>
    <updated>2022-09-18T02:04:42.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-基础问题2022-04"><a href="#Android-基础问题2022-04" class="headerlink" title="Android 基础问题2022-04"></a>Android 基础问题2022-04</h1><p><strong>从网上收集的一些基础面试问题</strong></p><span id="more"></span><h2 id="1-Android启动模式"><a href="#1-Android启动模式" class="headerlink" title="1. Android启动模式"></a>1. Android启动模式</h2><blockquote><p>参考：<a href="https://blog.csdn.net/ElisonX/article/details/80397519">https://blog.csdn.net/ElisonX/article/details/80397519</a></p></blockquote><p>在一个项目中会包括着多个Activity，系统中使用任务栈来存储创建的Activity实例，任务栈是一种“后进先出”的栈结构。</p><h3 id="启动模式种类"><a href="#启动模式种类" class="headerlink" title="启动模式种类"></a>启动模式种类</h3><p>在“标准模式”下若我们多次启动同一个Activity。系统会创建多个实例依次放入任务栈中。当按back键返回时，每按一次，一个Activity出栈，直到栈空为止。并不利于减少内存压力。</p><p>Android共有四种启动模式：<code>Standard</code>, <code>SingleTop</code>, <code>SingleTask</code>, <code>SingleInstance</code></p><ol><li><p><code>Standard</code></p><p>启动Activity的默认启动模式。这种情况下，新建的Activity将会创建一个新的实例加入栈顶。</p><p>生命周期钩子<code>onCreate</code>、<code>onStart</code>、<code>onResume</code>都会被调用。</p></li><li><p><code>SingleTop</code></p><p>栈顶复用启动模式，当栈顶的Activity再次创建时，会直接复用栈顶的实例，不会创建新的实例。如果创建的Activity不在栈顶，将会如同<code>Standard</code>模式一样创建新的实例。</p><p>若栈顶Activity被复用，生命周期钩子<code>onCreate</code>、<code>onStart</code>不会被系统调用，由于它并没有发生改变，可是一个新的方法 <code>onNewIntent</code>会被回调。</p></li><li><p><code>SingleTask</code></p><p>栈内复用启动模式，如果栈内已有的Activity被再次创建时，将销毁该Activity栈之上的所有实例，使该Activity实例成为栈顶。</p><p>仅仅会又一次回调Activity中的 <code>onNewIntent</code>方法</p></li><li><p><code>SingleInstance</code></p><p>单实例启动模式，类似于<code>SingleTask</code>，但是该Activity只能处于单独的一个栈中。即，不会通过back返回上一个栈中的Activity。</p></li></ol><h3 id="启动模式的使用方式"><a href="#启动模式的使用方式" class="headerlink" title="启动模式的使用方式"></a>启动模式的使用方式</h3><ol><li><p>在<code>manifest.xml</code>清单文件中指令Activity的启动方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.activity.MultiportActivity&quot;</span> <span class="attr">android:launchMode</span>=<span class="string">&quot;singleTask&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动Activity的Intent中指定启动方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass(context, MainActivity.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure></li></ol><p>区别：</p><p>优先级：Intent指定方式即另外一种比清单指定优先级要高，若两者同一时候存在，以另外一种方式为准。</p><p>限定范围：清单指定方式无法为Activity直接指定 FLAG_ACTIVITY_CLEAR_TOP 标识，Intent方式无法为Activity指定 singleInstance 模式。</p><h3 id="Intent启动时的flags"><a href="#Intent启动时的flags" class="headerlink" title="Intent启动时的flags"></a>Intent启动时的<code>flags</code></h3><ol><li><code>FLAG_ACTIVITY_NEW_TASK</code>指定为<code>SingleTask</code>模式</li><li><code>FLAG_ACTIVITY_SINGLE_TOP</code>指定为<code>SingleTop</code>模式</li><li><code>FLAG_ACTIVITY_CLEAN_TOP</code>启动时会将与该Activity在同一任务栈的其他Activity出栈</li><li><code>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</code>启动此Activity后不会出历史Activity的列表中，即用户无法通过返回进入该Activity</li></ol><h2 id="2-Handler机制"><a href="#2-Handler机制" class="headerlink" title="2. Handler机制"></a>2. Handler机制</h2><blockquote><p>参考：</p><p><a href="https://cdmana.com/2022/03/202203230559249472.html">https://cdmana.com/2022/03/202203230559249472.html</a></p><p><a href="https://www.jianshu.com/p/592fb6bb69fa">https://www.jianshu.com/p/592fb6bb69fa</a></p></blockquote><p>Handler机制主要是用作线程间通信，尤其是主线程和子线程之间的通信。</p><h3 id="Handler-涉及的对象"><a href="#Handler-涉及的对象" class="headerlink" title="Handler 涉及的对象"></a>Handler 涉及的对象</h3><p>Handler机制里面涉及到四个对象：<code>Handler</code>，<code>Message</code>、<code>MessageQueue</code>、<code>Looper</code></p><ol><li><code>Message</code>:信息的携带者，持有了Handler，存在<code>MessageQueue</code>中，一个线程可以有多个</li><li><code>Hanlder</code>:消息的发起者，发送Message以及消息处理的回调实现，一个线程可以有多个Handler对象</li><li><code>Looper</code>:消息的遍历者，从<code>MessageQueue</code>中循环取出Message进行处理，一个线程最多只有一个</li><li><code>MessageQueue</code>:消息队列，存放了Handler发送的消息，供<code>Looper</code>循环取消息，一个线程最多只有一个</li></ol><ul><li><p>Handler</p><p>消息的处理者，负责将Message添加到消息队列以及对消息队列中的Message进行处理。</p><ul><li><strong>主线程</strong>创建一个<code>Handler</code>对象，重写<code>handleMessage()</code>方法</li></ul></li><li><p>在子线程中创建一个<code>Message</code>对象，保存要传递的消息。通过<code>Handler</code>的<code>sendMessage()</code>方法发出消息</p><ol><li><code>Handler.sendMessage</code>: 把消息加入到主线程的<code>MessageQueue</code>中，主线程中的<code>Looper</code>从<code>MessageQueue</code>中取出消息，调用<code>Message.target.handleMessage</code>方法</li><li><code>Handler.post</code>: 基于<code>Handler.sendMessage</code>，把消息加入到主线程的<code>MessageQueue</code>中，主线程中的<code>Looper</code>从<code>MessageQueue</code>中取出消息，<strong>调用<code>Message.callback.run</code>方法</strong></li></ol></li><li><p>这条message被添加到<code>MessageQueue</code>中等待处理。<code>MessageQueue</code>： 消息队列，用来存放通过Handler发布的消息，按照先进先出执行。</p></li><li><p><code>Looper</code>(消息队列管家)：Looper发现有新消息到来时，就会处理这个消息。会调用<code>Looper.loop()</code>方法来</p><ul><li>一个线程最多只有一个<code>Looper</code>对象。当没有Looper对象时，去创建一个Looper</li><li><strong>在Looper的构造方法里面，会创建消息队列<code>MessageQueue</code>，</strong>并让它供Looper持有，因为一个线程最多只有一个<code>Looper</code>对象，所以一个线程最多也只有一个消息队列。然后再把当前线程赋值给<code>mThread</code>。</li></ul><p><strong>创建Handler还是需要调用<code>Looper.prepare</code>的，我们平常在主线程不需要手动调用，是因为系统在启动App时，就帮我们调用了。并且还需要调用<code>Looper.loop</code>方法</strong>。</p></li></ul><h3 id="使用Handler通信之前需要有以下三步"><a href="#使用Handler通信之前需要有以下三步" class="headerlink" title="使用Handler通信之前需要有以下三步"></a>使用Handler通信之前需要有以下三步</h3><ol><li><p>调用<code>Looper.prepare()</code></p><ul><li>所以<code>Looper.prepare()</code>的作用主要有以下三点<ol><li><strong>创建<code>Looper</code>对象 &amp; 存放在ThreadLocal变量中</strong></li><li>创建<code>MessageQueue</code>对象，并让<code>Looper</code>对象持有（在Looper的构造方法里面，会创建消息队列<code>MessageQueue</code>，并让它供Looper持有）</li><li>让<code>Looper</code>对象持有当前线程</li></ol></li></ul></li><li><p>创建<code>Handler</code>对象</p><ul><li>在Handler的构造方法里面：得到当前线程调用<code>sThreadLocal.set</code>保存的<code>Looper</code>对象，让<code>Handler</code>持有它。接下来就会判断得到的<code>Looper</code>对象是否为空，如果为空，就会抛出异常（<strong>得到当前线程的Looper对象，并判断是否为空</strong>）</li><li>让创建的<code>Handler</code>对象持有<code>Looper</code>、<code>MessageQueue</code>、<code>Callback</code>的引用</li><li>当创建<code>Handler</code>对象时，则通过 构造方法 自动关联当前线程的<code>Looper</code>对象 &amp; 对应的消息队列对象<code>（MessageQueue）</code>，从而 <strong>自动绑定了</strong> 实现创建<code>Handler</code>对象操作的<strong>线程</strong></li></ul></li><li><p>调用<code>Looper.loop()</code></p><ul><li><strong>从当前线程的<code>MessageQueue</code>从不断取出Message，并调用其相关的回调方法。</strong></li></ul><ol><li>判断了当前线程是否有<code>Looper</code>，然后得到当前线程的<code>MessageQueue</code></li><li>(<strong>死循环</strong>)不断调用<code>MessageQueue</code>的<code>next</code>方法取出<code>MessageQueue</code>中的Message，注意，当<code>MessageQueue</code>中没有消息时，<code>next</code>方法会阻塞，导致当前线程挂起</li><li>拿到<code>Message</code>以后，会调用它的target的<code>dispatchMessage</code>方法，这个target其实就是发送消息时用到的<code>Handler</code>。并调用其相关的回调方法（<strong>拿到Message之后，调用相关的回调方法</strong>）</li></ol></li></ol><h3 id="如何区分handler发送的信息"><a href="#如何区分handler发送的信息" class="headerlink" title="如何区分handler发送的信息"></a>如何区分<code>handler</code>发送的信息</h3><p>可以通过<code>msg.target</code>获取发送<code>msg</code>的<code>Handler</code>的信息。</p><p>也可以通过<code>Message.obtain()</code>重载。</p><h2 id="3-Android生命周期"><a href="#3-Android生命周期" class="headerlink" title="3. Android生命周期"></a>3. Android生命周期</h2><blockquote><p>参考：<a href="https://developer.android.google.cn/guide">https://developer.android.google.cn/guide</a></p></blockquote><h3 id="Activity生命周期"><a href="#Activity生命周期" class="headerlink" title="Activity生命周期"></a>Activity生命周期</h3><p><code>onCreate()</code>、<code>onStart()</code>、<code>onResume()</code>、<code>onPause()</code>、<code>onStop()</code> 和 <code>onDestroy()</code></p><p><img src="https://developer.android.google.cn/guide/components/images/activity_lifecycle.png?hl=zh-cn" alt="lifecircle"></p><h3 id="Service生命周期"><a href="#Service生命周期" class="headerlink" title="Service生命周期"></a>Service生命周期</h3><ul><li><p><code>onStartCommand()</code></p><p>当另一个组件（如 Activity）请求启动服务时，系统会通过调用 <code>startService()</code> 来调用此方法。执行此方法时，服务即会启动并可在后台无限期运行。如果您实现此方法，则在服务工作完成后，您需负责通过调用 <code>stopSelf()</code> 或 <code>stopService()</code> 来停止服务。（如果您只想提供绑定，则无需实现此方法。）</p></li><li><p><code>onBind()</code></p><p>当另一个组件想要与服务绑定（例如执行 RPC）时，系统会通过调用 <code>bindService()</code> 来调用此方法。在此方法的实现中，您必须通过返回 <code>IBinder</code> 提供一个接口，以供客户端用来与服务进行通信。请务必实现此方法；但是，如果您并不希望允许绑定，则应返回 null。</p></li><li><p><code>onCreate()</code></p><p>首次创建服务时，系统会（在调用 <code>onStartCommand()</code> 或 <code>onBind()</code> 之前）调用此方法来执行一次性设置程序。如果服务已在运行，则不会调用此方法。</p></li><li><p><code>onDestroy()</code></p><p>当不再使用服务且准备将其销毁时，系统会调用此方法。服务应通过实现此方法来清理任何资源，如线程、注册的侦听器、接收器等。这是服务接收的最后一个调用。</p></li></ul><h2 id="4-Android持久化存储的方式"><a href="#4-Android持久化存储的方式" class="headerlink" title="4. Android持久化存储的方式"></a>4. Android持久化存储的方式</h2><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/qq_35008279/article/details/80783726">https://blog.csdn.net/qq_35008279/article/details/80783726</a></p><p><a href="https://developer.android.com/training/data-storage/room">https://developer.android.com/training/data-storage/room</a></p></blockquote><h3 id="Shared-Preferences"><a href="#Shared-Preferences" class="headerlink" title="Shared Preferences"></a>Shared Preferences</h3><p>一个轻量级的存储类，特别适合用于保存软件配置参数，是用xml文件存放数据。</p><p>文件存放在<code>/data/data/&lt;package&gt;/shared_prefs</code>目录下</p><p>Shared Preferences可以保存的数据类型有：<code>int</code>、<code>boolean</code>、<code>float</code>、<code>long</code>、<code>String</code>、<code>StringSet</code>。</p><h3 id="Internal-Storage"><a href="#Internal-Storage" class="headerlink" title="Internal Storage"></a>Internal Storage</h3><p>通过文件的形式将数据保存到手机内部存储空间中，并且这些文件是私有的，其他程序无法访问。当卸载掉程序之后，这些文件也会被相应移除。</p><p>文件存放在<code>/storage/emulated/0/Android/data/&lt;package&gt;/</code>中</p><h3 id="External-Storage"><a href="#External-Storage" class="headerlink" title="External Storage"></a>External Storage</h3><p>通过文件的形式存储在手机模拟SD card中，需要在清单中声明外部存储空间读写权限，并且需要请求权限。</p><p>文件存放在<code>/sdcard &lt;-&gt; /storage/emulated/0/</code>中</p><h3 id="SQLite-Databases"><a href="#SQLite-Databases" class="headerlink" title="SQLite Databases"></a>SQLite Databases</h3><p>Android内建轻量化数据库SQLite，推荐通过Android Room中间层对数据库进行操作。</p><p>Room 包含三个主要组件：</p><ul><li><a href="https://developer.android.com/reference/kotlin/androidx/room/Database">数据库类</a>，用于保存数据库并作为应用持久性数据底层连接的主要访问点。</li><li><a href="https://developer.android.com/training/data-storage/room/defining-data">数据实体</a>，用于表示应用的数据库中的表。</li><li><a href="https://developer.android.com/training/data-storage/room/accessing-data">数据访问对象 (DAO)</a>，提供您的应用可用于查询、更新、插入和删除数据库中的数据的方法。</li></ul><p>数据库类为应用提供与该数据库关联的 DAO 的实例。反过来，应用可以使用 DAO 从数据库中检索数据，作为关联的数据实体对象的实例。此外，应用还可以使用定义的数据实体更新相应表中的行，或者创建新行供插入。下图说明了 Room 的不同组件之间的关系。</p><p><img src="https://developer.android.google.cn/images/training/data-storage/room_architecture.png" alt="android room"></p><h2 id="5-Android-Broadcast"><a href="#5-Android-Broadcast" class="headerlink" title="5. Android Broadcast"></a>5. Android Broadcast</h2><blockquote><p>参考：<a href="https://developer.android.com/guide/components/broadcasts">https://developer.android.com/guide/components/broadcasts</a></p></blockquote><p>Android 应用与 Android 系统和其他 Android 应用之间可以相互收发广播消息，这与_发布-订阅_设计模式相似。这些广播会在所关注的事件发生时发送。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p>系统广播</p><p>系统会在发生各种系统事件时自动发送广播，例如当系统进入和退出飞行模式时。系统广播会被发送给所有同意接收相关事件的应用。</p><p>广播消息本身会被封装在一个 <code>Intent</code> 对象中，该对象的操作字符串会标识所发生的事件。</p></li><li><p>自定义广播</p></li></ul><h3 id="接收与发送广播"><a href="#接收与发送广播" class="headerlink" title="接收与发送广播"></a>接收与发送广播</h3><h4 id="接收广播"><a href="#接收广播" class="headerlink" title="接收广播"></a>接收广播</h4><ul><li><p>清单声明的接收器</p><p>如果您在清单中声明广播接收器，系统会在广播发出后启动您的应用（如果应用尚未运行）。</p><blockquote><p><strong>注意</strong>：如果您的应用以 API 级别 26 或更高级别的平台版本为目标，则不能使用清单为隐式广播（没有明确针对您的应用的广播）声明接收器，但一些<a href="https://developer.android.com/guide/components/broadcast-exceptions">不受此限制</a>的隐式广播除外。在大多数情况下，您可以使用<a href="https://developer.android.com/topic/performance/scheduling">调度作业</a>来代替。</p></blockquote><p>要在清单中声明广播接收器，请执行以下步骤：</p><ol><li><p>在应用清单中指定<code>&lt;receiver&gt;</code>元素。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">&quot;.MyBroadcastReceiver&quot;</span>  <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.INPUT_METHOD_CHANGED&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span>    </span><br></pre></td></tr></table></figure></li><li><p>创建 <code>BroadcastReceiver</code> 子类并实现 <code>onReceive(Context, Intent)</code>。以下示例中的广播接收器会记录并显示广播的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;MyBroadcastReceiver&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;Action: &quot;</span> + intent.getAction() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;URI: &quot;</span> + intent.toUri(Intent.URI_INTENT_SCHEME).toString() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        String log = sb.toString();</span><br><span class="line">        Log.d(TAG, log);</span><br><span class="line">        Toast.makeText(context, log, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>系统软件包管理器会在应用安装时注册接收器。然后，该接收器会成为应用的一个独立入口点，这意味着如果应用当前未运行，系统可以启动应用并发送广播。</p><p>系统会创建新的 <code>BroadcastReceiver</code> 组件对象来处理它接收到的每个广播。此对象仅在调用 <code>onReceive(Context, Intent)</code> 期间有效。一旦从此方法返回代码，系统便会认为该组件不再活跃。</p></li></ol></li><li><p>上下文注册的接收器</p><p>要使用上下文注册接收器，请执行以下步骤：</p><ol><li><p>创建 <code>BroadcastReceiver</code> 的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BroadcastReceiver br = <span class="keyword">new</span> MyBroadcastReceiver();</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>IntentFilter</code> 并调用 <code>registerReceiver(BroadcastReceiver, IntentFilter)</code> 来注册接收器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IntentFilter filter = <span class="keyword">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);</span><br><span class="line"><span class="keyword">this</span>.registerReceiver(br, filter);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>要注册本地广播，请调用 <code>LocalBroadcastManager.registerReceiver(BroadcastReceiver, IntentFilter)</code>。</p></blockquote><p>只要注册上下文有效，上下文注册的接收器就会接收广播。例如，如果您在 <code>Activity</code> 上下文中注册，只要 Activity 没有被销毁，您就会收到广播。如果您在应用上下文中注册，只要应用在运行，您就会收到广播。</p></li><li><p>要停止接收广播，请调用 <code>unregisterReceiver(android.content.BroadcastReceiver)</code>。当您不再需要接收器或上下文不再有效时，请务必注销接收器。</p><p>请注意注册和注销接收器的位置，比方说，如果您使用 Activity 上下文在 <code>onCreate(Bundle)</code> 中注册接收器，则应在 <code>onDestroy()</code> 中注销，以防接收器从 Activity 上下文中泄露出去。如果您在 <code>onResume()</code> 中注册接收器，则应在 <code>onPause()</code> 中注销，以防多次注册接收器（如果您不想在暂停时接收广播，这样可以减少不必要的系统开销）。请勿在 <code>onSaveInstanceState(Bundle)</code> 中注销，因为如果用户在历史记录堆栈中后退，则不会调用此方法。</p></li></ol></li></ul><h4 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h4><p>Android 为应用提供三种方式来发送广播：</p><ul><li><code>sendOrderedBroadcast(Intent, String)</code> 方法一次向一个接收器发送广播。当接收器逐个顺序执行时，接收器可以向下传递结果，也可以完全中止广播，使其不再传递给其他接收器。接收器的运行顺序可以通过匹配的 intent-filter 的 android:priority 属性来控制；具有相同优先级的接收器将按随机顺序运行。</li><li><code>sendBroadcast(Intent)</code> 方法会按随机的顺序向所有接收器发送广播。这称为常规广播。这种方法效率更高，但也意味着接收器无法从其他接收器读取结果，无法传递从广播中收到的数据，也无法中止广播。</li><li><code>LocalBroadcastManager.sendBroadcast</code> 方法会将广播发送给与发送器位于同一应用中的接收器。如果您不需要跨应用发送广播，请使用本地广播。这种实现方法的效率更高（无需进行进程间通信），而且您无需担心其他应用在收发您的广播时带来的任何安全问题。</li></ul><p>以下代码段展示了如何通过创建 Intent 并调用 <code>sendBroadcast(Intent)</code> 来发送广播：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setAction(<span class="string">&quot;com.example.broadcast.MY_NOTIFICATION&quot;</span>);</span><br><span class="line">intent.putExtra(<span class="string">&quot;data&quot;</span>,<span class="string">&quot;Notice me senpai!&quot;</span>);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure><p>广播消息封装在 <code>Intent</code> 对象中。Intent 的操作字符串必须提供应用的 Java 软件包名称语法，并唯一标识广播事件。您可以使用 <code>putExtra(String, Bundle)</code> 向 intent 附加其他信息。您也可以对 intent 调用 <code>setPackage(String)</code>，将广播限定到同一组织中的一组应用。</p><blockquote><p><strong>注意</strong>：虽然 intent 既用于发送广播，也用于通过 <code>startActivity(Intent)</code> 启动 Activity，但这两种操作是完全无关的。广播接收器无法查看或捕获用于启动 Activity 的 intent；同样，当您广播 intent 时，也无法找到或启动 Activity。</p></blockquote><h2 id="6-Content-Provider"><a href="#6-Content-Provider" class="headerlink" title="6. Content Provider"></a>6. Content Provider</h2><blockquote><p>参考：<a href="https://developer.android.com/guide/topics/providers/content-providers">https://developer.android.com/guide/topics/providers/content-providers</a></p></blockquote><p>内容提供程序管理对中央数据存储区的访问。提供程序是 Android 应用的一部分，通常提供自己的界面来处理数据。但是，内容提供程序主要目的是供其他应用使用，这些应用使用提供程序客户端对象进行访问。提供程序与提供程序客户端共同提供一致的标准数据界面，该界面还可处理进程间通信并保护数据访问的安全性。</p><p>通常，您会在以下两种场景中使用内容提供程序：</p><ul><li><p>一种是通过实现代码<strong>访问其他应用中的现有内容提供程序</strong>；</p></li><li><p>另一种是在应用中<strong>创建新的内容提供程序</strong>，从而与其他应用<strong>共享数据</strong>。</p></li></ul><h3 id="访问提供程序"><a href="#访问提供程序" class="headerlink" title="访问提供程序"></a>访问提供程序</h3><p>如需访问内容提供程序中的数据，您可以客户端的形式使用应用的 <code>Context</code> 中的 <code>ContentResolver</code> 对象与提供程序进行通信。<code>ContentResolver</code> 对象会与提供程序对象（即实现 <code>ContentProvider</code> 的类的实例）通信。提供程序对象从客户端接收数据请求、执行请求的操作并返回结果。此对象的某些方法可调用提供程序对象（<code>ContentProvider</code> 某个具体子类的实例）中的同名方法。<code>ContentResolver</code> 方法可提供持久性存储空间的基本“CRUD”（创建、检索、更新和删除）功能。</p><h4 id="使用“存储访问框架”打开文件"><a href="#使用“存储访问框架”打开文件" class="headerlink" title="使用“存储访问框架”打开文件"></a>使用“存储访问框架”打开文件</h4><p>Android 4.4（API 级别 19）引入了存储访问框架 (SAF)。借助 SAF，用户可轻松浏览和打开各种文档、图片及其他文件，而不用管这些文件来自其首选文档存储提供程序中的哪一个。</p><p>SAF 包含以下元素：</p><ul><li><strong>文档提供程序</strong> - 一种内容提供程序，可让存储服务（如 Google 云端硬盘）提供其管理的文件。文档提供程序以 <code>DocumentsProvider</code> 类的子类形式实现。文档提供程序的架构基于传统的文件层次结构，但其实际的数据存储方式由您决定。Android 平台包含若干内置的文档提供程序，如 Downloads、Images 和 Videos。</li><li><strong>客户端应用</strong> - 一种定制化的应用，它会调用 <code>ACTION_CREATE_DOCUMENT</code>、<code>ACTION_OPEN_DOCUMENT</code> 和 <code>ACTION_OPEN_DOCUMENT_TREE</code> intent 操作并接收文档提供程序返回的文件。</li><li><strong>选择器</strong> - 一种系统界面，可让用户访问所有文档提供程序内满足客户端应用搜索条件的文档。</li></ul><p>SAF 的核心是一个内容提供程序，它是 <code>DocumentsProvider</code> 类的一个子类。在文档提供程序内，数据结构采用传统的文件层次结构：</p><p><img src="https://developer.android.google.cn/images/providers/storage_datamodel.png" alt="saf"></p><h2 id="7-自定义View"><a href="#7-自定义View" class="headerlink" title="7. 自定义View"></a>7. 自定义View</h2><blockquote><p>参考：</p><p><a href="https://developer.android.google.cn/guide/topics/ui/custom-components">https://developer.android.google.cn/guide/topics/ui/custom-components</a></p><p><a href="https://www.jianshu.com/p/705a6cb6bfee">https://www.jianshu.com/p/705a6cb6bfee</a></p></blockquote><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><table><thead><tr><th>类型</th><th>定义</th></tr></thead><tbody><tr><td>完全自定义组件</td><td>完全自定义的组件可用于创建外观完全如您所需的图形组件。</td></tr><tr><td>复合组件</td><td>这会将许多更原子的控件（或视图）整合到可被视为一件事的项的逻辑分组中</td></tr><tr><td>继承系统<code>View</code>控件</td><td>继承自<code>TextView</code>等系统控件，在系统控件的基础功能上进行扩展</td></tr><tr><td>继承<code>View</code></td><td>不复用系统控件逻辑，继承<code>View</code>进行功能定义</td></tr><tr><td>继承系统<code>ViewGroup</code></td><td>继承自<code>LinearLayout</code>等系统控件，在系统控件的基础功能上进行扩展</td></tr><tr><td>继承<code>ViewViewGroup</code></td><td>不复用系统控件逻辑，继承<code>ViewGroup</code>进行功能定义</td></tr></tbody></table><h3 id="View绘制流程"><a href="#View绘制流程" class="headerlink" title="View绘制流程"></a>View绘制流程</h3><table><thead><tr><th>函数</th><th>作用</th><th>相关方法</th></tr></thead><tbody><tr><td><code>measure()</code></td><td>测量<code>View</code>的宽高</td><td><code>measure()</code>,<code>setMeasuredDimension()</code>,<code>onMeasure()</code></td></tr><tr><td><code>layout()</code></td><td>计算当前<code>View</code>以及子<code>View</code>的位置</td><td><code>layout()</code>,<code>onLayout()</code>,<code>setFrame()</code></td></tr><tr><td><code>draw()</code></td><td>视图的绘制工作</td><td><code>draw()</code>,<code>onDraw()</code></td></tr></tbody></table><h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><p>在Android坐标系中，以屏幕左上角作为原点，这个原点向右是X轴的正轴，向下是Y轴正轴。</p><h3 id="View的构造函数"><a href="#View的构造函数" class="headerlink" title="View的构造函数"></a>View的构造函数</h3><p>无论是我们继承系统View还是直接继承View，都需要对构造函数进行重写，构造函数有多个，至少要重写其中一个才行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在java代码里new的时候会用到</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在xml布局文件中使用时自动调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不会自动调用，如果有默认style时，在第二个构造函数中调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attrs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defStyleAttr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有在API版本&gt;21时才会用到</span></span><br><span class="line"><span class="comment">     * 不会自动调用，如果有默认style时，在第二个构造函数中调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> attrs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defStyleAttr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> defStyleRes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestView</span><span class="params">(Context context, <span class="meta">@Nullable</span> AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Java同步方法转异步方法"><a href="#8-Java同步方法转异步方法" class="headerlink" title="8. Java同步方法转异步方法"></a>8. Java同步方法转异步方法</h2><blockquote><p>参考：<a href="https://blog.csdn.net/weixin_38106322/article/details/104492086">https://blog.csdn.net/weixin_38106322/article/details/104492086</a></p></blockquote><p>使用<code>CachedThreadPool</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;运行第&quot;</span> + number.incrementAndGet() + <span class="string">&quot;个线程，当前时间【&quot;</span> + sim.format(<span class="keyword">new</span> Date()) + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="9-synchnoized作用"><a href="#9-synchnoized作用" class="headerlink" title="9. synchnoized作用"></a>9. <code>synchnoized</code>作用</h2><blockquote><p>参考：<a href="https://www.cnblogs.com/cg961107/p/10923114.html">https://www.cnblogs.com/cg961107/p/10923114.html</a></p></blockquote><p>同步方法支持一种简单的策略来防止线程干扰和内存一致性错误：如果一个对象对多个线程可见，则对该对象变量的所有读取或写入都是通过同步方法完成的。</p><p>一句话总结出Synchronized的作用：</p><ul><li>能够保证在同一时刻最多只有一个线程执行该段代码，以达到保证并发安全的效果</li></ul><p>Synchronized的特点：</p><ul><li><p>synchronized是Java的关键字，被Java语言原生支持</p></li><li><p>是最基本的互斥同步手段</p></li></ul><h3 id="synchronized的两个用法"><a href="#synchronized的两个用法" class="headerlink" title="synchronized的两个用法"></a>synchronized的两个用法</h3><p>对象锁：</p><ul><li>包含方法锁（默认锁对象为this当前实力对象），同步代码块锁（自己制定锁对象）</li><li>代码块形式:手动指定锁对象</li><li>方法锁形式:synchronized修饰普通方法,锁默认对象为this</li></ul><p>类锁：</p><ul><li><p>指sychronized修饰静态的方法或指锁为Class对象</p></li><li><p>概念:java类可能有有很多个对象,但是只有一个class对象</p></li><li><p>本质:所以所谓的类锁,不过是Class对象的锁而已</p></li><li><p>用法和效果:类锁只能在同一时刻被一个对象拥有</p></li><li><p>形式1:synchronized加载static方法上</p></li><li><p>形式2:synchronized(*.class)代码块</p></li></ul><h3 id="多线程访问同步方法的7种情况"><a href="#多线程访问同步方法的7种情况" class="headerlink" title="多线程访问同步方法的7种情况"></a>多线程访问同步方法的7种情况</h3><p>1.两个线程同时访问一个对象的同步方法</p><p>　　串行</p><p>2.两个线程访问的是两个对象的同步方法</p><p>　　锁对象不同,互不干扰,并行</p><p>3.如果两个线程访问的是Synchronized的静态方法</p><p>　　串行</p><p>4.同时访问同步方法与非同步方法</p><p>　　并行</p><p>5.访问同一对象的不同的普通同步方法</p><p>　　同一对象锁,串行</p><p>6.同时访问静态synchronized和非静态synchronized方法</p><p>　　锁不同,并行</p><p>7.方法抛异常后,会释放锁吗</p><p>　　如果一个线程在进入同步方法后抛出了异常,则另一个线程会立刻进入该同步方法</p><h2 id="10-Java-抽象类和接口的区别"><a href="#10-Java-抽象类和接口的区别" class="headerlink" title="10. Java 抽象类和接口的区别"></a>10. Java 抽象类和接口的区别</h2><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/94770324">https://zhuanlan.zhihu.com/p/94770324</a></p></blockquote><p>Java中接口和抽象类的定义语法分别为<code>interface</code>与<code>abstract</code>关键字。</p><p><strong>抽象类</strong>：在Java中被<code>abstract</code>关键字修饰的类称为抽象类，被<code>abstract</code>关键字修饰的方法称为抽象方法，抽象方法只有方法的声明，没有方法体。抽象类的特点：</p><ol><li>抽象类不能被实例化只能被继承；</li><li>包含抽象方法的一定是抽象类，但是抽象类不一定含有抽象方法；</li><li>抽象类中的抽象方法的修饰符只能为public或者protected，默认为public；</li><li>一个子类继承一个抽象类，则子类必须实现父类抽象方法，否则子类也必须定义为抽象类；</li><li>抽象类可以包含属性、方法、构造方法，但是构造方法不能用于实例化，主要用途是被子类调用。</li></ol><p><strong>接口</strong>：Java中接口使用<code>interface</code>关键字修饰，特点为:</p><ol><li><p>接口可以包含变量、方法；变量被隐式指定为<code>public static final</code>，方法被隐式指定为<code>public abstract</code>（JDK1.8之前）；</p></li><li><p>接口支持多继承，即一个接口可以extends多个接口，间接的解决了Java中类的单继承问题；</p></li><li><p>一个类可以实现多个接口；</p></li><li><p>JDK1.8中对接口增加了新的特性：</p><ol><li>默认方法（default method）：JDK1.8允许给接口添加非抽象的方法实现，但必须使用<code>default</code>关键字修饰；定义了default的方法可以不被实现子类所实现，但只能被实现子类的对象调用；如果子类实现了多个接口，并且这些接口包含一样的默认方法，则子类必须重写默认方法；</li><li>静态方法（static method）：JDK1.8中允许使用<code>static</code>关键字修饰一个方法，并提供实现，称为接口静态方法。接口静态方法只能通过接口调用（接口名.静态方法名）。</li></ol></li></ol><p><strong>相同点</strong></p><ol><li>都不能被实例化</li><li>接口的实现类或抽象类的子类都只有实现了接口或抽象类中的方法后才能实例化。</li></ol><p><strong>不同点</strong></p><ol><li>接口只有定义，不能有方法的实现，java 1.8中可以定义<code>default</code>方法体，而抽象类可以有定义与实现，方法可在抽象类中实现。</li><li>实现接口的关键字为<code>implements</code>，继承抽象类的关键字为<code>extends</code>。一个类可以实现多个接口，但一个类只能继承一个抽象类。所以，使用接口可以间接地实现多重继承。</li><li>接口强调特定功能的实现，而抽象类强调所属关系。</li><li>接口成员变量默认为<code>public static final</code>，必须赋初值，不能被修改；其所有的成员方法都是<code>public</code>、<code>abstract</code>的。抽象类中成员变量默认<code>default</code>，可在子类中被重新定义，也可被重新赋值；抽象方法被<code>abstract</code>修饰，不能被<code>private</code>、<code>static</code>、<code>synchronized</code>和<code>native</code>等修饰，必须以分号结尾，不带花括号。</li></ol><h2 id="11-equals和-的区别"><a href="#11-equals和-的区别" class="headerlink" title="11. equals和==的区别"></a>11. <code>equals</code>和<code>==</code>的区别</h2><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/338350987">https://zhuanlan.zhihu.com/p/338350987</a></p></blockquote><ol><li><p><code>equals()</code>：用来检测两个对象是否相等，即两个对象的内容是否相等。</p></li><li><p><code>==</code>：用于比较引用和比较基本数据类型时具有不同的功能</p><ol><li>基础数据类型：比较的是他们的值是否相等，比如两个int类型的变量，比较的是变量的值是否一样。</li><li>引用数据类型：比较的是引用的地址是否相同，比如说新建了两个User对象，比较的是两个User的地址是否一样。</li></ol></li></ol><p><strong>对equals重新需要注意五点：</strong></p><p>1、自反性：对任意引用值X，x.equals(x)的返回值一定为true；</p><p>2、对称性：对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true；</p><p>3、传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true ；</p><p>4、 一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变；</p><p>5、非空性：任何非空的引用值X，x.equals(null)的返回值一定为false 。</p><h3 id="："><a href="#：" class="headerlink" title="==："></a>==：</h3><p><code>==</code> 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。</p><p>1、比较的是操作符两端的操作数是否是同一个对象。</p><p>2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。</p><p>3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为<code>true</code>，如：</p><p><code>int a=10</code> 与 <code>long b=10L</code> 与 <code>double c=10.0</code>都是相同的（为<code>true</code>），因为他们都指向地址为10的堆。</p><h3 id="equals："><a href="#equals：" class="headerlink" title="equals："></a>equals：</h3><p><code>equals</code>用来比较的是两个对象的内容是否相等，由于所有的类都是继承自<code>java.lang.Object</code>类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是<code>Object</code>类中的方法，而<code>Object</code>中的<code>equals</code>方法返回的却是<code>==</code>的判断。</p><p><code>String s=&quot;abce&quot;</code>是一种非常特殊的形式,和new 有本质的区别。它是java中唯一不需要<code>new</code>就可以产生对象的途径。</p><p>以<code>String s=&quot;abce&quot;;</code>形式赋值在java中叫直接量,它是在常量池中而不是象<code>new</code>一样放在压缩堆中。这种形式的字符串，在JVM内部发生字符串拘留，即当声明这样的一个字符串后，JVM会在常量池中先查找有有没有一个值为<code>&quot;abcd&quot;</code>的对象。</p><p>如果有，就会把它赋给当前引用.即原来那个引用和现在这个引用指点向了同一对象，如果没有，则在常量池中新创建一个<code>&quot;abcd&quot;</code>，下一次如果有<code>Strings1=&quot;abcd&quot;</code>又会将s1指向<code>&quot;abcd&quot;</code>这个对象，即以这形式声明的字符串，只要值相等，任何多个引用都指向同一对象。</p><p>而<code>String s=new String(&quot;abcd&quot;)</code>和其它任何对象一样.每调用一次就产生一个对象，只要它们调用。</p><p>也可以这么理解：”String str=”hello””先在内存中找是不是有<code>&quot;hello&quot;</code>这个对象，如果有，就让<code>str</code>指向那个<code>&quot;hello&quot;</code>。如果内存里没有<code>&quot;hello&quot;</code>，就创建一个新的对象保存<code>&quot;hello&quot;</code>。<code>String str=new String(&quot;hello&quot;)</code>就是不管内存里是不是已经有<code>&quot;hello&quot;</code>这个对象，都新建一个对象保存<code>&quot;hello&quot;</code>。</p><h2 id="12-volatile和synchronized的区别"><a href="#12-volatile和synchronized的区别" class="headerlink" title="12. volatile和synchronized的区别"></a>12. volatile和synchronized的区别</h2><blockquote><p>参考：<a href="https://blog.csdn.net/suifeng3051/article/details/52611233">https://blog.csdn.net/suifeng3051/article/details/52611233</a></p></blockquote><ol><li><code>volatile</code>本质是在告诉JVM当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；</li><li><code>synchronized</code>则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住；</li><li><code>volatile</code>仅能使用在变量级别；<code>synchronized</code>则可以使用在变量、方法、和类级别的；</li><li><code>volatile</code>仅能实现变量的修改可见性，不能保证原子性；而<code>synchronized</code>则可以保证变量的修改可见性和原子性；</li><li><code>volatile</code>不会造成线程的阻塞；<code>synchronized</code>可能会造成线程的阻塞；</li><li><code>volatile</code>标记的变量不会被编译器优化；<code>synchronized</code>标记的变量可以被编译器优化。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-基础问题2022-04&quot;&gt;&lt;a href=&quot;#Android-基础问题2022-04&quot; class=&quot;headerlink&quot; title=&quot;Android 基础问题2022-04&quot;&gt;&lt;/a&gt;Android 基础问题2022-04&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;从网上收集的一些基础面试问题&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="Java" scheme="https://ryzenx.com/tags/java/"/>
    
      <category term="笔记" scheme="https://ryzenx.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>使Vim中的空白字符可见</title>
    <link href="https://ryzenx.com/2022/04/make-vim-show-whitechars/"/>
    <id>https://ryzenx.com/2022/04/make-vim-show-whitechars/</id>
    <published>2022-04-06T11:16:37.000Z</published>
    <updated>2022-04-06T11:46:28.032Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使Vim中空白字符可见"><a href="#使Vim中空白字符可见" class="headerlink" title="使Vim中空白字符可见"></a>使Vim中空白字符可见</h1><blockquote><p>参考引用：<a href="https://segmentfault.com/a/1190000021101602">vim技巧：设置空格和Tab字符可见，并自定义显示的字符颜色</a></p></blockquote><span id="more"></span><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>不同于Visual Studio Code, Sublime Text等拥有GUI的高级文本编辑器，Vim作为Linux系统中命令行环境的常用文本编辑器，Vim的上手难度很高，且配置较为复杂。除了使用SSH连接远程服务器通过本机Visual Studio Code编写代码，有时候也需要使用Vim对服务器脚本、配置等文件进行修改。</p><p>偶然看到思否一篇文章介绍了如何使Vim中展示空白字符，让我印象深刻。毕竟Python这种语言对于是<code>Tab</code>还是<code>Space</code>的格式化要求较高；同时git提交的时候也会由于空白字符的问题产生不必要的更改。</p><p>于是记录我的Vim配置如下。</p><h2 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h2><p>执行 <code>:setlocal list</code> 命令后，会把 tab 字符显示为 <code>CTRL-I</code> 键的显示字符，实际显示为 <code>^I</code>。同时会在行末显示一个 <code>$</code> 字符。默认不会显示空格。</p><p>这个 <em>list</em> 选项是一个 “local to window“ 选项，也就是可以使用 <code>:setlocal</code> 命令来设置成只在当前窗口生效，这样设置之后，用 <code>:edit</code> 命令再打开其他文件，在新的窗口上没有开启这个设置，不会影响其他文件。</p><p>如果想要在打开代码文件时，才显示空格或 tab 字符，打开其他类型文件，例如 txt 文件、markdown 文件、makefile 文件等，不显示空格或 tab 字符，就可以使用 <code>:setlocal list</code> 命令。如果需要设置成全局状态，所有窗口都开启这个设置，可以使用 <code>:set list</code> 命令。</p><p>由于把 tab 字符显示为 <code>^I</code> 不够直观，不想在行末显示 <code>$</code> 字符，且需要显示空格，所以再执行 <code>set listchars=tab:&gt;~,trail:.</code> 命令来设置 tab 字符和空格的显示样式，且行末不显示字符。</p><p>这个 <em>listchars</em> 选项是一个 “global” 选项，一旦设置，对所有窗口都生效，用于设置 <em>list</em> 属性会显示哪些字符、以及如何显示。常见的选项值说明如下：</p><ul><li><strong>eol:c</strong><br>设置行末显示字符为 <em>c</em>。这里 <em>c</em> 可以换成任意一个字符，例如默认的 <code>$</code> 字符、或者改成 <code>#</code> 字符，等等。<br>显然，要设置成一个可见字符，才能明显地看到显示效果。<br>如果没有设置这一项，行末不显示任何字符。</li><li><strong>tab:xy</strong><br>设置 tab 字符的显示样式，字符 <em>x</em> 总是会显示，会显示零个或多个字符 <em>y</em> 以填充到 tab 字符的显示宽度。<br>例如，设置为 <code>tab:&gt;-</code>，且 tab 字符的显示宽度是 4，那么 tab 字符会显示为 <code>&gt;---</code>。<br>实际显示的时候，可能只显示一个 <code>&gt;</code>，或者只显示 <code>&gt;-</code>。这个跟 tab 字符所在的位置有关。假设 tab 字符的显示宽度为 4，意味着 tab 字符的宽度总是停在 4 的倍数行上，当手动输入 3 个空格，再输入一个 tab 字符时，tab 字符只会显示一个空白字符，那么就只显示所设置的字符 <em>x</em>，对于刚才的例子来说，就是只显示 <code>&gt;</code> 字符。<br>在实际测试时，如有设置 <code>:set expandtab</code>，会把 tab 字符转换成空格，输入 tab 键不会得到 tab 字符，要先执行 <code>:set noexpandtab</code> 命令，关闭这个设置再来测试。</li><li><strong>tab:xyz</strong><br>设置 tab 字符的显示样式，字符 <em>z</em> 总是会显示，显示字符 <em>z</em> 之后，如果还有可显示的位置，字符 <em>x</em> 会显示在开头，在字符 <em>x</em> 和 字符 <em>z</em> 中间显示零个或多个字符 <em>y</em> 以填充到 tab 字符的显示宽度。<br>例如，设置为 <code>tab:&lt;-&gt;</code>，且 tab 字符的显示为 4，那么 tab 字符会显示为 <code>&lt;--&gt;</code>。<br>实际显示的时候，可能只显示一个 <code>&gt;</code>，或者显示为 <code>&lt;&gt;</code>、<code>&lt;-&gt;</code> 等，跟 tab 字符所在的位置有关。如上面说明所示。</li><li>如果没有设置 <strong>tab:</strong> 这一项，tab 字符默认会显示为 <code>^I</code>。</li><li><strong>space:c</strong><br>设置所有的空格显示为字符 <em>c</em>，包括行首空格、行中间的空格、行末空格都会显示。<br>这里 <em>c</em> 可以换成任意一个字符。<br>如果没有设置这一项，空格显示为默认的空白。</li><li><strong>trail:c</strong><br>设置行末空格显示为字符 <em>c</em>，会覆盖 <code>space:</code> 这一项的设置，且只覆盖行末空格的显示。<br>这里 <em>c</em> 可以换成任意一个字符。<br>如果没有设置这一项，行末空格保持为 <code>space:</code> 这一项的设置。</li><li>不同设置项之间，用英文逗号 <code>,</code> 隔开。例如，<code>tab:&gt;~,trail:.</code> 设置了 tab 字符和行末空格的显示样式。</li></ul><p>基于上面说明，可以知道 <code>set listchars=tab:&gt;~,trail:.</code> 命令设置 tab 字符显示为 <code>&gt;~~~~</code> 的样式（假设 tab 字符的显示宽度是 4），设置行末空格显示为点号 <code>.</code>，不显示行首空格和行中间的空格，行末不显示字符。如果需要显示所有空格，可以把 <em>trail</em> 改成 <em>space</em>。</p><p>进行前面的设置之后，空格和 tab 字符已经可见，但是显示的字符颜色使用了 <code>hi SpecialKey</code> 这一项的颜色，可以执行 <code>:hi</code> 命令查看 <em>SpecialKey</em> 对应的颜色是什么，跟 vim 使用的颜色主题有关，不同颜色主题可能有不同的颜色，例如蓝色、绿色、黑底白色等。</p><p>这个显示颜色会跟代码文件本身的颜色高亮混在一起，不方便区分。假设 tab 字符显示为 <code>&gt;~~~~</code>，字符颜色是蓝色，如果后面跟着蓝色的代码关键字，就跟代码关键字显示成一个整体，不方便看到代码关键字。前面把行末空格显示为点号 <code>.</code>，如果某句注释的行末有空格，容易误以为是注释本身的点号。</p><p>为了方便区分于代码文件自身的颜色高亮，可以使用下面命令来设置可见的空格和 tab 字符显示为灰色，不那么显眼，方便区分于代码文件自身的颜色高亮：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:hi SpecialKey <span class="attribute">guifg</span>=darkgrey <span class="attribute">ctermfg</span>=darkgrey</span><br></pre></td></tr></table></figure><p>如果不想显示成灰色，可以修改上面 <em>guifg<em>、</em>ctermfg</em> 的值，设置成个人喜欢的颜色。</p><p>这样设置之后，会有一个问题，就是修改了默认 <code>hi SpecialKey</code> 这一项的颜色。而 vim 会用到这个颜色来显示自身的一些内容，例如执行 <code>:map</code> 命令，显示映射的快捷键时，按键字符就显示为 <code>hi SpecialKey</code> 这一项的颜色，改成灰色后，不太显眼。</p><p>为了避免直接修改 <code>hi SpecialKey</code> 这一项的颜色，我们可以自定义一个颜色组，并设置为只对空格和 tab 字符生效，具体如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:highlight MyTabSpace <span class="attribute">guifg</span>=darkgrey <span class="attribute">ctermfg</span>=darkgrey</span><br><span class="line">:match MyTabSpace /\t\| /</span><br></pre></td></tr></table></figure><p>这里用 <code>:highlight</code> 命令（这个命令也可以简写为 <code>:hi</code> 命令）来自定义了一个 <em>MyTabSpace</em> 颜色组，显示为灰色。然后用 <code>:match</code> 命令设置 <em>MyTabSpace</em> 颜色组对空格和 tab 字符生效。上面的 <code>\t</code> 就是 tab 字符。不同字符串之间用 <code>|</code> 隔开，书写的时候要使用 <code>\|</code> 转义。在 <code>|</code> 后面的空白字符就是空格。</p><p>如前面说明，我们可能只想在查看代码文件时，才设置空格和 tab 字符可见，并且最好是自动开启。这个就需要在 <code>~/.vimrc</code> 文件中进行配置。完整配置如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; 创建一个新的 MyTabSpace 组,并设置它的颜色</span></span><br><span class="line"><span class="keyword">highlight</span> MyTabSpace guifg=darkgrey ctermfg=darkgrey</span><br><span class="line"><span class="comment">&quot; 指定tab字符和空格的颜色组为MyTabSpace,不同字符串之间用|隔开,要使用\|转义.</span></span><br><span class="line"><span class="keyword">match</span> MyTabSpace /\t\| /</span><br><span class="line"><span class="comment">&quot; 针对特定类型的代码文件,设置显示Tab键和行尾空格以便在查看代码时注意到它们</span></span><br><span class="line"><span class="keyword">autocmd</span> FileType <span class="keyword">c</span>,cpp,java,xml <span class="keyword">setlocal</span> <span class="keyword">list</span> | <span class="keyword">set</span> listchars=<span class="keyword">ta</span><span class="variable">b:</span>&gt;~,trai<span class="variable">l:</span>.</span><br></pre></td></tr></table></figure><p>这段配置先使用 <code>:highlight</code> 命令（在 <em>.vimrc</em> 文件中书写时，省略了前面的冒号）自定义一个 <em>MyTabSpace</em> 颜色组，颜色为灰色。然后用 <code>:match</code> 命令设置 <em>MyTabSpace</em> 颜色组对空格和 tab 字符生效。由于空格和 tab 字符默认不可见，所以对于没有设置空格和 tab 字符可见的文件窗口来说，这个设置没有影响。</p><p>后面使用 <code>:autocmd</code> 命令针对 <code>c,cpp,java,xml</code> 这些类型的文件自动设置空格和tab 字符可见，就能看到这些字符显示为灰色。其他类型文件没有自动设置，不受影响。如有需要，可以自行添加其他类型的文件后缀名。</p><p>可以使用 <code>:help &#39;list&#39;</code> 命令查看 <code>list</code> 选项的说明。<br>可以使用 <code>:help &#39;listchars&#39;</code> 命令查看 <code>listchars</code> 选项的说明。<br>可以使用 <code>:help :highlight</code> 命令查看设置颜色高亮的更多说明。<br>可以使用 <code>:help :match</code> 命令查看如何设置指定字符串的显示颜色组。<br>可以使用 <code>:help :autocmd</code> 命令查看如何针对特定类型文件自动执行指定命令。</p><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>在<code>home</code>目录下新建<code>.vimrc</code>配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.vimrc</span><br></pre></td></tr></table></figure><p>填入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">set tabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set expandtab</span><br><span class="line">set autoindent</span><br><span class="line">set softtabstop=4</span><br><span class="line">set ruler</span><br><span class="line">syntax on</span><br><span class="line">set showmode</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set t_Co=256</span><br><span class="line">set laststatus=2</span><br><span class="line"></span><br><span class="line">set list</span><br><span class="line">set listchars=tab:⇥⇥,space:·,eol:⤦</span><br><span class="line">highlight TabSpaceColor guifg=darkgrey ctermfg=darkgrey</span><br><span class="line">match TabSpaceColor /\t\| \|\n\|\r/</span><br></pre></td></tr></table></figure><p>从而可以显示空格、制表符和换行符。效果：</p><p><img src="https://ryzenx.oss-cn-hangzhou.aliyuncs.com/img/2022/20220406194350.png" alt="效果图片"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使Vim中空白字符可见&quot;&gt;&lt;a href=&quot;#使Vim中空白字符可见&quot; class=&quot;headerlink&quot; title=&quot;使Vim中空白字符可见&quot;&gt;&lt;/a&gt;使Vim中空白字符可见&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;参考引用：&lt;a href=&quot;https://segmentfault.com/a/1190000021101602&quot;&gt;vim技巧：设置空格和Tab字符可见，并自定义显示的字符颜色&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Vim" scheme="https://ryzenx.com/tags/vim/"/>
    
      <category term="Linux" scheme="https://ryzenx.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Typora自定义导出HTML</title>
    <link href="https://ryzenx.com/2022/03/Typora-export-html/"/>
    <id>https://ryzenx.com/2022/03/Typora-export-html/</id>
    <published>2022-03-31T14:18:44.000Z</published>
    <updated>2022-03-31T15:21:43.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora-Export-to-HTML-Mixin"><a href="#Typora-Export-to-HTML-Mixin" class="headerlink" title="Typora Export to HTML Mixin"></a>Typora Export to HTML Mixin</h1><p>平常喜欢用Typora编写Markdown笔记，一般来说都是导出为pdf方便阅读，有时候也导出为html文件方便直接放在静态网站上展示。</p><p>偶然发现Typora可以在导出的html文件的<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>中插入自定义代码。这就有了很多可玩性。</p><center><img src="https://ryzenx.oss-cn-hangzhou.aliyuncs.com/img/2022/20220331222931.png" alt="Typora screenshot" style="height:320px;" /></center><span id="more"></span><h2 id="1-官方文档这样说"><a href="#1-官方文档这样说" class="headerlink" title="1. 官方文档这样说"></a>1. 官方文档这样说</h2><blockquote><h4 id="Add-Custom-Contents"><a href="#Add-Custom-Contents" class="headerlink" title="Add Custom Contents"></a>Add Custom Contents</h4><p>You can add custom contents in Append in <head /> and Append in <body />, which will be inserted into <head /> part and <body /> part in the exported html. For contents that cannot be added into <head />, even when it is added in Append in <head />, it will be prepend into <body /> instead. Same for Append in <body />.</p><h5 id="Export-YAML-meta"><a href="#Export-YAML-meta" class="headerlink" title="Export YAML meta"></a>Export YAML meta</h5><p>Variables like <code>$&#123;title&#125;</code> or <code>$&#123;author&#125;</code> in <code>&lt;title&gt;</code> and <code>&lt;meta&gt;</code> tag will be replaced by corresponding <a href="https://support.typora.io/Export/#variables">variables</a> defined in <a href="https://jekyllrb.com/docs/front-matter/">YAML Front Matter</a>.</p><p>For example, you can insert additional <code>&lt;meta&gt;</code> data or custom <code>&lt;style&gt;</code> into exported html using those options, e.g:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">&quot;author&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;<span class="variable">$&#123;author&#125;</span>&quot;</span>&gt;</span><br><span class="line">&lt;meta <span class="attribute">name</span>=<span class="string">&quot;description&quot;</span> <span class="attribute">content</span>=<span class="string">&quot;<span class="variable">$&#123;description&#125;</span>&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>To use those variables in somewhere else, you can add some javascript in <code>Append in &lt;body /&gt;</code>, to read target meta tag, and modified export content as you want.</p></blockquote><h2 id="2-实践"><a href="#2-实践" class="headerlink" title="2. 实践"></a>2. 实践</h2><p>官方文档中有几点需要注意</p><ul><li>变量可以写在Markdown的<code>YAML</code>头注释中，输入方式是三个减号<code>---</code>并<code>return</code></li><li>Typora只能在<code>&lt;head&gt;</code>中插入带变量的内容，如果需要在<code>&lt;body&gt;</code>中使用变量，需要先在<code>&lt;head&gt;</code>中通过<code>&lt;meta&gt;</code>引入，在<code>&lt;body&gt;</code>中通过Javascript读取<code>&lt;meta&gt;</code>中的变量再使用。</li></ul><h3 id="输出user-agent"><a href="#输出user-agent" class="headerlink" title="输出user agent"></a>输出user agent</h3><p>在<code>&lt;body&gt;</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(navigator.userAgentData)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ua = navigator.userAgentData.platform || <span class="string">&quot;Unknown&quot;</span>;</span></span><br><span class="line"><span class="javascript">ua = ua + <span class="string">&quot; &quot;</span> + navigator.userAgentData.brands[<span class="number">2</span>].brand + <span class="string">&quot; var.&quot;</span> + navigator.userAgentData.brands[<span class="number">2</span>].version;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;%c&quot;</span>+ua, <span class="string">&quot;font-size:16px;background-color:black;color:white;padding:4px;margin:4px;&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ua = navigator.userAgent;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;%c&quot;</span>+ua, <span class="string">&quot;font-size:16px;background-color:black;color:white;padding:4px;margin:4px;&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意⚠️，<code>userAgentData</code>是新属性</p><p>效果</p><img src="https://ryzenx.oss-cn-hangzhou.aliyuncs.com/img/2022/20220331224202.png" alt="log user agent" style="zoom:50%;" /><h3 id="输出title"><a href="#输出title" class="headerlink" title="输出title"></a>输出title</h3><p>在<code>&lt;head&gt;</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;body&gt;</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> title = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;title&#x27;</span>)[<span class="number">0</span>].textContent;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;%c&quot;</span>+<span class="string">&quot;Title: &quot;</span>+title, <span class="string">&quot;font-size:16px;background-color:black;color:white;padding:4px;margin:4px;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><img src="https://ryzenx.oss-cn-hangzhou.aliyuncs.com/img/2022/20220331224629.png" alt="log title" style="zoom:50%;" /><h3 id="输出自定义变量"><a href="#输出自定义变量" class="headerlink" title="输出自定义变量"></a>输出自定义变量</h3><p>在<code>&lt;head&gt;</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;$&#123;description&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>&lt;body&gt;</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> desp = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;meta&#x27;</span>)[<span class="string">&#x27;description&#x27;</span>].content;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;%c&quot;</span>+<span class="string">&quot;Desp: &quot;</span>+desp, <span class="string">&quot;font-size:16px;background-color:white;color:black;padding:4px;margin:4px;&quot;</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果</p><img src="https://ryzenx.oss-cn-hangzhou.aliyuncs.com/img/2022/20220331225114.png" alt="log desciption" style="zoom:50%;" /><h3 id="输出本页地址"><a href="#输出本页地址" class="headerlink" title="输出本页地址"></a>输出本页地址</h3><p>在<code>&lt;body&gt;</code>中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pageUrl = <span class="built_in">window</span>.location.href;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">&quot;%cPlease indicate the URL for forwarding: &quot;</span>+ pageUrl, <span class="string">&quot;font-size:18px;background-color:yellow;color:black;padding:4px;margin:4px;&quot;</span>)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进阶：复制页面文本时添加版权信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">addLink</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> pageUrl = <span class="built_in">window</span>.location.href;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> linkContent = <span class="string">&quot;&lt;br/&gt;&lt;br/&gt;Please indicate the URL for forwarding: &lt;br/&gt;\n&quot;</span>+ pageUrl+<span class="string">&quot;&lt;br/&gt;\n&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> selected = selection = <span class="built_in">window</span>.getSelection() ? <span class="built_in">window</span>.getSelection() : <span class="built_in">document</span>.selection.createRange().text;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(<span class="built_in">window</span>.clipboardData)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.clipboardData.setData (<span class="string">&quot;Text&quot;</span>, selected+linkContent);</span></span><br><span class="line"><span class="javascript">  &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    newDiv.style.position =<span class="string">&#x27;absolute&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    newDiv.style.left =<span class="string">&#x27;-99999px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    newDiv.style.top =<span class="string">&#x27;-99999px&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(newDiv);</span></span><br><span class="line"><span class="javascript">    newDiv.innerHTML = selected+linkContent;</span></span><br><span class="line"><span class="javascript">    selection.selectAllChildren(newDiv);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.body.removeChild(newDiv);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">  &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.oncopy = addLink;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-完"><a href="#3-完" class="headerlink" title="3. 完"></a>3. 完</h2><p>因为是内嵌代码，理论上是支持一切网页上可以运行的内容。可以自行发掘用法。</p><p>一次设定，导出无忧。</p><p>我的<code>&lt;script&gt;</code>使用<code>uglify</code>压缩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua,title=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;title&quot;</span>)[<span class="number">0</span>].textContent,updatetime=<span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;meta&quot;</span>).updatetime.content,pageUrl=(<span class="built_in">console</span>.log(<span class="string">&quot;%cTitle: &quot;</span>+title+<span class="string">&quot;\nUpdateTime: &quot;</span>+updatetime,<span class="string">&quot;font-size:14px;background-color:black;color:white;padding:4px;margin:4px;&quot;</span>),ua=navigator.userAgentData?(ua=navigator.userAgentData.platform||<span class="string">&quot;Unknown&quot;</span>)+<span class="string">&quot; &quot;</span>+navigator.userAgentData.brands[<span class="number">2</span>].brand+<span class="string">&quot; var.&quot;</span>+navigator.userAgentData.brands[<span class="number">2</span>].version:navigator.userAgent,<span class="built_in">console</span>.log(<span class="string">&quot;%c&quot;</span>+ua,<span class="string">&quot;font-size:14px;background-color:black;color:white;padding:4px;margin:4px;&quot;</span>),<span class="built_in">window</span>.location.href);<span class="function"><span class="keyword">function</span> <span class="title">addLink</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> e,o=<span class="string">&quot;&lt;br/&gt;&lt;br/&gt;Please indicate the URL for forwarding: &lt;br/&gt;\n&quot;</span>+<span class="built_in">window</span>.location.href+<span class="string">&quot;&lt;br/&gt;\n&quot;</span>,t=selection=<span class="built_in">window</span>.getSelection()?<span class="built_in">window</span>.getSelection():<span class="built_in">document</span>.selection.createRange().text;<span class="built_in">window</span>.clipboardData?<span class="built_in">window</span>.clipboardData.setData(<span class="string">&quot;Text&quot;</span>,t+o):((e=<span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>)).style.position=<span class="string">&quot;absolute&quot;</span>,e.style.left=<span class="string">&quot;-99999px&quot;</span>,e.style.top=<span class="string">&quot;-99999px&quot;</span>,<span class="built_in">document</span>.body.appendChild(e),e.innerHTML=t+o,selection.selectAllChildren(e),<span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">document</span>.body.removeChild(e)&#125;,<span class="number">0</span>))&#125;<span class="built_in">console</span>.log(<span class="string">&quot;%cPlease indicate the URL for forwarding: &quot;</span>+pageUrl,<span class="string">&quot;font-size:14px;background-color:yellow;color:black;padding:4px;margin:4px;&quot;</span>),<span class="built_in">console</span>.log(<span class="string">&quot;%cWebsite: https://RyzenX.com&quot;</span>,<span class="string">&quot;font-size:24px;background-color:red;color:white;padding:4px;margin:4px;&quot;</span>),<span class="built_in">console</span>.log(<span class="string">&quot;%cCopyright 2022 Steven Yan. All rights reserved.&quot;</span>,<span class="string">&quot;font-size:24px;background-color:blue;color:white;padding:4px;margin:4px;&quot;</span>),<span class="built_in">document</span>.oncopy=addLink;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Typora自定义导出HTML简介
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Typora" scheme="https://ryzenx.com/tags/typora/"/>
    
      <category term="备忘" scheme="https://ryzenx.com/tags/%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>高等数学上册 概念公式笔记</title>
    <link href="https://ryzenx.com/2022/03/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E4%B8%8A/"/>
    <id>https://ryzenx.com/2022/03/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E4%B8%8A/</id>
    <published>2022-03-30T16:00:00.000Z</published>
    <updated>2022-05-29T14:48:47.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高等数学（上）"><a href="#高等数学（上）" class="headerlink" title="高等数学（上）"></a>高等数学（上）</h1><p><em>建议使用大内存高清宽屏设备阅读</em><br>本笔记采用 Markdown+$\LaTeX$编写，需要在页面上实时渲染，且文件较大。<br>如果卡顿请<a href="https://ryzenx.com/math-notes-html/">&gt;点击这里&lt;</a>浏览已渲染好的页面</p><span id="more"></span><p>[toc]</p><hr><h2 id="一-函数与极限"><a href="#一-函数与极限" class="headerlink" title="一. 函数与极限"></a>一. 函数与极限</h2><h3 id="1-1-集合与函数"><a href="#1-1-集合与函数" class="headerlink" title="1.1 集合与函数"></a>1.1 集合与函数</h3><ol><li><p>集合的概念：略</p></li><li><p>集合的运算：</p><ul><li>A 与 B 的并集：$A \bigcup B$</li><li>A 与 B 的交集：$A \bigcap B$</li><li>A 与 B 的差集：$A \setminus B$</li><li>记$I$为全集，A 的补集或余集：$A^C = I \setminus A = {x \mid x \notin A}$</li><li>A 与 B 的直集（笛卡尔乘积）：$A \times B = {(x,y) \mid x \in A \ and \ y \in B}$</li></ul></li><li><p>区间：略</p></li><li><p>邻域：点$a$的邻域表示所有到点$a$的距离小于正数$\delta$的点的集合，记作：$U(a,\delta)$。即表示为：<br>$$<br>{x \mid \left | x-a \right | &lt; \delta,\delta &gt; 0}<br>$$<br>去心邻域记作：$\mathring U (a,\delta)$</p></li></ol><h4 id="映射与函数"><a href="#映射与函数" class="headerlink" title="映射与函数"></a>映射与函数</h4><ol><li>定义 1:存在一个对应法则$f$，使得对于集合$X$中的每一个元素$x$，在$Y$中都有唯一的元素$y$与之对应，记作：<br>$$<br>f:X \to Y<br>$$<br>X 的所有像的集合称为映射$f$的值域，记作$R_f$或$f(X)$，即：<br>$$<br>R_f = {y \mid y = f(x),x \in X}<br>$$</li><li>定义 2:设数集$D \in \mathbb{R}$，则称映射 为定义在$D$上的函数，简记为：<br>$$<br>y = f(x),x \in D<br>$$</li></ol><h4 id="函数的特性"><a href="#函数的特性" class="headerlink" title="函数的特性"></a>函数的特性</h4><ol><li><p>奇偶性：设函数$f(x)$的定义域$D$关于原点对称。如果对于任意$x\in D$，</p><p>$$<br>f(-x) = f(x)<br>$$</p><p>则$f(x)$为偶函数。如果对于任一$x\in D$，</p><p>$$<br>f(-x) = -f(x)<br>$$</p><p>则$f(x)$为奇函数。</p></li><li><p>有界性：函数$f(x)$在$X$上有上界：<br>$$<br>\forall x \in X,\exists B_1,f(x) \leqslant B_1<br>$$<br>函数$f(x)$在$X$上有下界：<br>$$<br>\forall x \in X,\exists B_2,f(x) \geqslant B_2<br>$$<br>函数有界：<br>$$<br>\forall x \in X,\exists M,\mid f(x) \mid \leqslant M<br>$$</p></li><li><p>单调性：设函数定义域为$D$，区间$I \subset D$。如果对于区间$I$上任意两点$x_1,\ x_2$当$x_1 &lt; x_2$时，恒有：</p><p>$$<br>f(x_1) &lt; f(x_2)<br>$$</p><p>那么称函数 $f(x)$是在区间$I$上单调增加的；如果恒有：</p><p>$$<br>f(x_1) &gt; f(x_2)<br>$$</p><p>那么称函数$f(x)$是在区间$I$上单调减少的。单调递增和单调递减的函数统称为单调函数。</p></li><li><p>周期性：设函数$f(x)$的定义域为$D$。如果存在一个正数$l$，使得对于任一$x \in D$有$(x\pm l)\in D$，且：<br>$$<br>f(x+l) = f(x)<br>$$<br>恒成立，那么称$f(x)$为周期函数，$l$成为函数的周期（最小正周期）。</p></li></ol><h4 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h4><p>设函数$f:D\rarr f(D)$是单射，则它的逆映射$f^{-1}:f(D)\rarr D$为函数$f$的逆映射。对于每个$y\in f(D)$，有唯一的$x\in D$使得$f(x)=y$，有：</p><p>$$<br>x = f^{-1}(y)<br>$$</p><p>则互为反函数。</p><h4 id="复合函数"><a href="#复合函数" class="headerlink" title="复合函数"></a>复合函数</h4><p>设函数$y=f(u)$的定义域为$D_f$，函数$u=g(x)$的定义域为$D_g$，且值域$R_g\sub D_f$，则：</p><p>$$<br>y=f[g(x)],x \in D<br>$$</p><p>表示函数$u=g(x)$和函数$y=f(u)$构成的复合函数，定义域为$D_g$，$u$称为中间变量。常记为：$f \circ g$</p><h4 id="初等函数"><a href="#初等函数" class="headerlink" title="初等函数"></a>初等函数</h4><ol><li><p>幂函数 $y=x^\mu(\mu \in \mathbb{R})$</p></li><li><p>指数函数 $y=a^x(a&gt;0,a \neq 1)$</p></li><li><p>对数函数 $y=log_a x(a&gt;0,a \neq 1)$</p></li><li><p>三角函数 $\sin \theta, \cos \theta, \tan \theta, \cot \theta, \sec \theta, \mathrm{cec} \theta$</p></li><li><p>反三角函数</p><table><thead><tr><th align="center">函数</th><th align="center">定义域</th><th align="center">值域</th></tr></thead><tbody><tr><td align="center">$y=\arcsin x$</td><td align="center">$[-1,1]$</td><td align="center">$[-\frac{\pi}{2},\frac{\pi}{2}]$</td></tr><tr><td align="center">$y=\arccos x$</td><td align="center">$[-1,1]$</td><td align="center">$[0,\pi]$</td></tr><tr><td align="center">$y=\arctan x$</td><td align="center">$(-\infty,+\infty)$</td><td align="center">$(-\frac{\pi}{2},\frac{\pi}{2})$</td></tr><tr><td align="center">$y=\mathrm{arc}\cot x$</td><td align="center">$(-\infty,+\infty)$</td><td align="center">$(0,\pi)$</td></tr></tbody></table></li><li><p>双曲函数：</p><ul><li>双曲正弦 $\mathrm{sh}\ x = \frac{e^x - e^{-x}}{2}$</li><li>双曲余弦 $\mathrm{ch}\ x=\frac{e^x+e^{-x}}{2}$</li><li>双曲正切 $\mathrm{th}\ x=\frac{\mathrm{sh}\ x}{\mathrm{ch}\ x}=\frac{e^x-e^{-x}}{e^x+e^{-x}}$</li></ul></li><li><p>反双曲函数：</p><ul><li>反双曲正弦 $y = \mathrm{arsh}\ x$</li><li>反双曲余弦 $y = \mathrm{arch}\ x$</li><li>反双曲正切 $y = \mathrm{arth}\ x$</li></ul></li></ol><h3 id="1-2-数列的极限"><a href="#1-2-数列的极限" class="headerlink" title="1.2 数列的极限"></a>1.2 数列的极限</h3><h4 id="数列"><a href="#数列" class="headerlink" title="数列"></a>数列</h4><ol><li>数列${x_n}$的子数列${x_{n_k}}$表示在原数列中抽取无限多项，并保持这些项在原数列中的次序。</li></ol><h4 id="数列的极限"><a href="#数列的极限" class="headerlink" title="数列的极限"></a>数列的极限</h4><ol><li><p>数列的取值无限接近一个常数$a$，若$a$存在，则$a$是数列${x_n}$的极限，或称数列${x_n}$收敛于$a$，记作：$\lim\limits_{n \to \infty} {x_n} = a$. 如果$a$不存在，则称数列${x_n}$是发散的。</p></li><li><p>定义 1:设为${x_n}$实数数列，$a$为常数。如果对于$\forall \varepsilon &gt; 0$（不论它多么小），$\exists N \in \mathbb{Z^*}$，使得对于$n &gt; N$时 ，不等式<br>$$<br>\mid x_n - a \mid &lt; \varepsilon<br>$$<br>都成立，则称常数$a$是数列${x_n}$的极限，或称数列${x_n}$收敛于$a$，记为：<br>$$<br>\lim\limits_{n\to \infty} x_n=a \<br>x_n \to a\ (n\to \infty)<br>$$</p></li></ol><h4 id="数列极限的性质"><a href="#数列极限的性质" class="headerlink" title="数列极限的性质"></a>数列极限的性质</h4><ol><li><p>定理 1:（极限的唯一性） 数列${x_n}$不能收敛于两个不同的极限。</p></li><li><p>定理 2:（收敛数列的有界性） 如果数列${x_n}$收敛，那么数列${x_n}$一定有界。</p></li><li><p>定理 3:（收敛数列的保号性） 如果$\lim\limits_{n \to \infty}{x_n}=a$，且$a&gt;0 \ (a&lt;0)$，那么存在正整数$N$，使得当$n&gt;N$时，${x_n}&gt;0 \ ({x_n}&lt;0)$</p><ul><li>推论：如果数列${x_n}$从某项起有$x_n \geqslant 0$或$x_n \leqslant 0$，且$\lim\limits_{n\to \infty} = a$，那么$a \geqslant 0$或$a\leqslant 0$</li></ul></li><li><p>定理 4:（收敛数列与其子数列间的关系） 如果数列${x_n}$收敛于$a$，那么它的任一子数列也收敛于$a$。</p></li></ol><h3 id="1-3-函数的极限"><a href="#1-3-函数的极限" class="headerlink" title="1.3 函数的极限"></a>1.3 函数的极限</h3><ol><li><p>定义 1: 函数当自变量趋于有限值时的极限定义：设函数$f(x)$在去心领域$\mathring U(x_0,\delta)$有定义，如果$\exists A$，对于给定$\forall \varepsilon &gt; 0$（无论多么小），$\exists \delta &gt; 0$，使得当$x$满足不等式$0 &lt; \mid x-x_0 \mid &lt; \delta$时，对应的函数值$f(x)$都满足不等式</p><p>$$<br>\mid f(x) - A \mid &lt; \varepsilon<br>$$</p><p>那么常数$A$就叫做函数$f(x)$当$x \to x_0$时的极限，记为</p><p>$$<br>\lim\limits_{x \to x_0}{f(x)} = A \ or \<br>f(x) \to A \ (当 \ x \to x_0)<br>$$</p><blockquote><p>$f(x)$在$x_0$处的极限和$f(x)$在$x_0$处的定义无关，甚至$f(x)$可以没有定义。</p></blockquote></li><li><p>单侧极限:</p><p>$$<br>\lim\limits_{x \to x_0^-}{f(x)} = A \ \Leftrightarrow \ f(x_0^-) = A<br>$$</p><p>$$<br>\lim\limits_{x \to x_0^+}{f(x)} = A \  \Leftrightarrow \ f(x_0^+) = A<br>$$</p></li><li><p>可以得到：$\lim\limits_{x \to x_0}{f(x)} = A \Leftrightarrow \lim\limits_{x \to x_0^-}{f(x)} =A \quad &amp;&amp; \quad \lim\limits_{x \to x_0^+}{f(x)} = A$</p></li><li><p>定义 3：函数当自变量趋于无限时的极限：设$f(x)$当$\mid x \mid$大于某一正数时有定义，如果$\exists A$，对于$\forall \varepsilon &gt; 0$，$\exists M &gt; 0$，使得当$x$满足不等式$\mid x \mid &gt; M$时，满足<br>$$<br>\mid f(x) -A \mid &lt; \varepsilon<br>$$<br>则常数$A$叫做函数$f(x)$当$x \to \infty$时的极限。</p></li></ol><blockquote><p>如果有$\lim\limits_{x \to +\infty}{f(x)} = L \ or \ \lim\limits_{x \to -\infty}{f(x)} = L$，则直线$y=L$称为函数$y=f(x)$的图形的<strong>水平渐近线</strong>.</p></blockquote><h4 id="函数极限的性质"><a href="#函数极限的性质" class="headerlink" title="函数极限的性质"></a>函数极限的性质</h4><ol><li><p>定理 1:（唯一性） 如果极限$\lim\limits_{x \to x_0}{f(x)}$存在，那么这个极限是惟一的。</p></li><li><p>定理 2:（函数极限的局部有界性） 如果$\lim\limits_{x \to x_0}{f(x)}=A$，那么$\exists \delta &gt; 0,B&gt;0$，使得当$0 &lt; \mid x - x_0 \mid &lt; \delta$时，有$\mid f(x) \mid \leqslant B$.</p></li><li><p>定理 3:（函数极限的局部保号性） 如果$\lim\limits_{x \to x_0}{f(x)} = A$，而且$A &gt; 0 (or A &lt; 0)$，那么$\exists \delta &gt; 0$，使当$0 &lt; \mid x -x_0 \mid &lt; \delta$时，有$f(x)&gt;0(or \ f(x) &lt; 0)$.</p><blockquote><p>推论 1:如果$\lim\limits_{x \to x_o}{f(x)}=A(A \neq 0)$，那么存在$x_0$的某一去心邻域$\mathring U(x_0)$，当$x \in \mathring U(x_0)$时有$\mid f(x)\mid &gt; \frac{1}{2}\mid A \mid$.</p><p>推论 2:如果在$x_0$的某一去心邻域内$f(x) \geqslant 0(or \ f(x) \leqslant 0)$，而且$\lim\limits_{x \to x_0}{f(x)} = A$，那么$A \geqslant 0(or \ A \leqslant 0)$.</p></blockquote></li><li><p>定理 4：（函数极限与数列极限的关系）如果极限$\lim\limits_{x\to x_0}f(x)$存在，$|x_n|$为函数$f(x)$的定义域内任一收敛于$x_0$的数列，且满足：$x_n \neq x_0\ (n \in \mathbb{N}<em>+)$，那么相应的函数值数列${f(x_n)}$必收敛，且$\lim\limits</em>{n\to \infty}f(x_n)=\lim\limits_{x\to x_0}f(x)$.</p></li></ol><h3 id="1-4-无穷大与无穷小"><a href="#1-4-无穷大与无穷小" class="headerlink" title="1.4 无穷大与无穷小"></a>1.4 无穷大与无穷小</h3><h4 id="无穷小"><a href="#无穷小" class="headerlink" title="无穷小"></a>无穷小</h4><ol><li><p>定义 1:如果函数$f(x)$当$x \to x_0(or \ x \to \infty)$时以零为极限，则称$f(x)$是当$x \to x_0(or \ x \to \infty)$时的无穷小。</p><p>特别地，以零为极限的数列${x_n}$称为$n\to \infty$时的无穷小</p></li><li><p>定理 1:在自变量$x \to x_0(or \ x \to \infty)$的过程中，函数$f(x)$具有极限$A$的充分必要条件是$f(x)=A+\alpha$，其中$\alpha$是当$x \to x_0(or \ x \to \infty)$的无穷小。</p></li><li><p>定理 2:有限个无穷小的和仍然是无穷小。</p></li><li><p>定理 3:有界函数与无穷小的乘积是无穷小。</p></li></ol><blockquote><p>推论 1：常数与无穷小的乘积是无穷小</p><p>推论 2：有限个无穷小的乘积也是无穷小</p></blockquote><h4 id="无穷大"><a href="#无穷大" class="headerlink" title="无穷大"></a>无穷大</h4><ol><li>定义 2: 设函数$f(x)$在某个去心邻域内（或当$\mid x \mid$充分大时）有定义，如果对$\forall B(however \ great \ B \ is)$，都存在$\delta &gt; 0(or \ \exists M &gt; 0)$，使得当$0 &lt; \mid x - x_0 \mid &lt; \delta(or \ \mid x \mid &gt; M)$时有<br>$$<br>\mid f(x) \mid &gt;B<br>$$<br>成立，则称$f(x)$是当$x \to x_0(or \ x \to \infty)$时的无穷大。<blockquote><p>如果函数$f(x)$是无穷大，那么$f(x)$的极限是不存在的。<br>也称“函数的极限是无穷大”</p></blockquote></li></ol><h4 id="无穷大与无穷小之间的关系"><a href="#无穷大与无穷小之间的关系" class="headerlink" title="无穷大与无穷小之间的关系"></a>无穷大与无穷小之间的关系</h4><ol><li>定理 4:在自变量的同一变化过程中，如果$f(x)$为无穷大，则$\frac{1}{f(x)}$为无穷小；反之…。</li><li>定义 3:如果函数$f(x)$满足$\lim\limits_{x \to x_0^-}{f(x)}=\infty \ or \ \lim\limits_{x \to x_0^+}{f(x)}=\infty$，则称直线$x=x_0$是函数$f(x)$的图形的一条<strong>铅直渐近线</strong>。</li></ol><h3 id="1-5-极限运算法则"><a href="#1-5-极限运算法则" class="headerlink" title="1.5 极限运算法则"></a>1.5 极限运算法则</h3><ol><li><p>定理 1:如果在自变量同一变化的过程中，$\lim{f(x)}=A,\lim{g(x)}=B$，那么：</p><ul><li><p>$\lim{[f(x) \pm g(x)]} = \lim{f(x)} \pm \lim{g(x)} = A \pm B$</p><blockquote><p>有限个无穷小的和是无穷小</p></blockquote></li><li><p>$\lim{[f(x) \cdot g(x)]} = \lim{f(x)} \cdot \lim{g(x)} = A \cdot B$ - $\lim{\frac{f(x)}{g(x)}} = \frac{\lim{f(x)}}{\lim{g(x)}} = \frac{A}{B}(B \neq 0)$</p><blockquote><p>有界函数与无穷小的乘积是无穷小；</p><p>常数与无穷小的乘积是无穷小；</p><p>有限个无穷小的乘积是无穷小；</p></blockquote></li><li><p>若有$B \neq 0$，$\lim\frac{f(x)}{g(x)}=\frac{\lim f(x)}{\lim g(x)}=\frac{A}{B}$</p><blockquote><p>推论 1:如果$\lim{f(x)}$存在，而$c$为常数，则$$\lim{[cf(x)]} = c\lim{f(x)}$$<br>推论 2:如果$\lim{f(x)}$存在，而$n \in \mathbb{Z^*}$，则$$\lim{[f(x)]^n} = [\lim{f(x)}]^n$$</p></blockquote></li></ul></li><li><p>定理 2:设有数列${x_n}$和${y_n}$，如果：</p><p>$$<br>\lim\limits_{n \to \infty}{x_n} = A,<br>\lim\limits_{n \to \infty}{y_n} = B,<br>$$</p><p>那么:</p><ul><li>$\lim\limits_{n \to \infty}{(x_n + y_n)} = A \pm B;$</li><li>$\lim\limits_{n \to \infty}{(x_n \cdot y_n)} = A \cdot B$</li><li>当$y_n \neq 0(n=1,2,\cdots)$且$B \neq 0$时，$\lim\limits_{n \to \infty}{\frac{x_n}{y_n}}=\frac{A}{B}.$</li></ul></li><li><p>定理 3:如果$\varphi(x) \geqslant \psi(x)$，而$\lim \varphi(x)=A,\ \lim\psi(x)=B$，那么$A \geqslant B$。</p></li><li><p>定理 4:（复合函数的极限运算法则） 设复合函数$y=f[g(x)]$（有定义）。若$\lim\limits_{x \to x_0}{g(x)} = u_0, \lim\limits_{u \to u_0}{f(u)} = A$，且在$x_0$的某去心邻域内$g(x) \neq u_0$，则<br>$$<br>\lim\limits_{x \to x_0}{f[g(x)]} = \lim\limits_{u \to u_0}{f(u)} = A<br>$$</p></li></ol><h3 id="1-6-极限存在准则-两个重要极限"><a href="#1-6-极限存在准则-两个重要极限" class="headerlink" title="1.6 极限存在准则 两个重要极限"></a>1.6 极限存在准则 两个重要极限</h3><h4 id="夹逼准则"><a href="#夹逼准则" class="headerlink" title="夹逼准则"></a>夹逼准则</h4><p>如果数列${x_n},\ {y_n},\ {z_n}$满足以下条件：</p><ol><li>从某项起，即$\forall n_0 \in \mathbb{N}_+$，当$n&gt;n_0$时有：$y_n \leqslant x_n \leqslant z_n$</li><li>$\lim\limits_{n\to \infty}y_n=a,\ \lim\limits_{n\to \infty}z_n=a$</li></ol><p>那么数列${x_n}$的极限存在，且$\lim\limits_{n\to\infty}x_n=a$。</p><p>如果函数$f(x),g(x),h(x)$满足下列条件：</p><ul><li>在$x_0$的某一去心邻域内$x_0\in\mathring U(x_0,\ r)$，或者$|x|&gt;M$时： $g(x) \leqslant f(x) \leqslant h(x);$</li><li>$\lim\limits_{x \to x_0}{g(x)} = A,\lim\limits_{x \to x_0}{h(x)} = A.$</li></ul><p>那么$\lim\limits_{x \to x_0}{f(x)}$存在，且$\lim\limits_{x \to x_0}{f(x)} = A.$</p><p>定理 2:单调有界函数必有极限。</p><h4 id="柯西极限存在准则"><a href="#柯西极限存在准则" class="headerlink" title="柯西极限存在准则"></a>柯西极限存在准则</h4><p>（柯西收敛原理）数列${x_n}$收敛的充分必要条件是：对于任意给定的正数$\epsilon$，存在正整数$N$，使得当$m&gt;N,\ n&gt;N$时有：</p><p>$$<br>|x_n-x_m| &lt; \epsilon<br>$$</p><h4 id="重要极限"><a href="#重要极限" class="headerlink" title="重要极限"></a>重要极限</h4><ol><li><p>$\lim\limits_{x \to 0}{\frac{\sin x}{x}}=1$</p></li><li><p>$\lim\limits_{x \to \infty}{\left(1+\frac{1}{x}\right)^x} = e$ 另一种形式： $\lim\limits_{z \to 0}{(1+z)^\frac{1}{z}} = \lim\limits_{x \to \infty}{(1+\frac{1}{x})^x} = e$</p></li><li><p>如果$\lim{f(x)} = A,\lim{g(x)} = B$，那么<br>$$<br>\lim{[f(x)]^{g(x)}} = A^B<br>$$</p></li></ol><h3 id="1-7-无穷小的比较"><a href="#1-7-无穷小的比较" class="headerlink" title="1.7 无穷小的比较"></a>1.7 无穷小的比较</h3><ol><li><p>定义 1:设$\alpha,\beta$是自变量在同一变化过程中的无穷小，且$\beta \neq 0,\lim{\frac{\alpha}{\beta}}$也是在同一过程中的极限。</p><ul><li>如果$\lim{\frac{\alpha}{\beta}} = 0$，则称$\alpha$是比$\beta$高阶的无穷小，记作$\alpha = o(\beta)$；</li><li>如果$\lim{\frac{\alpha}{\beta}} = \infty$，则称$\alpha$是比$\beta$低阶的无穷小；</li><li>如果$\lim{\frac{\alpha}{\beta}} = c \neq 0$，则称$\alpha$是比$\beta$同阶无穷小；</li><li>如果$\lim{\frac{\alpha}{\beta^k}} = c \neq 0,k &gt; 0$，则称$\alpha$是关于$\beta$的$k$阶无穷小；</li><li>如果$\lim{\frac{\alpha}{\beta}} = 1$，则称$\alpha$与$\beta$是等价无穷小，记作$\alpha \sim \beta$</li></ul><p>等价无穷小是同阶无穷小的特殊情形：$c=1$</p></li><li><p>定理 1:$\alpha$与$\beta$是等价无穷小的充分必要条件为$\alpha = \beta + o(\beta)$.</p></li><li><p>定理 2:若$\alpha \sim \alpha’$，且$\beta \sim \beta’$，则：</p><p>$$<br>\lim{\frac{\alpha}{\beta}} = \lim{\frac{\alpha^\prime}{\beta^\prime}}.<br>$$</p></li><li><p>求两个无穷小之比时，分子及分母都可用等价无穷小来代替，从而简化计算。</p></li><li><p>几个等价无穷小：</p></li></ol><ul><li><p>$x \to 0$时：</p><p>$\sin x \sim x,\ \tan x \sim x,\ \arcsin x \sim x,\ 1-\cos x \sim \frac{1}{2}x^2,\ \arctan x \sim x,\ \ln(1+x) \sim x,\ e^x -1 \sim x,\ \sqrt[n]{1+x}-1 \sim \frac{1}{n}x.$</p></li></ul><h3 id="1-8-函数的连续性与间断点"><a href="#1-8-函数的连续性与间断点" class="headerlink" title="1.8 函数的连续性与间断点"></a>1.8 函数的连续性与间断点</h3><h4 id="函数的连续性"><a href="#函数的连续性" class="headerlink" title="函数的连续性"></a>函数的连续性</h4><ol><li><p>定义 1:$\lim\limits_{x \to x_0}{f(x)} = f(x_0)$。包含了三个含义：</p><ul><li>$y=f(x)$在点$x_0$处有定义；</li><li>$y=f(x)$在点$x_0$处极限存在；</li><li>$\lim\limits_{x \to x_0}{f(x)} = f(x_0)$ 极限值等于函数值。</li></ul></li><li><p>多项式函数、有理函数在定义域内每一点都是连续的。</p></li><li><p>定义 2:设$y=f(x)$在$\mathring U(x_0)$有定义，若当$\Delta x \to 0$时有$\Delta y \to 0$，</p><p>$$<br>\lim\limits_{\Delta x \to 0}{y} = 0 \quad or \quad<br>\lim\limits_{\Delta x \to 0}{[f(x_0+\Delta x)-f(x_0)]} = 0<br>$$</p><p>就称$f(x)$在点$x_0$处连续。</p><blockquote><p>对于函数$y=\sin x$在区间$(-\infty,+\infty)$内：</p><p>在任意一点$x_0$处有</p><p>$$<br>0 &lt; \mid sinx-sinx_0 \mid =<br>2 \left | cos\frac{x+x_0}{2} \right | \left | sin\frac{x-x_0}{2} \right |<br>\leqslant \mid x - x_0 \mid<br>$$</p></blockquote></li><li><p>如果$\lim\limits_{x\to x_0}f(x)=f(x_0^-)$存在且等于$f(x_0)$，即：$f(x_0^-)=f(x_0)$。那么说函数$f(x)$在点$x_0$左连续。</p></li><li><p>如果$\lim\limits_{x\to x_0}f(x)=f(x_0^+)$存在且等于$f(x_0)$，即：$f(x_0^+)=f(x_0)$。那么说函数$f(x)$在点$x_0$右连续。</p></li><li><p>定理 1:$y=f(x)$在点$x_0$连续的充分必要条件是$y=f(x)$在点$x_0$既<strong>左连续</strong>，又<strong>右连续</strong>。连续函数的图形是一条不间断的曲线。</p></li></ol><h4 id="函数的间断点"><a href="#函数的间断点" class="headerlink" title="函数的间断点"></a>函数的间断点</h4><p>设函数$f(x)$在点$x_0$的某去心领域内有定义，在此前提下，如果有以下三种情形之一：</p><ol><li>在$x=x_0$没有定义</li><li>虽在$x=x_0$处有定义，但$\lim\limits_{x\to x_0}f(x)$不存在</li><li>虽在$x=x_0$处有定义，且$\lim\limits_{x\to x_0}f(x)$存在，但$\lim\limits_{x\to x_0}f(x) \neq f(x_0)$</li></ol><p>那么函数$f(x)$在点$x_0$为不连续，而点$x_0$称为函数的<strong>不连续点</strong>或<strong>间断点</strong>。</p><p>常见间断点的类型：</p><ol><li>第一类间断点：左极限、右极限都存在。<ul><li>可去间断点：$e.g:f(x)=\frac{\sin x}{x},x=0;\ \lim\limits_{x \to 0}{\frac{\sin x}{x}} = 1.$</li><li>跳跃间断点：$e.g.:f(x) = \begin{cases} x + 1, &amp; x &lt; 1 \ x, &amp; x \geqslant 1 \end{cases}; \ \lim\limits_{x \to 1^-}{f(x)}=2, \ \lim\limits_{x \to 1}{f(x)=1.}$</li></ul></li><li>第二类间断点：左极限、右极限不都存在（非第一类间断点）。<ul><li>无穷间断点：$e.g.:f(x)=\frac{1}{x^2}; \ \lim\limits_{x \to 0}{f(x)}=\infty.$</li><li>震荡间断点：$e.g.:f(x)=\sin \frac{1}{x}; \ \lim\limits_{x \to 0}{f(x)} \in [-1,1].$</li></ul></li></ol><h3 id="1-9-连续函数的运算与初等函数的连续性"><a href="#1-9-连续函数的运算与初等函数的连续性" class="headerlink" title="1.9 连续函数的运算与初等函数的连续性"></a>1.9 连续函数的运算与初等函数的连续性</h3><h4 id="连续函数的和、差、积、商的连续性"><a href="#连续函数的和、差、积、商的连续性" class="headerlink" title="连续函数的和、差、积、商的连续性"></a>连续函数的和、差、积、商的连续性</h4><p>若函数$f(x),g(x)$都在点$x_0$处连续，则函数$f(x) \pm g(x),f(x) \cdot g(x),\frac{f(x)}{g(x)}(g(x_0) \neq 0)$也在$x_0$处连续。</p><h4 id="反函数与复合函数的连续性"><a href="#反函数与复合函数的连续性" class="headerlink" title="反函数与复合函数的连续性"></a>反函数与复合函数的连续性</h4><p>如果函数$y=f(x)$在某个区间上单调增加（或单调减少）且连续，那么它的<strong>反函数</strong>$x=f^{-1}(y)$也在相应的区间上单调增加（或单调减少）且连续。</p><p>设函数$u=\varphi(x)$在点$x_0$处连续且$\varphi(x)=u_0$，而函数$y=f(u)$在点$u_0$处连续，则复合函数$y=f[\varphi(x)]$在点 $x_0$处也连续；</p><p>$$<br>y = f[\varphi(x)],\ \mathring U (x_0)\subset D_{f\circ\varphi},\ \lim\limits_{x\to x_0}\varphi(x)=u_0,\quad y=f(u)在u=u_0连续\<br>\lim\limits_{x\to x_0}f[\varphi(x)]=\lim\limits_{u\to u_0}f(u)=f(u_0)<br>$$</p><h4 id="初等函数的连续性"><a href="#初等函数的连续性" class="headerlink" title="初等函数的连续性"></a>初等函数的连续性</h4><p>基本初等函数在它们的定义区间内都是连续的。</p><blockquote><p>对于形如$u(x)^{v(x)}\quad (u(x)&gt;0,\ u(x) \not\equiv 1)$的函数，称为幂指函数，如果：</p><p>$$<br>\lim u(x)=a &gt; 0,\ \lim v(x)=b<br>$$</p><p>那么：</p><p>$$<br>\lim u(x)^{v(x)}=a^b<br>$$</p></blockquote><h3 id="1-10-闭区间上连续函数的性质"><a href="#1-10-闭区间上连续函数的性质" class="headerlink" title="1.10 闭区间上连续函数的性质"></a>1.10 闭区间上连续函数的性质</h3><h4 id="有界性与最大值和最小值定理"><a href="#有界性与最大值和最小值定理" class="headerlink" title="有界性与最大值和最小值定理"></a>有界性与最大值和最小值定理</h4><p>定理 1:（有界性与最大值和最小值定理） 闭区间上的连续函数在该区间上有界且一定存在<strong>最大值</strong>和最小值。</p><p>如果函数在开区间内连续，或函数在闭区间上有间断点，那么函数在该区间上不一定有界，也不一定有最大值最小值。(e.g. $y=\tan x$)</p><h4 id="零点定理和介值定理"><a href="#零点定理和介值定理" class="headerlink" title="零点定理和介值定理"></a>零点定理和介值定理</h4><p>如果$x_0$使$f(x_0)=0$，那么$x_0$称为函数$f(x)$的<strong>零点</strong>。（零点不是<strong>点</strong>）</p><p>（零点定理） 设函数$f(x)$在闭区间$[a,b]$上连续且$f(a)$与$f(b)$异号，那么在开区间$(a,b)$内至少有一点$\xi(a&lt;\xi &lt;b)$，使$f(\xi)=0.$</p><p>（介值定理） 设函数$f(x)$在闭区间$[a,b]$上连续，并且在区间端点取不同的函数值$f(a)=A,f(b)=B$，那么对于$A$和$B$之间的任意一个数$W$ ，在开区间$(a,b)$内至少存在一个点$\xi$，使得$f(\xi)=W.\ (a&lt;\xi&lt;b)$</p><blockquote><p>推论：在闭区间上连续的函数必能够取到介于最大值$M$与最小值$m$之间的任何值。</p></blockquote><h4 id="一致连续性"><a href="#一致连续性" class="headerlink" title="一致连续性"></a>一致连续性</h4><p>设函数$f(x)$在区间$I$上有定义，如果对于任一给定的正数$\varepsilon$，总存在正数$\delta$，使得对于区间$I$上的任意两点$x_1,\ x_2$，当$|x_1 - x_2| &lt; \delta$，时有：</p><p>$$<br>|f(x_1) - f(x_2)| &lt; \varepsilon<br>$$</p><p>那么称函数$f(x)$在区间$I$上一致连续。</p><p>（一致连续性定理）如果函数$f(x)$在闭区间$[a,\ b]$上连续，那么它在该区间上一致连续。</p><h3 id="1-10-1-求极限的方法总结"><a href="#1-10-1-求极限的方法总结" class="headerlink" title="1.10-1 求极限的方法总结"></a>1.10-1 求极限的方法总结</h3><h4 id="定义法"><a href="#定义法" class="headerlink" title="定义法"></a>定义法</h4><p>$$<br>\lim\limits_{x \to x_0}{f(x)} = A \Leftrightarrow<br>\forall \epsilon &gt; 0 ,\exists \delta &gt; 0, 当0&lt;\mid x-x_0\mid &lt; \delta, 总有\mid f(x) - A \mid &lt; \epsilon<br>$$</p><p>$$<br>\lim\limits_{x\to \infty}{f(x)}=A \Leftrightarrow \forall\epsilon&gt;0,\exists X&gt;0<br>当 \mid x \mid &gt;X 时, 总有\mid f(x)-A\mid &lt;\epsilon<br>$$</p><h4 id="夹逼定理"><a href="#夹逼定理" class="headerlink" title="夹逼定理"></a>夹逼定理</h4><ol><li>设在点$x_0$的某领域内（或$\mid x\mid&gt;M$），有$g(x)\leqslant f(x)\leqslant h(x)$，且$\lim g(x)=A,\lim h(x)=A$，那么$\lim f(x)$存在且等于$A$。</li><li>单调有界函数必有极限。</li></ol><h4 id="无穷小量的代换"><a href="#无穷小量的代换" class="headerlink" title="无穷小量的代换"></a>无穷小量的代换</h4><table><thead><tr><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">$\sin x \sim x$</td><td align="center">$\tan x \sim x$</td></tr><tr><td align="center">$\arcsin x \sim x$</td><td align="center">$1-\cos x \sim \frac{1}{2}x^2$</td></tr><tr><td align="center">$(1+x)^\lambda -1 \sim \lambda x$</td><td align="center">$\arctan x \sim x$</td></tr><tr><td align="center">$\ln(1+x)\sim x$</td><td align="center">$e^x -1 \sim x$</td></tr></tbody></table><h4 id="函数的连续"><a href="#函数的连续" class="headerlink" title="函数的连续"></a>函数的连续</h4><p>若函数在$U(x_0)$处连续，则$\lim\limits_{x\to x_0}{f(x)}=f(x_0)$</p><h4 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h4><p>对于$\frac{0}{0}$和$\frac{\infty}{\infty}$未定式使用合适的变换后分子分母求导</p><h4 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h4><table><thead><tr><th align="center">常用函数的麦克劳林公式</th></tr></thead><tbody><tr><td align="center">$e^x=1+x+\frac{x^2}{2!}+\cdots+\frac{x^n}{n!}+o(x^n)$</td></tr><tr><td align="center">$\sin x=x-\frac{x^3}{3!}+\frac{x^5}{5!}+\cdots +(-1)^n\frac{x^{2n+1}}{(2n+1)!}+o(x^{2n+1})$</td></tr><tr><td align="center">$\cos x=1-\frac{x^2}{2!}+\frac{x^4}{4!}+\cdots +(-1)^n\frac{x^{2n}}{(2n)!}+o(x^n)$</td></tr><tr><td align="center">$\ln(1+x)=x-\frac{x^2}{2}+\frac{x^3}{3}+\cdots +(-1)^{n-1}\frac{x^n}{n}+o(x^n)$</td></tr><tr><td align="center">$\frac{1}{1-x}=1+x+x^2+\cdots +x^n+o(x^n)$</td></tr><tr><td align="center">$(1+x)^\alpha=1+\alpha x+\frac{\alpha(\alpha -1)}{2!}x^2+\cdots +\frac{\alpha(\alpha - 1)\cdots (\alpha -n+1)}{n!}x^n+o(x^n)$</td></tr></tbody></table><hr><h2 id="二-导数与微分"><a href="#二-导数与微分" class="headerlink" title="二. 导数与微分"></a>二. 导数与微分</h2><h3 id="2-1-导数的概念"><a href="#2-1-导数的概念" class="headerlink" title="2.1 导数的概念"></a>2.1 导数的概念</h3><h4 id="导数的概念"><a href="#导数的概念" class="headerlink" title="导数的概念"></a>导数的概念</h4><p>定义：函数$y=f(x)$在点$x_0$的某个领域内有定义，当自变量在$x_0$处取得增量$\Delta x$，相应地因变量取得增量$\Delta y=f(x_0+\Delta x)-f(x_0)$，如果$\Delta y$与$\Delta x$之比当$\Delta x \to 0$时的极限存在，那么称函数$f(x)$在点$x_0$处可导，这个极限为在这点的导数，记为：$f’(x_0)$，即：</p><p>$$<br>F^\prime(x_0) = \lim\limits_{\Delta x \to 0}{\frac{\Delta y}{\Delta x}} = \lim\limits_{\Delta x \to 0}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}<br>$$</p><p>也可以记作：</p><p>$$<br>y’\vert_{x=x_0}, \ \frac{\mathrm{d}y}{\mathrm{d}x}\vert_{x=x_0},\ \frac{\mathrm{d}f(x)}{\mathrm{d}x}\vert_{x=x_0}<br>$$</p><blockquote><p>$y’$记号来自牛顿，$\frac{\mathrm{d}y}{\mathrm{d}x}$记号来自莱布尼兹。</p></blockquote><p>如果函数$y=f(x)$在开区间$I$内每点处都可导，那么就称函数$f(x)$在开区间$I$内可导。$f(x)$的导函数$y’,\ f’(x),\ \frac{\mathrm{d}y}{\mathrm{d}x},\ \frac{\mathrm{d}f(x)}{\mathrm{d}x}$。</p><p>导数的几何意义：曲线$y=f(x)$在点$M(x_0, f(x_0))$处的切线方程为：$y-y_0=f’(x_0)(x-x_0)$</p><h4 id="单侧导数"><a href="#单侧导数" class="headerlink" title="单侧导数"></a>单侧导数</h4><ol><li>定义：设函数$y=f(x)$在$U(x_0)$有定义，左导数：<br>$$<br>f^\prime_{-}(x_0) = \lim\limits_{\Delta x \to 0^{-}}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}<br>$$<br>右导数：<br>$$<br>f^\prime_{+}(x_0) = \lim\limits_{\Delta x \to 0^{+}}{\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}}<br>$$<br>如果函数$f(x)$在开区间$(a,\ b)$内可导，且$f’<em>+(a),\ f’</em>-(b)$都存在，那么：$f(x)$在闭区间$[a,\ b]$上可导。</li></ol><h4 id="函数可导性与连续性的关系"><a href="#函数可导性与连续性的关系" class="headerlink" title="函数可导性与连续性的关系"></a>函数可导性与连续性的关系</h4><p>函数$f(x)$在点$x_0$处可导的充分必要条件是：左右导数存在且相等。</p><p>如果函数$f(x)$在$x_0$处可导，则$f(x)$在$x_0$处连续。</p><p>函数在某点连续是函数在该点可导的必要条件，但不是充分条件。</p><h3 id="2-2-导数的运算法则及基本公式"><a href="#2-2-导数的运算法则及基本公式" class="headerlink" title="2.2 导数的运算法则及基本公式"></a>2.2 导数的运算法则及基本公式</h3><h4 id="导数的运算法则"><a href="#导数的运算法则" class="headerlink" title="导数的运算法则"></a>导数的运算法则</h4><p>如果函数$u=u(x)$及$v=v(x)$都在点$x$处可导，那么：</p><ul><li>$[u(x) \pm v(x)]’ = u’(x) \pm v’(x)$</li><li>$[u(x) v(x)]’ = u’(x)v(x)+u(x)v’(x)$</li><li>$\left[\frac{u(x)}{v(x)} \right]’ = \frac{u’(x)v(x)-u(x)v’(x)}{v^2(x)}(v(x) \neq 0)$</li><li>$(u+v-w)’=u’+v’-w’$</li><li>$(uvw)’=[(uv)w]’=(u’v+uv’)w+uvw’=u’vw+uv’w+uvw’$</li></ul><p>（反函数的求导）如果函数$x=f(y)$在区间$I_y$内单调、可导且$f’(y)\neq 0$，则它的反函数$y=f^{-1}(x)$在区间$I_x={x\mid x=f(y),y \in I_y}$内也可导，且</p><p>$$<br>[f^{-1}(x)]^\prime = \frac{1}{f^\prime(y)}<br>$$</p><blockquote><p>反函数的导数等于直接函数导数的倒数。</p></blockquote><p>（复合函数的求导）如果$u=g(x)$在点$x$可导，而$y=f(u)$在点$u=g(x)$可导，那么复合函数$y=f[g(x)]$在点$x$可导，其导数为：</p><p>$$<br>\frac{\mathrm{d}y}{\mathrm{d}x}=f’(u)\cdot g’(x)<br>$$</p><h4 id="运算公式"><a href="#运算公式" class="headerlink" title="运算公式"></a>运算公式</h4><ol><li><p>导数公式：</p><table><thead><tr><th align="left">L1</th><th align="left">L2</th></tr></thead><tbody><tr><td align="left">$C’=0;$</td><td align="left">$(x^\mu)’ = \mu x^{\mu -1};$</td></tr><tr><td align="left">$(\sin x)’=\cos x;$</td><td align="left">$(\cos x)’=-\sin x;$</td></tr><tr><td align="left">$(\tan x)’=\sec ^2x$</td><td align="left">$(\cot x)’=-\csc^2x$</td></tr><tr><td align="left">$(\sec x)’ = \sec x\tan x$</td><td align="left">$(\csc x)’=-\csc x\cot x$</td></tr><tr><td align="left">$(a^x)’=a^x\ln a$</td><td align="left">$(e^x)’=e^x$</td></tr><tr><td align="left">$(\log_a x)’=\frac{1}{x\ln a}$</td><td align="left">$(\ln x)’=\frac{1}{x}$</td></tr><tr><td align="left">$(\arcsin x)’=\frac{1}{\sqrt{1-x^2}}$</td><td align="left">$(\arccos x)’=-\frac{1}{\sqrt{1-x^2}}$</td></tr><tr><td align="left">$(\arctan x)’=\frac{1}{1+x^2}$</td><td align="left">$(\mathrm{arc}\cot x)’=-\frac{1}{1+x^2}$</td></tr><tr><td align="left">$(u \pm v)’ = u’\pm v’$</td><td align="left">$(Cu)’ = Cu’$</td></tr><tr><td align="left">$(uv)’ = u’ v+uv’$</td><td align="left">$\left(\frac{u}{v}\right)’=\frac{u’ v-uv’}{v^2}$</td></tr></tbody></table></li></ol><h3 id="2-3-高阶导数"><a href="#2-3-高阶导数" class="headerlink" title="2.3 高阶导数"></a>2.3 高阶导数</h3><p>定义：设函数$y=f(x)$的导函数在点$x$处可导，就称$y=f(x)$在点$x$处二阶可导，此导数称为二阶导数，记作$y^{“},f^{“}(x)$即：</p><p>$$<br>f^{\prime\prime}(x)=[f^\prime(x)]^\prime, \ \frac{\mathrm{d^2}y}{\mathrm{d}x^2}=\frac{\mathrm{d}}{\mathrm{d}x}\left(\frac{\mathrm{d}y}{\mathrm{d}x}\right)<br>$$</p><p>函数$y=f(x)$具有$n$阶导数，也说称函数$f(x)$为$n$阶可导，二阶与二阶以上的导数统称为高阶导数。</p><h4 id="常见高阶导数公式"><a href="#常见高阶导数公式" class="headerlink" title="常见高阶导数公式"></a>常见高阶导数公式</h4><ul><li>$(e^{kx})^{(n)}=k^ne^{kx}$</li><li>$(x^\mu)^{(n)}=\mu(\mu-1)(\mu-2)\cdots(\mu-n+1)x^{\mu-n}$</li><li>$(\sin x)^{(n)}=\sin (x+n\cdot\frac{\pi}{2})$</li><li>$(\cos x)^{(n)}=\cos (x+n\cdot\frac{\pi}{2})$</li><li>$[\ln(x+1)]^{(n)}=(-1)^{n-1} \frac{(n-1)!}{(x+1)^n}$</li><li>$(uv)^{(n)}=\sum\limits_{k=0}^{n}C_n^ku^{(n-k)}v^{(k)}$ （莱布尼兹公式）</li></ul><h3 id="2-4-隐函数与参数方程导数"><a href="#2-4-隐函数与参数方程导数" class="headerlink" title="2.4 隐函数与参数方程导数"></a>2.4 隐函数与参数方程导数</h3><h4 id="隐函数求导"><a href="#隐函数求导" class="headerlink" title="隐函数求导"></a>隐函数求导</h4><p>隐函数求导的基本方法：把方程$F(x,y)=0$中的$y$看作是$x$的函数，方程两端同时对$x$求导，然后解出$\frac{\mathrm{d}x}{\mathrm{d}y}.$</p><p>对数求导法：$e.g.:y=\sqrt{\frac{(x-1)(x-2)}{(x-3)(x-4)}}.$两边取对数:</p><p>$$<br>\ln y=\frac{1}{2}(\ln \mid x-1\mid + \ln \mid x-2 \mid-\ln \mid x-3 \mid-\ln \mid x-4 \mid)<br>$$</p><p>可以证明：$(\ln\mid x\mid)’=\frac{1}{x}$</p><h4 id="参数方程求导"><a href="#参数方程求导" class="headerlink" title="参数方程求导"></a>参数方程求导</h4><p>有参数方程：$\begin{equation}\left{\begin{aligned} x&amp;=\varphi(t)\ y&amp;=\psi(t) \end{aligned}\right.\end{equation}$</p><p>$$<br>\frac{\mathrm{d}y}{\mathrm{d}x}=\frac{\mathrm{d}y}{\mathrm{d}t}\cdot\frac{\mathrm{d}t}{\mathrm{d}x}=\frac{\frac{\mathrm{d}y}{\mathrm{d}t}}{\frac{\mathrm{d}x}{\mathrm{d}t}}<br>$$</p><h4 id="相关变化率"><a href="#相关变化率" class="headerlink" title="相关变化率"></a>相关变化率</h4><p>两个变量都与另一个变量相关:</p><ol><li>例：当金属圆盘在炉中加热时，圆盘半径$r$会随时间$t$增大，圆盘的面积$S$也会随着时间$t$增大，有：$S=\pi r^2$，方程两边同时对$t$求导，有：<br>$$<br>\frac{\mathrm{d}S}{\mathrm{d}t} = 2\pi r\frac{\mathrm{d}r}{\mathrm{d}t}<br>$$<br>上式$\frac{\mathrm{d}S}{\mathrm{d}t}$与$\frac{\mathrm{d}r}{\mathrm{d}t}$就是互相关联的变化率。</li></ol><h3 id="2-5-函数的微分"><a href="#2-5-函数的微分" class="headerlink" title="2.5 函数的微分"></a>2.5 函数的微分</h3><h4 id="微分的定义"><a href="#微分的定义" class="headerlink" title="微分的定义"></a>微分的定义</h4><p>设函数$y=f(x)$在某区间有定义，$x_0$及$x_0+\Delta x$在这区间内，如果函数的增量$\Delta y=f(x_0+\Delta x)-f(x)$可表示为：</p><p>$$<br>\Delta y=A\Delta x+o(\Delta x),<br>$$</p><p>就称函数$y=f(x)$在点$x_0$处是<strong>可微的</strong>，并称$A\Delta x$为函数$y=f(x)$在点$x_0$的<strong>微分</strong>，记作$\mathrm{d}y$，即：</p><p>$$<br>\mathrm{d}y=A\Delta x<br>$$</p><p>函数$f(x)$在任意点的微分，称为<strong>函数的微分</strong>，记作$\mathrm{d}y,\ \mathrm{d}f(x)$</p><p>同城通常把自变量$x$的增量$\Delta x$称为自变量的积分，记作$\mathrm{d}x$，于是函数的微分可记作：$\mathrm{d}y=f’(x)\mathrm{d}x$</p><p>定理：函数$f(x)$在点$x_0$可微的充分必要条件是函数$f(x)$在点$x_0$可导，且此时$\mathrm{d}y=f’ (x_0)\Delta x.$</p><p>函数的导数等于函数的微分$\mathrm{d}y$与自变量$\mathrm{d}x$的商：$\frac{\mathrm{d}y}{\mathrm{d}x}=f’(x).$因此，导数又称微商。</p><h4 id="微分的基本公式和运算法则"><a href="#微分的基本公式和运算法则" class="headerlink" title="微分的基本公式和运算法则"></a>微分的基本公式和运算法则</h4><table><thead><tr><th align="left">基本公式</th><th></th></tr></thead><tbody><tr><td align="left">$\mathrm{d}(x^\mu)=\mu x^{\mu-1}\mathrm{d}x$</td><td>$\mathrm{d}(\sin x)=\cos x\mathrm{d}x$</td></tr><tr><td align="left">$\mathrm{d}(\cos x)=-\sin x\mathrm{d}x$</td><td>$\mathrm{d}(\tan x)=\sec^2 x\mathrm{d}x$</td></tr><tr><td align="left">$\mathrm{d}(\cot x)=-\csc^2 x\mathrm{d}x$</td><td>$\mathrm{d}(\sec x)=\sec x\tan x \mathrm{d}x$</td></tr><tr><td align="left">$\mathrm{d}(\csc x)=-\csc x \cot x\mathrm{d}x$</td><td>$\mathrm{d}(a^x)=a^x\ln a\mathrm{d}x\ (a &gt; 0, a \neq 1)$</td></tr><tr><td align="left">$\mathrm{d}(e^x)=e^x\mathrm{d}x$</td><td>$\mathrm{d}(\log_a x)=\frac{1}{x\ln a}\mathrm{d}x\ (a&gt;0,a\neq 1)$</td></tr><tr><td align="left">$\mathrm{d}(\ln x)=\frac{1}{x}\mathrm{d}x$</td><td>$\mathrm{d}(\arcsin x)=\frac{1}{\sqrt{1-x^2}}\mathrm{d}x$</td></tr><tr><td align="left">$\mathrm{d}(\arccos x)=-\frac{1}{\sqrt{1-x^2}}\mathrm{d}x$</td><td>$\mathrm{d}(\arctan x)=\frac{1}{1+x^2}\mathrm{d}x$</td></tr><tr><td align="left">$\mathrm{d}(\arccot x)=-\frac{1}{1+x^2}\mathrm{d}x$</td><td></td></tr></tbody></table><table><thead><tr><th>运算法则</th><th></th></tr></thead><tbody><tr><td>$\mathrm{d}(u\pm v)=\mathrm{d}u\pm \mathrm{d}v$</td><td>$\mathrm{d}(Cu)=C\mathrm{d}u$</td></tr><tr><td>$\mathrm{d}(uv)=v\mathrm{d}u+u\mathrm{d}v$</td><td>$\mathrm{d}\left(\frac{u}{v}\right)=\frac{v\mathrm{d}u-u\mathrm{d}v}{v^2}$</td></tr></tbody></table><h4 id="复合函数的微分"><a href="#复合函数的微分" class="headerlink" title="复合函数的微分"></a>复合函数的微分</h4><p>复合函数的微分法则：无论$u$是自变量还是中间变量，微分形式$\mathrm{d}y=f’(u)\mathrm{d}u$保持不变。这一性质叫做<strong>微分形式不变性</strong>。例：$y=\sin(2x+1),\mathrm{d}y=?$</p><p>$$<br>\mathrm{let} \ u=2x+1;\ \mathrm{d}y=\mathrm{d}(\sin u)=\cos u\mathrm{d}u=\cos(2x+1)\mathrm{d}(2x+1) \ =\cos(2x+1)\cdot 2\mathrm{d}x=2\cos(2x+1)\mathrm{d}x<br>$$</p><h4 id="近似计算"><a href="#近似计算" class="headerlink" title="近似计算"></a>近似计算</h4><p>如果$y=f(x)$在点$x_0$处的导数$f’(x_0)\neq 0$，且$|\Delta x|$很小时，有：</p><p>$$<br>\Delta y \approx \mathrm{d}y=f’(x_0)\Delta x<br>$$</p><h4 id="误差估计"><a href="#误差估计" class="headerlink" title="误差估计"></a>误差估计</h4><p>如果某个量的精确值为$A$，它的近似值为$a$，那么$|A-a|$叫做$a$的<strong>绝对误差</strong>，而$\frac{|A-a|}{|a|}$叫做$a$的<strong>相对误差</strong>。又知道它的误差不超过$\delta_A$：</p><p>$$<br>\mid x-x_0\mid \leqslant \delta_A<br>$$</p><p>称$\delta_A$为$A$的<strong>绝对误差限</strong>，而称$\frac{\delta_A}{\mid a\mid}$为$x$的<strong>相对误差限</strong>。</p><hr><h2 id="三-中值定理与导数的应用"><a href="#三-中值定理与导数的应用" class="headerlink" title="三. 中值定理与导数的应用"></a>三. 中值定理与导数的应用</h2><h3 id="3-1-微分中值定理"><a href="#3-1-微分中值定理" class="headerlink" title="3.1 微分中值定理"></a>3.1 微分中值定理</h3><h4 id="罗尔定理"><a href="#罗尔定理" class="headerlink" title="罗尔定理"></a>罗尔定理</h4><p>费马引理：设函数$f(x)$在点$x_0$的某领域$U(x_0)$内有定义，并且在$x_0$处可导，如果对任意$x\in U(x_0)$，有$f(x)\leqslant f(x_0) \ or \ f(x)\geqslant f(x_0)$那么$f’(x_0)=0.$</p><p>（罗尔定理） 如果函数$f(x)$满足：</p><ol><li>在闭区间$[a, b]$上连续；</li><li>在开区间$(a, b)$内可导；</li><li>在区间端点处的函数值相等，即$f(a)=f(b)$</li></ol><p>那么在$(a, b)$内至少存在一点$\xi(a&lt;\xi &lt;b)$，使得函数$f(x)$在该点的导数等于零，即$f’(\xi)=0.$</p><h4 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h4><p>如果函数$f(x)$满足：</p><ol><li>在闭区间$[a, b]$上连续；</li><li>在开区间$(a, b)$内可导；</li></ol><p>那么在$(a, b)$内至少存在一点$\xi(a&lt;\xi&lt;b)$，使得：</p><p>$$<br>f(b)-f(a)=f’(\xi)(b-a)<br>$$</p><p>即<strong>拉格朗日中值公式（有限增量定理）（微分中值定理）</strong></p><p>有限增量公式：$\Delta y=f’(x+\theta\Delta x)\cdot \Delta x \ (0&lt;\theta&lt;1)$。</p><p><strong>定理</strong>：如果函数$f(x)$在区间$I$上连续且可导，导数恒为零，那么$f(x)$在区间$I$上是一个常数。</p><h4 id="拉格朗日中值定理的证明"><a href="#拉格朗日中值定理的证明" class="headerlink" title="拉格朗日中值定理的证明"></a>拉格朗日中值定理的证明</h4><p>// Todo</p><h4 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h4><p>如果函数$f(x)$及$F(x)$满足：</p><ol><li>在闭区间$[a, b]$上连续；</li><li>在开区间$(a, b)$内可导；</li><li>在$(a, b)$内每一点处$F’(x)\neq 0.$</li></ol><p>则在$(a, b)$内至少存在一点$\xi(a&lt;\xi&lt;b)$，使得</p><p>$$<br>\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f^\prime(\xi)}{F^\prime(\xi)}<br>$$</p><h4 id="柯西中值定理的证明"><a href="#柯西中值定理的证明" class="headerlink" title="柯西中值定理的证明"></a>柯西中值定理的证明</h4><p>// Todo</p><h3 id="3-2-洛必达法则"><a href="#3-2-洛必达法则" class="headerlink" title="3.2 洛必达法则"></a>3.2 洛必达法则</h3><h4 id="洛必达法则定义定理"><a href="#洛必达法则定义定理" class="headerlink" title="洛必达法则定义定理"></a>洛必达法则定义定理</h4><p><strong>定义</strong>：如果当$x\to a(x \to \infty)$时，两个函数$f(x) | F(x)$都趋于零或都趋于无穷大，那么极限$\lim\limits_{x\to a(\infty)}{\frac{f(x)}{F(x)}}$可能存在或不存在。通常把这种极限叫做<strong>未定式</strong>。</p><p>分别简记为：$\frac{0}{0},\ \frac{\infty}{\infty}$</p><p><strong>定理</strong>：如果函数$f(x) | F(x)$满足如下条件：</p><ol><li>当$x \to a$时，函数$f(x)$及$F(x)$都趋于零；</li><li>在点$a$的去心领域内$f(x)|F(x)$可导，且$F’(x)\neq 0$；</li><li>$\lim\limits_{x \to a}{\frac{f’(x)}{F’(x)}}$存在（或为无穷大）。</li></ol><p>那么</p><p>$$<br>\lim\limits_{x \to a}{\frac{f(x)}{F(x)}}=\lim\limits_{x \to a}{\frac{f^\prime(x)}{F^\prime(x)}}.<br>$$</p><blockquote><p>注意：在运用洛必达法则求极限时，最好与其他方法结合使用（等价无穷小替换）</p></blockquote><p>定理：如果函数$f(x) | F(x)$满足如下条件：</p><p>(1) 当$x \to \infty$时，函数$f(x)$及$F(x)$都趋于零；</p><p>(2) 当$\mid x \mid&gt;N$时，$f’(x)$及$F’(x)$都存在且$F’(x)\neq 0$；</p><p>(3) $\lim\limits_{x \to a}{\frac{f’(x)}{F’(x)}}$存在（或为无穷大）。</p><p>那么</p><p>$$<br>\lim\limits_{x \to \infty}{\frac{f(x)}{F(x)}}=\lim\limits_{x \to \infty}{\frac{f^\prime(x)}{F^\prime(x)}}.<br>$$</p><h4 id="洛必达法则的证明"><a href="#洛必达法则的证明" class="headerlink" title="洛必达法则的证明"></a>洛必达法则的证明</h4><p>// Todo</p><h4 id="其他形式的未定式"><a href="#其他形式的未定式" class="headerlink" title="其他形式的未定式"></a>其他形式的未定式</h4><ol><li><p>$0\cdot\infty$：</p><p>$$<br>e.g.:\lim\limits_{x\to0^+}{\sqrt{x}\ln x}=\lim\limits_{x\to 0^+}{\frac{\ln x}{\frac{1}{\sqrt{x}}}} =\lim\limits_{x \to 0^+}{\frac{\frac{1}{x}}{-\frac{1}{2}x^{-\frac{3}{2}}}}=\lim\limits_{x\to 0^+}{(-2\sqrt{x})}=0<br>$$</p></li><li><p>$\infty-\infty$：</p><p>$$<br>e.g.\lim\limits_{x\to 0}{\left(\frac{1}{\sin x}-\frac{1}{x}\right)}=\lim\limits_{x\to 0}{\frac{x-\sin x}{x\sin x}} =\lim\limits_{x\to 0}{\frac{\sin x}{2\cos x-x\sin x}}=0<br>$$</p></li><li><p>$0^0$：<br>$$<br>e.g.\lim\limits_{x\to 0^+}{x^x}=\lim\limits_{x\to 0^+}{e^{x\ln x}}=e^{\lim\limits_{x\to 0^+}{x\ln x}}=e^0=1<br>$$</p></li></ol><blockquote><p>当$\lim{\frac{f’(x)}{F’(x)}}$不存在时，$\lim{\frac{f(x)}{F(x)}}$仍可能存在。</p></blockquote><h3 id="3-3-泰勒公式"><a href="#3-3-泰勒公式" class="headerlink" title="3.3 泰勒公式"></a>3.3 泰勒公式</h3><h4 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h4><ul><li><p>用高次多项式来近似表示函数</p></li><li><p>用$a_0, a_1, a_2, a_3, a_4 \dots a_n$系数来近似函数的$n$阶导数。</p></li><li><p>$e^x\approx 1+x$,$\ln(1+x)\approx x$</p></li></ul><h4 id="泰勒中值定理"><a href="#泰勒中值定理" class="headerlink" title="泰勒中值定理"></a>泰勒中值定理</h4><p>（泰勒中值定理 1）如果函数$f(x)$在$x_0$处具有$n$阶导数，那么存在$x_0$的一个领域，对领域内任一$x$，有：</p><p>$$<br>P(x)=f(x_0)+f^\prime(x_0)\frac{(x-x_0)^1}{1!}+f^{\prime\prime}(x_0)\frac{(x-x_0)^2}{2!}+\cdots+f^{(n)}(x_0)\frac{(x-x_0)^n}{n!}+R_n (x)<br>\tag{1}<br>$$</p><p>其中，</p><p>$$<br>R_n(x)=o\left((x-x_0)^n\right)<br>$$</p><p>（泰勒中值定理 2）如果函数$f(x)$在含有$x_0$的某个开区间$(a, b)$内具有$n+1$阶导数，则对任一$x \in (a, b)$，有：</p><p>$$<br>P(x)=f(x_0)+f^\prime(x_0)\frac{(x-x_0)^1}{1!}+f^{\prime\prime}(x_0)\frac{(x-x_0)^2}{2!}+\cdots+f^{(n)}(x_0)\frac{(x-x_0)^n}{n!}+R_n (x)<br>\tag{2}<br>$$</p><p>其中,</p><p>$$<br>R_n(x)=f^{(n+1)}(\xi)\frac{(x-x_0)^{n+1}}{(n+1)!} \ , \ \xi \in (x, x_0)<br>$$</p><h4 id="余项的表示"><a href="#余项的表示" class="headerlink" title="余项的表示"></a>余项的表示</h4><ul><li><p><strong>拉格朗日型余项</strong>：$R_n(x)=f^{(n+1)}(\xi)\frac{(x-x_0)^{n+1}}{(n+1)!} \ , \ \xi \in (x, x_0)$</p><p>当$n=0$时，泰勒公式<em>(2)</em>变成拉格朗日中值公式</p></li><li><p><strong>佩亚诺型余项</strong>：$R_n(x)=o\left((x-x_0)^n\right)$</p></li></ul><h4 id="麦克劳林公式"><a href="#麦克劳林公式" class="headerlink" title="麦克劳林公式"></a>麦克劳林公式</h4><p>$$<br>f(x)=f(x_0)+f^\prime(0)\frac{x^1}{1!}+f^{\prime\prime}(0)\frac{x^2}{2!}+\cdots+f^{(n)}(0)\frac{x^n}{n!}+f^{(n+1)}(\theta x)\frac{x^{n+1}}{(n+1)!}<br>$$</p><p>如果取$x_0=0$，泰勒公式<em>(1)</em>有带有佩亚诺余项的<strong>麦克劳林公式</strong></p><p>$$<br>f(x)=f(0)+f’(0)x+\cdots+\frac{f^{(n)}(0)}{n!}+o(x^n)<br>$$</p><p>泰勒公式<em>(2)</em>变成带有拉格朗日余项的<strong>麦克劳林公式</strong></p><p>$$<br>f(x)=f(0)+f’(0)x+\cdots+\frac{f^{(n)}(0)}{n!}+\frac{f^{(n+1)}(\theta x)}{(n+1)!}x^{n+1}\quad<br>(0&lt;\theta&lt;1)<br>$$</p><h4 id="一些函数带有拉格朗日余项的-n-阶麦克劳林公式"><a href="#一些函数带有拉格朗日余项的-n-阶麦克劳林公式" class="headerlink" title="一些函数带有拉格朗日余项的$n$阶麦克劳林公式"></a>一些函数带有拉格朗日余项的$n$阶麦克劳林公式</h4><p>$$<br>e^x=1+x+\frac{x^2}{2!}+\cdots+\frac{x^n}{n!}+\frac{e^{\theta x}}{(n+1)!}x^{(n+1)}\quad (0 &lt; \theta &lt; 1)<br>$$</p><p>$$<br>\sin x=x-\frac{x^3}{3!}+\frac{x^5}{5!}-\cdots+(-1)^{m-1}\frac{x^{2m-1}}{(2m-1)!}+R_{2m}(x)\quad n=2m\<br>R_{2m}(x)=(-1)^m\frac{\cos\theta x}{(2m+1)!}x^{2m+1}\quad (0&lt;\theta&lt;1)<br>$$</p><p>$$<br>\cos x=1-\frac{x^2}{2!}+\frac{x^4}{4!}-\cdots+(-1)^{m}\frac{x^{2m}}{(2m)!}+R_{2m+1}(x)\quad n=2m\<br>R_{2m+1}(x)=(-1)^{m+1}\frac{\cos\theta x}{(2m+2)!}x^{2m+2}\quad (0&lt;\theta&lt;1)<br>$$</p><p>$$<br>\ln (1+x)=x-\frac{x^2}{2!}+\frac{x^3}{3!}-\cdots+(-1)^{n-1}\frac{x^{n}}{n}+R_{n}(x)\quad n=2m\<br>R_{n}(x)=\frac{(-1)^n}{(n+1)(1+\theta x)^{n+1}}x^{n+1}\quad (0&lt;\theta&lt;1)<br>$$</p><p>$$<br>(1+x)^\alpha=<br>1+\alpha x+\frac{\alpha(\alpha-1)}{2!}x^2+\cdots+\frac{\alpha(\alpha-1)\cdots(\alpha-n+1)}{n!}x^n+R_n(x)\<br>R_n(x)=\frac{\alpha(\alpha-1)\cdots(\alpha-n+1)(\alpha-n)}{(n+1)!}(1+\theta x)^{\alpha-n+1}x^{n+1}\quad<br>(0&lt;\theta&lt;1)<br>$$</p><h3 id="3-4-函数的单调性与曲线的凹凸性"><a href="#3-4-函数的单调性与曲线的凹凸性" class="headerlink" title="3.4 函数的单调性与曲线的凹凸性"></a>3.4 函数的单调性与曲线的凹凸性</h3><h4 id="函数的单调性"><a href="#函数的单调性" class="headerlink" title="函数的单调性"></a>函数的单调性</h4><p><strong>定理</strong>：设函数$y=f(x)$在$[a,\ b]$上连续，在$(a,\ b)$内可导：</p><ol><li>如果在$(a,\ b)$内$f’(x)\geqslant0$，且等号仅在有限多个点处成立，那么函数$y=f(x)$在$[a,\ b]$上<strong>单调增加</strong></li><li>如果在$(a,\ b)$内$f’(x)\leqslant0$，且等号仅在有限多个点处成立，那么函数$y=f(x)$在$[a,\ b]$上<strong>单调减少</strong></li></ol><h4 id="曲线的凹凸性与拐点"><a href="#曲线的凹凸性与拐点" class="headerlink" title="曲线的凹凸性与拐点"></a>曲线的凹凸性与拐点</h4><p><strong>定义</strong>：设函数$f(x)$在区间$I$上连续，如果对$I$上任意两点$x_1, x_2$恒有：</p><ul><li>$f\left(\frac{x_1+x_2}{2}\right)&lt;\frac{f(x_1)+f(x_2)}{2},$则图形是<strong>凹</strong>的（凹弧）</li><li>$f\left(\frac{x_1+x_2}{2}\right)&gt;\frac{f(x_1)+f(x_2)}{2},$则图形是<strong>凸</strong>的（凸弧）</li></ul><p><strong>定理</strong>：设$f(x)$在$[a,\ b]$上连续，在$(a,\ b)$内具有一阶和二阶导数，那么在$(a,\ b)$内：</p><ul><li>$f^”(x)&gt;0$则图形在$[a, b]$上是凹的</li><li>$f^”(x)&lt;0$则图形在$[a, b]$上是凸的</li></ul><p>拐点：曲线$y=f(x)$在经过点$\left((x_0,\ f(x_0)\right)$时，曲线凹凸性发生改变。即：$f^{“}(x)$符号发生变化的分界点。</p><blockquote><p>具有二阶导数时$f^{“}(x)=0$也可能$f^{“}(x)$不存在的点。</p></blockquote><h3 id="3-5-函数的极值与最值"><a href="#3-5-函数的极值与最值" class="headerlink" title="3.5 函数的极值与最值"></a>3.5 函数的极值与最值</h3><h4 id="函数的极值及其求法"><a href="#函数的极值及其求法" class="headerlink" title="函数的极值及其求法"></a>函数的极值及其求法</h4><p><strong>定义</strong>：设函数$f(x)$在$(a,\ b)$内有定义，$x_0 \in (a, b)$，若存在邻域$\mathring U(x_0,\ \delta)$，当$x \in \mathring U(x_0,\ \delta)$时总有$f(x)&lt;f(x_0) \quad or \quad f(x0 &gt; f(x_0)$，则称$f(x_0)$是$f(x)$的一个<strong>极大值或极小值</strong>。</p><p>极大值和极小值称为<strong>极值</strong>，使函数取得极值的点称为<strong>极值点</strong>。</p><p>（极值的<strong>必要条件</strong>）若函数$f(x)$在$x_0$处可导，且在$x_0$处取得极值，则$f’(x_0)=0$</p><p>（第一充分条件）设函数$f(x)$在$x_0$处连续，且在$x_0$的某去心领域$\mathring U(x_0,\ \delta)$内可导：</p><ol><li>若$x\in(x_0-\delta,\ x_0)$时，$f’(x)&gt;0$，而$x\in(x_0,\ x_0+\delta)$时，$f’(x)&lt;0$，则$f(x)$在$x_0$处取得极大值</li><li>若$x\in(x_0-\delta,\ x_0)$时，$f’(x)&lt;0$，而$x\in(x_0,\ x_0+\delta)$时，$f’(x)&gt;0$，则$f(x)$在$x_0$处取得极小值</li><li>若$x\in\mathring U(x_0,\ \delta)$时，$f’(x)$的符号保持不变，则$f(x)$在$x_0$处没有极值</li></ol><p>（第二充分条件）设函数$f(x)$在$x_0$处具有二阶导数且$f’(x_0)=0,\ f’’(x_0)\neq 0$，则：</p><ol><li>当$f’’(x_0)&lt;0$时，函数$f(x)$在$x_0$处取得极大值</li><li>当$f’’(x_0)&gt;0$时，函数$f(x)$在$x_0$处取得极小值</li></ol><h4 id="求区间内的极值点和对应的极值"><a href="#求区间内的极值点和对应的极值" class="headerlink" title="求区间内的极值点和对应的极值"></a>求区间内的极值点和对应的极值</h4><ol><li>求出导数$f’(x)$</li><li>求出$f(x)$的全部驻点与不可导点</li><li>考察$f’(x)$的符号在每个驻点或不可导点的左、右邻近的情形，以确定是否为极值点；如果为极值点，进一步确定是极大值点还是极小值点</li><li>求出各极值点的函数值，就得函数$f(x)$的全部极值</li></ol><h4 id="最大值最小值问题"><a href="#最大值最小值问题" class="headerlink" title="最大值最小值问题"></a>最大值最小值问题</h4><ol><li>求出$f(x)$在$(a,\ b)$内的驻点及不可导点</li><li>计算$f(x)$在上述驻点、不可导点处的函数值及$f(a),\ f(b)$</li><li>比较<em>(2)</em>中各值的大小，其中最大、最小的便是$f(x)$在$[a,\ b]$上的最大值，最小值</li></ol><h3 id="3-6-函数图形的描绘"><a href="#3-6-函数图形的描绘" class="headerlink" title="3.6 函数图形的描绘"></a>3.6 函数图形的描绘</h3><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><table><thead><tr><th>$x$</th><th>区间 1</th><th>间断点</th><th>区间 2</th><th>间断点</th><th>区间 3</th></tr></thead><tbody><tr><td>$f’(x)$</td><td>$\pm$</td><td>$0$或无</td><td>$\pm$</td><td>$0$或无</td><td>$\pm$</td></tr><tr><td>$f’’(x)$</td><td>$\pm$</td><td>$0$或无</td><td>$\pm$</td><td>$0$或无</td><td>$\pm$</td></tr><tr><td>$y=f(x)$图形</td><td>$\nearrow\searrow$</td><td>拐点</td><td>$\nearrow\searrow$</td><td>间断点</td><td>$\nearrow\searrow$</td></tr></tbody></table><h3 id="3-7-曲率"><a href="#3-7-曲率" class="headerlink" title="3.7 曲率"></a>3.7 曲率</h3><hr><h4 id="弧微分"><a href="#弧微分" class="headerlink" title="弧微分"></a>弧微分</h4><p>设$x,\ x+\Delta x$为$(a,\ b)$内两个邻近的点，它们在曲线$y=f(x)$上对应的点为$M,\ M’$，对应$x$的增量为$\Delta x$，弧$s$的增量为$\Delta s$，那么：$\Delta s=\overset{\LARGE{\frown}}{M_0M’}-\overset{\LARGE{\frown}}{M_0M}=\overset{\LARGE{\frown}}{MM’}$</p><p>弧微分公式：</p><p>$$<br>\mathrm{d}s=\sqrt{1+y’^2}\ \mathrm{d}x<br>$$</p><h4 id="曲率及其计算公式"><a href="#曲率及其计算公式" class="headerlink" title="曲率及其计算公式"></a>曲率及其计算公式</h4><p>设曲线$C$是光滑的，曲线上点$M$对应于弧$s$，在点$M$处切线的倾角为$\alpha$，曲线上点$M’$对应于弧$s+\Delta s$，在点$M$处切线的倾角为$\alpha+\Delta\alpha$，弧段$\overset{\LARGE{\frown}}{MM’}$的长度为$|\Delta s|$，动点$M$移动到$M’$时的切线转过的角度为$|\Delta\alpha|$</p><ul><li><p><strong>平均曲率</strong>，记作$\overset{-}{K}$，即：$\overset{-}{K}=\left|\frac{\Delta\alpha}{\Delta s}\right|$</p></li><li><p>平均曲率的极限，叫做<strong>曲率</strong>：$K=\lim\limits_{\Delta s\to 0}\left|\frac{\Delta\alpha}{\Delta s}\right|=\left|\frac{\mathrm{d}\alpha}{\mathrm{d}s}\right|$</p></li><li><p>曲率的计算式（由参数方程）</p><p>$$<br>\begin{equation}<br>\left{<br>\begin{aligned}<br>x&amp;=\varphi(t)\<br>y&amp;=\psi(t)<br>\end{aligned}<br>\right.<br>\end{equation}<br>$$</p><p>$$<br>K=\frac{|y’’|}{(1+y’^2)^{3/2}} =<br>\frac{|\varphi’(t)\psi’’(t)-\varphi’’(t)\psi’(t)|}{[\varphi’^2(t)+\psi’^2(t)]^{3/2}}<br>$$</p></li></ul><h4 id="曲率圆与曲率半径"><a href="#曲率圆与曲率半径" class="headerlink" title="曲率圆与曲率半径"></a>曲率圆与曲率半径</h4><p>曲率为$K$，在点$M$处的曲线的法线上，在凹的一侧取一点$D$，使$|DM|=\frac{1}{K}=\rho$，这个圆叫做曲线在点$M$处的<strong>曲率圆</strong>，$D$为<strong>曲率中心</strong>，$\rho$ <strong>为曲率半径</strong>，有如下关系：</p><p>$$<br>\rho=\frac{1}{K},\ K=\frac{1}{\rho}<br>$$</p><h3 id="3-8-方程的近似解"><a href="#3-8-方程的近似解" class="headerlink" title="3.8 方程的近似解"></a>3.8 方程的近似解</h3><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><p>设$f(x)$在区间$[a,\ b]$上连续，$f(a)\cdot f(b)&lt;0$，且方程$f(x)=0$在$(a,\ b)$内仅有一个实根$\xi$，于是$[a,\ b]$即是这个根的一个隔离区间。</p><p>取$[a,\ b]$的中点$\xi_1=\frac{a+b}{2}$，计算$f(\xi_1)$：</p><ul><li>如果$f(\xi_1)=0$，那么$\xi=\xi_1$；</li><li>如果$f(\xi_1)$与$f(a)$同号，取新的隔离区间：$[\xi_1,\ b]$；</li><li>如果$f(\xi_1)$与$f(b)$同号，取新的隔离区间：$[a,\ \xi_1]$</li></ul><p>重复计算，得$a_n&lt;\xi&lt;b_n$，如果将$a_n,\ b_n$作为近似值，误差小于$\frac{1}{2^n}(b-a)$</p><h4 id="切线法"><a href="#切线法" class="headerlink" title="切线法"></a>切线法</h4><p>设$f(x)$在区间$[a,\ b]$上具有二阶导数，$f(a)\cdot f(b)&lt;0$且$f’(x)$及$f’’(x)$在$[a,\ b]$上保持定号。于是方程在$(a,\ b)$上有唯一实根$\xi$，$[a,\ b]$即是这个根的一个隔离区间。</p><p>考虑用曲线弧一段的切线代替曲线弧，令$x_0=b$，在这点切线方程为:$y-f(x_0)=f’(x_0)(x-x_0)$；令$y=0$得$x$轴切线交点横坐标：$x_1=x_0-\frac{f(x_0)}{f’(x_0)}$。</p><p>$x_1$比$x_0$就更加接近根$\xi$，多次计算切线与$x$轴交点，可得近似值：</p><p>$$<br>x_{n+1}=x_n-\frac{f(x_n)}{f’(x_n)}<br>$$</p><h4 id="割线法"><a href="#割线法" class="headerlink" title="割线法"></a>割线法</h4><p>通过割线代替切线，避免计算导数。此时迭代公式为：</p><p>$$<br>x_{n+1}=x_n-\frac{x_n-x_{n-1}}{f(x_n)-f(x_{n-1})}\cdot f(x_n)<br>$$</p><hr><h2 id="四-不定积分"><a href="#四-不定积分" class="headerlink" title="四. 不定积分"></a>四. 不定积分</h2><h3 id="4-1-不定积分的概念与性质"><a href="#4-1-不定积分的概念与性质" class="headerlink" title="4.1 不定积分的概念与性质"></a>4.1 不定积分的概念与性质</h3><h4 id="不定积分的概念"><a href="#不定积分的概念" class="headerlink" title="不定积分的概念"></a>不定积分的概念</h4><p><strong>定义</strong>：若$F’(x)=f(x),x \in I$，或者$\mathrm{d}F(x)=f(x)\mathrm{d}x$，则称$F(x)$是$f(x)$在区间$I$上的原函数。</p><p><strong>定理</strong>：连续函数一定有原函数，即：$F’(x)=f(x)$。如果$f(x)$有一个原函数，这一定有无穷多个原函数$F(x)+C$</p><p><strong>定义</strong>：区间$I$上$f(x)$的原函数的全体，称为$f(x)$的不定积分，记为$\int f(x)\mathrm{d}x$</p><h4 id="积分表"><a href="#积分表" class="headerlink" title="积分表"></a>积分表</h4><ul><li><p>$$<br>\int k\mathrm{d}x=kx+C\quad k是常数<br>\tag{1}<br>$$</p></li><li><p>$$<br>\int x^\mu\mathrm{d}x=\frac{x^{\mu+1}}{\mu+1}+C\quad (\mu \neq -1)<br>\tag{2}<br>$$</p></li><li><p>$$<br>\int\frac{\mathrm{d}x}{x}=\ln|x|+C<br>\tag{3}<br>$$</p></li><li><p>$$<br>\int\frac{\mathrm{d}x}{1+x^2}=\arctan x+C<br>\tag{4}<br>$$</p></li><li><p>$$<br>\int\frac{\mathrm{d}x}{\sqrt{1-x^2}}=\arcsin x+C<br>\tag{5}<br>$$</p></li><li><p>$$<br>\int\cos x\mathrm{d}x=\sin x+C<br>\tag{6}<br>$$</p></li><li><p>$$<br>\int\sin x\mathrm{d}x=-\cos x+C<br>\tag{7}<br>$$</p></li><li><p>$$<br>\int\frac{\mathrm{d}x}{\cos^2 x}=\int\sec^2x\mathrm{d}x=\tan x+C<br>\tag{8}<br>$$</p></li><li><p>$$<br>\int\frac{\mathrm{d}x}{\sin^2x}=\int\csc^2x\mathrm{d}x=-\cot x+C<br>\tag{9}<br>$$</p></li><li><p>$$<br>\int\sec x\tan x\mathrm{d}x=\sec x+C<br>\tag{10}<br>$$</p></li><li><p>$$<br>\int\csc x\cot x\mathrm{d}x=-\csc x+C<br>\tag{11}<br>$$</p></li><li><p>$$<br>\int e^x\mathrm{d}x=e^x+C<br>\tag{12}<br>$$</p></li><li><p>$$<br>\int a^x\mathrm{d}x=\frac{a^x}{\ln a}+C<br>\tag{13}<br>$$</p></li></ul><p>-</p><h4 id="不定积分的性质"><a href="#不定积分的性质" class="headerlink" title="不定积分的性质"></a>不定积分的性质</h4><p><strong>线性性质</strong>：设$f(x),\ g(x)$的原函数都存在，$k$为非零参数</p><p>$$<br>\int[f(x)+g(x)]\mathrm{d}x=\int f(x)\mathrm{d}x+\int g(x)\mathrm{d}x<br>$$</p><p>$$<br>\displaystyle{\int}\sum\limits_{i=1}^{n}[k_if_i(x)]\mathrm{d}x = \sum\limits_{i=1}^{n}k_i\displaystyle{\int}f_i(x)\mathrm{d}x<br>$$</p><p><strong>积分形式的不变性</strong>：设$u=u(x)$是$x$的任一可微函数，</p><p>$$<br>\displaystyle{\int}f(x)\mathrm{d}x = F(x)+c \Leftrightarrow<br>\displaystyle{\int}f(u)\mathrm{d}u = F(u)+c<br>$$</p><p>求导与积分运算的关系：</p><ol><li><p>先积分后微分，两者互相抵消</p><p>$$<br>\mathrm{d}\int f(x)\mathrm{d}x=f(x)\mathrm{d}x \ or <br>[\int f(x)\mathrm{d}x]’=f(x)<br>$$</p></li><li><p>先微分后积分，相互抵消后相差一个常数<br>$$<br>\int\mathrm{d}F(x)=F(x)+c \ or <br>\int F’(x)\mathrm{d}x=F(X)+c<br>$$</p></li></ol><p>原函数存在的充分条件：若$f(x)$在区间$I$上连续，则$f(x)$在$I$上存在原函数，即$f(x)$在$I$上可积。</p><h3 id="4-2-换元积分法"><a href="#4-2-换元积分法" class="headerlink" title="4.2 换元积分法"></a>4.2 换元积分法</h3><h4 id="第一类换元法（凑微分法）"><a href="#第一类换元法（凑微分法）" class="headerlink" title="第一类换元法（凑微分法）"></a>第一类换元法（凑微分法）</h4><p><strong>定理</strong>：设$f(u)$具有原函数，$u=\varphi(x)$可导，则有换元公式：</p><p>$$<br>\int f[\varphi(x)]\varphi’(x)\mathrm{d}x=\left[\int f(u)\mathrm{d}u \right]_{u=\varphi(x)}<br>$$</p><p>设，需要求$\int g(x)\mathrm{d}x$，函数化为：$g(x)=f[\varphi(x)]\varphi’(x)\mathrm{d}x$的形式，那么</p><p>$$<br>\int g(x)\mathrm{d}x=\left[\int f(u)\mathrm{d}u \right]_{u=\varphi(x)}<br>$$</p><p>转化为求函数$f(u)$的积分。</p><p>常见形式：</p><ol><li>$\frac{1}{x}\mathrm{d}x=\mathrm{d}\ln x$</li><li>$e^x\mathrm{d}x = \mathrm{d}e^x$</li><li>$\cos x\mathrm{d}x = \mathrm{d}\sin x$</li><li>$x^n\mathrm{d}x = \frac{1}{n+1}\mathrm{d}x^{n+1}$</li></ol><h4 id="第二类换元法"><a href="#第二类换元法" class="headerlink" title="第二类换元法"></a>第二类换元法</h4><p><strong>定理</strong>：设$x=\psi(t)$是单调的可导函数，并且$\psi’(t)\neq 0$。又设$f[\psi(t)]\psi’(t)$具有原函数，则有换元公式：</p><p>$$<br>\displaystyle{\int}f(x)\mathrm{d}x=\left[\int f[\psi(t)]\psi’(t)\mathrm{d}t \right]_{t=\psi^{-1}(x)}<br>$$</p><p>其中$\psi^{-1}(x)$为$x=\psi(t)$的反函数</p><p>方法：</p><ol><li><p>根式代换</p><p>形如$\displaystyle{\int} R(x, \sqrt[n]{ax+b})\mathrm{d}x$的积分，可令$\sqrt[n]{ax+b}=t$.</p><p>形如$\displaystyle{\int}R\left(x, \sqrt[n]{\frac{ax+b}{cx+d}}\right)\mathrm{d}x$的积分，可令$\sqrt[n]{\frac{ax+b}{cx+d}}=t$.</p></li><li><p>三角代换</p><p>被积函数含有$\sqrt{a^2-x^2} \quad \sqrt{a^2+x^2} \quad\sqrt{x^2-a^2}$等二次因子，可作三角代换</p><p>$\sqrt{a^2-x^2} \Rightarrow x=a\sin t \Rightarrow a\cos t$</p><p>$\sqrt{a^2+x^2} \Rightarrow x=a\tan t \Rightarrow a\sec t$</p><p>$\sqrt{x^2-a^2} \Rightarrow x=a\sec t \Rightarrow a\tan t$</p></li><li><p>倒代换</p><p>用于消去被积函数分母前的变量因子$x^k\quad (k \in \mathbb{N})$</p><p>常见形式：$\displaystyle{\int}\frac{p_n(x)}{x^k\sqrt{ax^2-bx+c}}\mathrm{d}x\quad a\neq 0,k \in \mathrm{N},p_n(x)$为$n$次多项式，且$n&lt;k$，则可令$x=\frac{1}{t}$而消去因子$x^k$.</p></li></ol><h3 id="4-3-分部积分法"><a href="#4-3-分部积分法" class="headerlink" title="4.3 分部积分法"></a>4.3 分部积分法</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>设$u=u(x),v=v(x)$可导，则：</p><p>$$<br>\int uv’\mathrm{d}x = uv - \int u’v\mathrm{d}x<br>\<br>\int u\mathrm{d}v = uv-\int v\mathrm{d}u<br>$$</p><blockquote><p>要求$\int v\mathrm{d}u$的积分比$\int u\mathrm{d}v$的积分容易求出。</p></blockquote><h4 id="常见类型"><a href="#常见类型" class="headerlink" title="常见类型"></a>常见类型</h4><ol><li>降次型</li><li>转换型</li><li>循环型</li><li>递推型</li><li>抵消型</li></ol><h3 id="4-4-有理函数的积分"><a href="#4-4-有理函数的积分" class="headerlink" title="4.4 有理函数的积分"></a>4.4 有理函数的积分</h3><h4 id="有理函数"><a href="#有理函数" class="headerlink" title="有理函数"></a>有理函数</h4><p>两个多项式的商$\frac{P(x)}{Q(x)}$，称为有理函数，也称为有理分式。当$P(x)$次数小于$Q(x)$时，称为<strong>真分式</strong>，否则为<strong>假分式</strong></p><h4 id="有理函数积分一般步骤"><a href="#有理函数积分一般步骤" class="headerlink" title="有理函数积分一般步骤"></a>有理函数积分一般步骤</h4><ol><li>将有理假分式用多项式除法或凑项法化为整式与真分式之和。</li><li>用比较系数法或赋值法确定真分式中的待定系数。</li><li>求出整式及各部分分式的积分。</li></ol><h4 id="三角有理式的积分"><a href="#三角有理式的积分" class="headerlink" title="三角有理式的积分"></a>三角有理式的积分</h4><ul><li><p>对于$\displaystyle{\int}\frac{a\sin x+b\cos x}{a_1\sin x+b_1\cos x}\mathrm{d}x$可设</p><p>$$<br>a\sin x +b\sin x = A(a_1\sin x+b_1 \cos x)+B(a_1\sin x+b_1\cos x)’<br>$$</p><p>用待定系数法求出$A, B$然后裂项积分。</p></li><li><p>对于$\sqrt[n]{ax+b}$或$\sqrt[n]{\frac{ax+b}{cx+d}}$，可以令此根式为$u$</p></li></ul><h3 id="4-5-积分表的应用"><a href="#4-5-积分表的应用" class="headerlink" title="4.5 积分表的应用"></a>4.5 积分表的应用</h3><h4 id="补充积分表"><a href="#补充积分表" class="headerlink" title="补充积分表"></a>补充积分表</h4><p>$$<br>\begin{aligned}<br>&amp; \int \sin x \mathrm{d} x = -\cos x + C;\quad \int \cos x \mathrm{d}x =\sin x + C;\<br>&amp; \int \tan x \mathrm{d}x = - \ln |\cos x| + C;\quad \int \cot x \mathrm{d}x = \ln |\sin x| + C;\<br>&amp; \int \frac{\mathrm{d}x}{\cos x} = \int \sec x \mathrm{d}x = \ln |\sec x + \tan x| + C;\<br>&amp; \int \frac{\mathrm{d}x}{\sin x} = \int \csc x \mathrm{d}x = \ln |\csc x - \cot x| + C;\<br>&amp; \int \sec^{2} x \mathrm{d}x = \tan x + C; \int \csc^{2} x \mathrm{d}x = - \cot x + C;\<br>&amp; \int \sec x \tan x \mathrm{d}x = \sec x + C; \int \csc x \cot x \mathrm{d}x = - \csc x + C.<br>\end{aligned}<br>\tag{1}<br>$$</p><p>$$<br>\begin{cases} \int \frac{1}{1+x^{2}} \mathrm{d}x = \arctan x + C, \ \int \frac{1}{a^{2}+x^{2}} \mathrm{d}x = \frac{1}{a} \arctan \frac{x}{a} + C &amp; (a&gt;0). \end{cases}<br>\tag{2}<br>$$</p><p>$$<br>\begin{cases} \int \frac{1}{\sqrt{1-x^{2}}} \mathrm{d}x = \arcsin x + C, \ \int \frac{1}{\sqrt{a^{2}-x^{2}}} \mathrm{d}x = \arcsin \frac{x}{a} + C &amp; (a&gt;0). \end{cases}<br>\tag{3}<br>$$</p><p>$$<br>\begin{cases} \int \frac{1}{\sqrt{x^{2}+a^{2}}} \mathrm{d}x = \ln(x+\sqrt{x^{2}+a^{2}}) + C &amp; (\text{常见 } a=1), \ \int \frac{1}{\sqrt{x^{2}-a^{2}}} \mathrm{d}x = \ln |x + \sqrt{x^{2}-a^{2}}| + C &amp; (|x|&gt;|a|). \end{cases}<br>\tag{4}<br>$$</p><p>$$<br>\int \frac{1}{x^{2}-a^{2}} \mathrm{d}x = \frac{1}{2a} \ln \left|\frac{x-a}{x+a}\right| + C \text{ } (\int \frac{1}{a^{2}-x^{2}} \mathrm{d}x = \frac{1}{2a} \ln \left|\frac{x+a}{x-a}\right| + C).<br>\tag{5}<br>$$</p><p>$$<br>\int \sqrt{a^{2}-x^{2}} \mathrm{d}x = \frac{a^{2}}{2} \arcsin \frac{x}{a} + \frac{x}{2} \sqrt{a^{2}-x^{2}} + C \text{ } (a&gt;|x| \geqslant 0).<br>\tag{6}<br>$$</p><p>$$<br>\begin{aligned}<br>&amp;\int \sin ^{2} x \mathrm{<del>d} x=\frac{x}{2}-\frac{\sin 2 x}{4}+C \text{ } (\sin ^{2} x=\frac{1-\cos 2 x}{2}) \<br>&amp;\int \cos ^{2} x \mathrm{</del>d} x=\frac{x}{2}+\frac{\sin 2 x}{4}+C \text{ } (\cos ^{2} x=\frac{1+\cos 2 x}{2}) \<br>&amp;\int \tan ^{2} x \mathrm{<del>d} x=\tan x-x+C \text{ } (\tan ^{2} x=\sec ^{2} x-1) \<br>&amp;\int \cot ^{2} x \mathrm{</del>d} x=-\cot x-x+C \text{ } (\cot ^{2} x=\csc ^{2} x-1)<br>\end{aligned}<br>\tag{7}<br>$$</p><hr><h2 id="五-定积分"><a href="#五-定积分" class="headerlink" title="五. 定积分"></a>五. 定积分</h2><h3 id="5-1-定积分的概念与性质"><a href="#5-1-定积分的概念与性质" class="headerlink" title="5.1 定积分的概念与性质"></a>5.1 定积分的概念与性质</h3><h4 id="定积分问题举例"><a href="#定积分问题举例" class="headerlink" title="定积分问题举例"></a>定积分问题举例</h4><ol><li><p>曲边梯形的面积</p><p>$A=\lim\limits_{\lambda \to 0}{\sum\limits_{i=1}^n}f(\xi_i)\Delta x_i$</p></li><li><p>变速曲线运动的路程</p><p>$s=\lim\limits_{\lambda \to 0}{\sum\limits_{i=i}^n}v(\tau_i)\Delta t_i$</p></li></ol><h4 id="定积分的定义"><a href="#定积分的定义" class="headerlink" title="定积分的定义"></a>定积分的定义</h4><p>函数$f(x)$在区间$[a,\ b]$上有界，且将区间$[a,\ b]$分为$n$个小区间，每个小区间上任取一个点$\xi_i$函数值$f(\xi_i)$与小区间长度$\Delta x_i$的乘积的和（$S=\sum\limits_{i=1}^nf(\xi_i)\Delta x_i$）的极限为函数$f(x)$在区间$[a, b]$上的定积分（简称积分），记作$\displaystyle\int_a^bf(x)\mathrm{d}x$，即：</p><p>$$<br>\displaystyle\int_a^bf(x)\mathrm{d}x=I=<br>\lim\limits_{\lambda\to0}\sum\limits_{i=1}^n f(\xi_i)\Delta x_i<br>$$</p><p>其中$f(x)$叫做<strong>被积函数</strong>，$f(x)\mathrm{d}x$叫做<strong>被积表达式</strong>，$x$叫做<strong>积分变量</strong>，$a$叫做<strong>积分下限</strong>，$b$叫做<strong>积分上限</strong>，$[a, b]$叫做<strong>积分区间</strong>。</p><p>和式$\sum\limits_{i=1}^n f(\xi_i)\Delta x_i$称为<strong>积分和</strong>，如果$f(x)$在$[a,\ b]$上定积分存在，那么说$f(x)$在$[a,\ b]$上可积。</p><blockquote><p>定积分的值只与被积函数及积分区间有关，而与积分变量的记法无关。</p></blockquote><p>定理：</p><ol><li>设$f(x)$在区间$[a, b]$上连续，则$f(x)$在$[a, b]$上可积。</li><li>设$f(x)$在区间$[a ,b]$ 上有界，且只有有限个间断点。则$f(x)$在$[a, b]$上可积。</li></ol><h4 id="定积分的近似计算"><a href="#定积分的近似计算" class="headerlink" title="定积分的近似计算"></a>定积分的近似计算</h4><h5 id="矩形法"><a href="#矩形法" class="headerlink" title="矩形法"></a>矩形法</h5><p>采取把区间$[a,\ b]$等分的方法，每个小区间长为：$\Delta x=\frac{b-a}n$。在小区间$[x_{i-1},\ x_i]$上，取$\xi_i = x_{i-1}$，应有：</p><p>$$<br>\int_a^b f(x)\mathrm{d}x=\lim\limits_{n\to\infty}\frac{b-a}n\sum\limits_{i=1}^n f(x_{i-1})<br>$$</p><p>取$\xi_i=x_i$得近似公式：</p><p>$$<br>\int_a^b f(x)\mathrm{d}x\approx\frac{b-a}{n}(y_1+y_2+\cdots+y_n)<br>$$</p><h5 id="梯形法"><a href="#梯形法" class="headerlink" title="梯形法"></a>梯形法</h5><p>定积分的近似值：</p><p>$$<br>\begin{align}<br>\int_a^b f(x)\mathrm{d}x &amp;\approx\frac{b-a}n\left(\frac{y_0+y_1}2+\frac{y_1+y_2}2+\cdots+\frac{y_{n-1}+y_n}2\right)\<br>&amp;=\frac{b-a}n\left(\frac{y_0+y_n}2+y_1+y_2+\cdots+y_{n-1}\right)<br>\end{align}<br>$$</p><h5 id="抛物线法（辛普森法）"><a href="#抛物线法（辛普森法）" class="headerlink" title="抛物线法（辛普森法）"></a>抛物线法（辛普森法）</h5><p>$$<br>\begin{align}<br>\int_a^b f(x)\mathrm{d}x &amp;\approx\frac{b-a}{3n}[(y_0+4y_1+y_2)+(y_2+4y_3+y_4)+\cdots+(y_{n-2}+4y_{n-1}+y_n)]\<br>&amp;=\frac{b-1}{3n}[y_0+y_n+4(y_1+y_3+\cdots+y_{n-1})+2(y_2+y_4+\cdots+y_{n-2})]<br>\end{align}<br>$$</p><h4 id="定积分的性质"><a href="#定积分的性质" class="headerlink" title="定积分的性质"></a>定积分的性质</h4><p>补充两点规定：</p><ol><li>当$b=a$时，$\displaystyle\int_a^b f(x)\mathrm{d}x=0$</li><li>当$a&gt;b$时，$\displaystyle\int_a^b f(x)\mathrm{d}x=-\int_b^a f(x)\mathrm{d}x$</li></ol><p>性质有：</p><ol><li><p>设$\alpha$与$\beta$为常数,则</p><p>$$<br>\displaystyle\int_a^b[\alpha f(x)+\beta g(x)]\mathrm{d}x =<br>\alpha \int_a^b f(x)\mathrm{d}x+\beta\int_a^b g(x)\mathrm{d}x<br>$$</p><p>对于任意有限个函数线性组合也是成立的。</p></li><li><p>设$a&lt;c&lt;b$，则：</p><p>$$<br>\displaystyle\int_a^b f(x)\mathrm{d}x =<br>\int_a^c f(x)\mathrm{d}x+\int_c^b f(x)\mathrm{d}x<br>$$</p><p>定积分对于积分区间具有可加性</p></li><li><p>如果在区间$[a, b]$上$f(x)\equiv 1$，那么</p><p>$$<br>\displaystyle\int_a^b 1\mathrm{d}x =<br>\int_a^b \mathrm{d}x = b - a<br>$$</p></li><li><p>如果在区间$[a, b]$上$f(x)\geqslant 0$，那么</p><p>$$<br>\displaystyle\int_a^b f(x)\mathrm{d}x \geqslant 0 \quad (a&lt;b)<br>$$</p></li><li><p>推论 1：如果在区间$[a, b]$上$f(x)\leqslant g(x)$，那么</p><p>$$<br>\displaystyle\int_a^b f(x)\mathrm{d}x \leqslant \int_a^b g(x)\mathrm{d}x<br>\quad (a&lt;b)<br>$$</p></li><li><p>推论 2：$\left|\displaystyle\int_a^b f(x)\mathrm{d}x\right| \leqslant \displaystyle\int_a^b \mid f(x)\mid\mathrm{d}x \quad (a&lt;b)$</p></li><li><p>设$M$及$m$分别是函数$f(x)$在区间$[a, b]$上的最大值及最小值，则</p><p>$$<br>m(b-a)\leqslant \displaystyle\int_a^b f(x)\mathrm{d}x\leqslant M(b-a)<br>$$</p></li><li><p>（定积分中值定理） 如果函数$f(x)$在积分区间$[a, b]$上连续，那么在$[a, b]$上至少存在一个点$\xi$，使得：<br>$$<br>\displaystyle\int_a^b f(x)\mathrm{d}x=f(\xi)(b-a) \quad (a \leqslant\xi\leqslant b)<br>$$<br>几何解释：在区间$[a,\ b]$上至少存在一点$\xi$，使得以区间$[a,\ b]$为底边、以曲线$y=f(x)$为曲边的曲边梯形的面积等于同底边高为$f(\xi)$的一个矩形的面积。按积分中值公式：<br>$$<br>f(\xi)=\frac1{b-a}\int_a^b f(x)\mathrm{d}x<br>$$<br>称为函数$f(x)$在区间$[a,\ b]$上的平均值。</p></li></ol><h3 id="5-2-微积分基本公式"><a href="#5-2-微积分基本公式" class="headerlink" title="5.2 微积分基本公式"></a>5.2 微积分基本公式</h3><h4 id="积分上限函数及其导数"><a href="#积分上限函数及其导数" class="headerlink" title="积分上限函数及其导数"></a>积分上限函数及其导数</h4><p>如果函数$f(X)$在区间$[a, b]$上连续，那么<strong>积分上限的函数</strong></p><p>$$<br>\Phi(x)=\displaystyle\int_a^x f(t)\mathrm{d}t<br>$$</p><p>在$[a, b]$上可导，并且它的导数</p><p>$$<br>\Phi’(x)=\frac{\mathrm{d}}{\mathrm{d}x}\int_a^x f(t)\mathrm{d}t=f(x)<br>\quad (a \leqslant x \leqslant b)<br>$$</p><p>如果函数$f(x)$在区间$[a, b]$上连续，那么函数</p><p>$$<br>\Phi(x)=\int_a^x f(t)\mathrm{d}t<br>$$</p><p>就是$f(X)$在$[a, b]$上的一个原函数。</p><h4 id="牛顿-莱布尼茨公式"><a href="#牛顿-莱布尼茨公式" class="headerlink" title="牛顿-莱布尼茨公式"></a>牛顿-莱布尼茨公式</h4><p>（微积分基本定理）（牛顿-莱布尼兹公式） 如果函数$F(X)$是连续函数$f(X)$在区间$[a, b]$上的一个原函数，那么</p><p>$$<br>\int_a^b f(x)\mathrm{d}x = F(b)-F(a)<br>$$</p><p>或者写成：</p><p>$$<br>\displaystyle\int_a^b f(x)\mathrm{d}x=[F(x)]_a^b<br>$$</p><h3 id="5-3-定积分的换元法和分部积分法"><a href="#5-3-定积分的换元法和分部积分法" class="headerlink" title="5.3 定积分的换元法和分部积分法"></a>5.3 定积分的换元法和分部积分法</h3><h4 id="定积分的换元法"><a href="#定积分的换元法" class="headerlink" title="定积分的换元法"></a>定积分的换元法</h4><p>定理：假设函数$f(x)$在区间$[a, b]$上连续，函数$x=\varphi(t)$满足条件：</p><ol><li>$\varphi(\alpha)=a, , \varphi(\beta)=b;;$</li><li>$\varphi(t)$在$[a, b]$（或$[\beta, \alpha]$）上具有连续函数，且其值域$R_\varphi=[a, b]$（只要$f(x)在R_\varphi$上连续），</li></ol><p>则有：（定积分的换元公式）</p><p>$$<br>\int_a^b f(x)\mathrm{d}x = \int_\alpha^\beta f[\varphi(t)]\varphi’(t)\mathrm{d}t<br>$$</p><blockquote><p>注意：换元后的积分限随新元变化。</p></blockquote><h4 id="定积分的分部积分法"><a href="#定积分的分部积分法" class="headerlink" title="定积分的分部积分法"></a>定积分的分部积分法</h4><p>定积分的分部积分公式：</p><p>$$<br>\begin{align}<br>\int_a^b u(x)v’(x)\mathrm{d}x &amp;=\left[u(x)v(x)-\int v(x)u’(x)\mathrm{d}x\right]_a^b \ &amp;= [u(x)v(x)]_a^b - \int_b^b v(x)u’(x)\mathrm{d}x<br>\end{align}<br>$$</p><p>简记作：</p><p>$$<br>\int_a^b u\mathrm{d}v = [uv]_a^b - \int_a^bv\mathrm{d}u\<br>\int_a^b u\mathrm{d}v=[uv]_a^b - \int_a^b v\mathrm{d}u<br>$$</p><p>特别地，被积函数为奇函数，且定积分区间为对称区间，则：$\displaystyle\int_a^bf(x)\mathrm{d}x = 0 \quad (a=-b)$.</p><h3 id="5-4-反常积分"><a href="#5-4-反常积分" class="headerlink" title="5.4 反常积分"></a>5.4 反常积分</h3><h4 id="无穷限的反常积分"><a href="#无穷限的反常积分" class="headerlink" title="无穷限的反常积分"></a>无穷限的反常积分</h4><p>函数$f(x)$在无穷区间$[a, +\infty)$上的反常积分：</p><p>$$<br>\lim\limits_{t \to + \infty}\displaystyle\int_a^tf(x)\mathrm{d}x<br>$$</p><p>定义 1：设函数$f(x)$在区间$[a, + \infty)$上连续，如果极限$\lim\limits_{t \to + \infty}\displaystyle\int_a^tf(x)\mathrm{d}x$存在，那么称反常积分$\int_a^{+\infty}f(x)\mathrm{d}x$收敛，并称此极限为该反常积分的值；如果极限不存在，那么称反常积分$\int_a^{+\infty}f(x)\mathrm{d}x$发散。</p><p>类似地，$\lim\limits_{t \to -\infty}\displaystyle\int_t^bf(x)\mathrm{d}x$为函数$f(x)$在无穷区间$(-\infty, b]$上的反常积分。</p><p>设函数$f(x)$在区间$(-\infty, +\infty)$上连续，反常积分$\displaystyle\int_{-\infty}^0f(x)\mathrm{d}x$与反常积分$\displaystyle\int_0^{+\infty}f(x)\mathrm{d}x$之和称为函数$f(x)$在无穷区间$(-\infty, +\infty)$上的反常积分，记为：$\displaystyle\int_{-\infty}^{+\infty}f(x)\mathrm{d}x$。如果两积分均收敛，则$\displaystyle\int_{-\infty}^{+\infty}f(x)\mathrm{d}x$收敛，其值为两分段反常积分的和，反之则发散。</p><h4 id="无界函数的反常积分"><a href="#无界函数的反常积分" class="headerlink" title="无界函数的反常积分"></a>无界函数的反常积分</h4><p>如果函数$f(x)$在点$a$的任一邻域内部无界，那么点$a$称为函数$f(x)$的瑕点（无界间断点）。无界函数的反常积分又称为瑕积分。</p><p>定义 2：</p><ol><li><p>设函数$f(x)$在区间$(a, b]$上连续，点$a$为$f(x)$的瑕点，如果极限$\displaystyle\lim\limits_{t \to a^+}\int_t^b f(x)\mathrm{d}x$存在，那么称反常积分$\displaystyle\int_a^bf(x)\mathrm{d}x$收敛，并称此极限为该反常积分的值；如果极限不存在，那么称反常积分发散。</p></li><li><p>设函数$f(x)$在区间$[a, b)$上连续，点$b$为$f(x)$的瑕点，如果极限$\displaystyle\lim\limits_{t \to b^-}\int_a^t f(x)\mathrm{d}x$存在，那么称反常积分$\displaystyle\int_a^bf(x)\mathrm{d}x$收敛，并称此极限为该反常积分的值；如果极限不存在，那么称反常积分发散。</p></li><li><p>设函数$f(x)$在区间$[a,c)$及区间$(a, b]$上连续点$c$为$f(x)$的瑕点。反常积分$\displaystyle\int_a^b f(x)\mathrm{d}x\quad(3)=\displaystyle\int_a^cf(x)\mathrm{d}x\quad(1) +\int_c^bf(x)\mathrm{d}x\quad (2)$称为函数$f(x)$在区间$[a, b]$上的反常积分。若(1)(2)均收敛，那么(3)收敛，(1)+(2)=(3)；否则称反常积分(3)发散。</p></li></ol><h3 id="5-5-反常积分的审敛法-Gamma-函数"><a href="#5-5-反常积分的审敛法-Gamma-函数" class="headerlink" title="5.5 反常积分的审敛法 $\Gamma$函数"></a>5.5 反常积分的审敛法 $\Gamma$函数</h3><h4 id="无穷限反常积分的审敛法"><a href="#无穷限反常积分的审敛法" class="headerlink" title="无穷限反常积分的审敛法"></a>无穷限反常积分的审敛法</h4><p>定理：设函数$f(x)$在区间$[a,\ +\infty)$上连续，且$f(x)\geqslant0$，若函数：$F(x)=\displaystyle\int_a^x f(t)\mathrm{d}t$在$[a, +\infty)$上有界，则反常积分$\displaystyle\int_a^{+\infty}f(x)\mathrm{d}x$收敛。</p><p>定理（比较收敛原理） 设函数$f(x),\ g(x)$在区间$[a,\ +\infty)$上连续。如果$0\leqslant f(x)\leqslant g(x)\ (a\leqslant x&lt;+\infty)$，且$\displaystyle\int_a^{+\infty}g(x)\mathrm d x$收敛，那么$\displaystyle\int_a^{+\infty}f(x)\mathrm d x$也收敛；如果$0\leqslant g(x)\leqslant f(x)\ (a\leqslant x&lt;+\infty)$，且$\displaystyle\int_a^{+\infty}g(x)\mathrm d x$发散，那么$\displaystyle\int_a^{+\infty}f(x)\mathrm d x$也发散。</p><p>定理（比较审敛法 1） 设函数$f(x)$在区间$[a,\ +\infty)、 (a &gt; 0)$上连续且$f(x)\geqslant 0$。如果存在常数$M&gt;0, p&gt;1$使得$f(x)\leqslant\frac M{x^p}\ (a\leqslant x &lt; +\infty)$，那么反常积分$\displaystyle\int_a^{+\infty}f(x)\mathrm d x$收敛；如果存在常数$N&gt;0$，使得$f(x)\geqslant\frac Nx\ (a\leqslant x&lt;+\infty)$，那么反常积分$\displaystyle\int_a^{+\infty}f(x)\mathrm d x$发散。</p><p>定理（极限审敛法 1） 设函数$f(x)$在区间$[a,\ +\infty]$上连续，且$f(x)\leqslant 0$。如果存在常数$p&gt;1$，使得$\lim\limits_{x\to +\infty}x^p f(x) = c&lt;+\infty$，那么反常积分$\displaystyle\int_a^{+\infty}f(x)\mathrm d x$收敛；如果$\lim\limits_{x\to+\infty}x f(x)=d&gt;0$，那么反常积分$\displaystyle\int_a^{+\infty}f(x)\mathrm d x$发散。</p><p>定理：设函数$f(x)$在区间$[a,\ +\infty)$上连续，如果反常积分$\displaystyle\int_a^{+\infty}|f(x)|\mathrm d x$收敛，那么反常积分$\displaystyle\int_a^{+\infty}f(x)\mathrm d x$收敛。此定理称为满足<strong>绝对收敛</strong>。</p><h4 id="无界函数的反常积分审敛法"><a href="#无界函数的反常积分审敛法" class="headerlink" title="无界函数的反常积分审敛法"></a>无界函数的反常积分审敛法</h4><p>定理（比较审敛法 2） 设函数$f(x)$在区间$(a,\ b]$上连续，且$f(x)\geqslant 0,\ x=a$为$f(x)$的瑕点。如果存在常数#=$M&gt;0,q&lt;1$使得$f(x)\leqslant \frac M{(x-a)^q}\ (a&lt;x\leqslant b)$那么反常积分$\displaystyle\int_a^b f(x)\mathrm d x$收敛；如果存在常数$N&gt;0$，使得$f(x)\geqslant\frac N{x-a}\ (a&lt;x\leqslant b)$，那么反常积分$\displaystyle\int_a^b f(x)\mathrm d x$发散。</p><p>定理（极限审敛法 2） 设函数$f(x)$在区间$(a,\ b]$上连续，且$f(x)\geqslant 0,\ x=a$为$f(x)$的瑕点。如果存在常数$0&lt;q&lt;1$，使得$\lim\limits_{x\to a^+}(x-a)^q f(x)$存在，那么反常积分$\displaystyle\int_a^b f(x)\mathrm d x$收敛；如果$\lim\limits_{x\to a^+}(x-a)f(x)=d&gt;0$那么反常积分$\displaystyle\int_a^b f(x)\mathrm d x$发散。</p><h4 id="Gamma-函数"><a href="#Gamma-函数" class="headerlink" title="$\Gamma$函数"></a>$\Gamma$函数</h4><ol><li><p>递推公式 $\Gamma(s+1)=s\Gamma(s)\ (s&gt;0)$</p></li><li><p>当$s\to0^+$时，$\Gamma(s)\to +\infty$</p></li><li><p>$\Gamma(s)\Gamma(1-s)=\frac\pi{\sin \pi s}\ (0&lt;s&lt;1)$</p></li><li><p>在$\Gamma(s)=\displaystyle\int_0^{+\infty}e^{-x}x^{s-1}\mathrm d x$中，作代换$x=u^2$，有$\Gamma(s)=2\displaystyle\int_0^{+\infty}e^{-u^2}u^{2s-1}\mathrm d u$</p><p>令$s=\frac 1 2$得：$2\displaystyle\int_0^{+\infty}e^{-u^2}\mathrm d u=\Gamma(\frac 1 2)=\sqrt\pi$</p><p>从而得到概率论常用积分$\displaystyle\int_0^{+\infty}e^{-u^2}\mathrm d u=\frac{\sqrt\pi}2$</p></li></ol><hr><h2 id="定积分的应用"><a href="#定积分的应用" class="headerlink" title="定积分的应用"></a>定积分的应用</h2><h3 id="6-1-定积分的元素法"><a href="#6-1-定积分的元素法" class="headerlink" title="6.1 定积分的元素法"></a>6.1 定积分的元素法</h3><p>一般地，如果某一实际问题中所求量$U$符合以下条件：</p><ol><li>$U$是一个与变量$x$的变化区间$[a,\ b]$有关的量；</li><li>$U$对于区间$[a,\ b]$具有可加性，就是说可以吧$U$分成许多部分区间；</li><li>部分量$\Delta U_i$的近似值可表示为$f(\xi_i)\Delta x_i$</li></ol><p>那么就可以用定积分来表达$U$。</p><p>积分表达式的步骤是：</p><ol><li><p>选取一个积分变量$x$，并确定积分区间$[a,\ b]$；</p></li><li><p>把区间$[a,\ b]$分成$n$个小区间，任一小区间记作$[x,\ x+\mathrm d x]$，$\Delta U$近似表示为连续函数在$x$处的值$f(x)$与$\mathrm d x$的乘积，称为量$U$的元素：</p><p>$$<br>\mathrm d U=f(x)\mathrm d x<br>$$</p></li><li><p>在区间上的定积分：<br>$$<br>U=\int_a^b f(x)\mathrm d x<br>$$</p></li></ol><h3 id="6-2-定积分在几何学上的应用"><a href="#6-2-定积分在几何学上的应用" class="headerlink" title="6.2 定积分在几何学上的应用"></a>6.2 定积分在几何学上的应用</h3><h4 id="平面图形的面积"><a href="#平面图形的面积" class="headerlink" title="平面图形的面积"></a>平面图形的面积</h4><ol><li>直角坐标</li><li>极坐标</li></ol><h4 id="体积"><a href="#体积" class="headerlink" title="体积"></a>体积</h4><ol><li>旋转体的体积</li><li>平行截面面积已知的立体体积</li></ol><h4 id="平面曲线的弧长"><a href="#平面曲线的弧长" class="headerlink" title="平面曲线的弧长"></a>平面曲线的弧长</h4><p>定理：光滑曲线弧是可求长的</p><h3 id="6-3-定积分在物理上的应用"><a href="#6-3-定积分在物理上的应用" class="headerlink" title="6.3 定积分在物理上的应用"></a>6.3 定积分在物理上的应用</h3><h4 id="变力沿直线所作的功"><a href="#变力沿直线所作的功" class="headerlink" title="变力沿直线所作的功"></a>变力沿直线所作的功</h4><h4 id="水压力"><a href="#水压力" class="headerlink" title="水压力"></a>水压力</h4><h4 id="引力"><a href="#引力" class="headerlink" title="引力"></a>引力</h4><hr><h2 id="七-微分方程"><a href="#七-微分方程" class="headerlink" title="七. 微分方程"></a>七. 微分方程</h2><h3 id="7-1-微分方程的基本概念"><a href="#7-1-微分方程的基本概念" class="headerlink" title="7.1 微分方程的基本概念"></a>7.1 微分方程的基本概念</h3><p>定义：</p><ol><li>表示未知函数、未知函数的导数与自变量之间的关系的方程，叫做<strong>微分方程</strong>。微分方程中出现未知函数的最高阶数，叫做<strong>微分方程的阶</strong>。</li><li>找出满足微分方程的函数，带入微分方程后称为恒等式，这个函数称为<strong>微分方程的解</strong>。如果微分方程中含有任一常数，且任意常数的个数与微分方程的阶数相同，这样的解称为<strong>微分方程的通解</strong>。</li><li>设微分方程中的未知函数为$y=\varphi(x)$，如果微分方程是一阶的，通常用来确定任意常数的条件是：$x=x_0$时$y=y_0$或写成$y|<em>{x=x_0}=y_0$其中$x_0,\ y_0$都是给定值；如果微分方程是二阶的，通常用来确定任意常数的条件是：$y|</em>{x=x_0}=y_0,\ y’|_{x=x_0}=y’_0$其中$x_0,\ y_0,\ y’_0$都是给定值。上述条件叫做<strong>初值条件</strong>。</li><li>确定通解中任意常数之后，就得到了<strong>微分方程的特解</strong>。求微分方程满足初值条件的特解，叫做微分方程的<strong>初值问题</strong>。</li><li>积分方程的解是一条曲线，叫做<strong>微分方程的积分曲线</strong></li></ol><h3 id="7-2-可分离变量的微分方程"><a href="#7-2-可分离变量的微分方程" class="headerlink" title="7.2 可分离变量的微分方程"></a>7.2 可分离变量的微分方程</h3><p>一般地，如果一个一阶微分方程能写成</p><p>$$<br>g(y)\mathrm d y=f(x)\mathrm d x<br>\tag1<br>$$</p><p>的形式，就是说，能把微分方程写成一端只含$y$的函数和$\mathrm d y$，另一端只含$x$的函数和$\mathrm d x$，那么原方程就称为<strong>可分离变量的微分方程</strong>。</p><p>设$y=\varphi(x)$是方程的解，带入上述方程得恒等式</p><p>$$<br>g[\varphi(x)]\varphi’(x)\mathrm d x=f(x)\mathrm d x<br>$$</p><p>将上式两端积分，并由$y=\varphi(x)$引进变量$y$，得</p><p>$$<br>\int g(y)\mathrm d y=\int f(x)\mathrm d x<br>$$</p><p>设$G(y),\ F(x)$为$g(y),\ f(x)$的原函数有</p><p>$$<br>G(y)=F(x) + C<br>\tag2<br>$$</p><p>(2)式叫做方程(1)的隐式通解。</p><h3 id="7-3-齐次方程"><a href="#7-3-齐次方程" class="headerlink" title="7.3 齐次方程"></a>7.3 齐次方程</h3><h4 id="齐次方程"><a href="#齐次方程" class="headerlink" title="齐次方程"></a>齐次方程</h4><p>如果微分方程可化成</p><p>$$<br>\frac{\mathrm d y}{\mathrm d x}=\varphi \left(\frac y x\right)<br>$$</p><p>的形式，那么这方程为<strong>齐次方程</strong></p><p>解题步骤</p><ul><li>将方程转化为$\frac{\mathrm d y}{\mathrm d x}=\varphi(\frac y x)$的形式</li><li>引入新的函数$u=\frac y x$</li><li>带入方程得，$y=ux,\ \frac{\mathrm d y}{\mathrm d x}=\varphi u$</li><li>得方程$\varphi(u)$</li><li>分离变量为$\frac{\mathrm d u}{\varphi(u)}=\frac{\mathrm d x}{x}$</li><li>两端积分得$\displaystyle\int\frac{\mathrm d u}{\varphi(u)}=\displaystyle\int\frac{\mathrm d x}x$</li><li>将$\frac y x$带入$u$得方程的通解</li></ul><h4 id="可化为齐次的方程"><a href="#可化为齐次的方程" class="headerlink" title="可化为齐次的方程"></a>可化为齐次的方程</h4><p>方程</p><p>$$<br>\frac{\mathrm d y}{\mathrm d x}=\frac{ax+by+c}{a_1x+b_1y+c_1}<br>\tag 1<br>$$</p><p>当$c=c_1=0$时是齐次的，否则不是齐次的。在非齐次的情形下，可以通过变换把它变成齐次方程。令</p><p>$$<br>x=X+h,\ y=Y+k<br>$$</p><p>其中$h, k$是待定的常数，于是</p><p>$$<br>\mathrm d x=\mathrm d X,\ \mathrm d y=\mathrm dY<br>$$</p><p>从而有</p><p>$$<br>\frac{\mathrm d Y}{\mathrm d X}=\frac{aX+bY+ah+bk+c}{a_1X+b_1Y+a_1h+c_1}<br>$$</p><p>如果对于方程组</p><p>$$<br>\begin{cases}<br>\begin{align}<br>ah&amp;+bk+c=0,\<br>a_1h&amp;+b_1k+c_1=0<br>\end{align}<br>\end{cases}<br>$$</p><p>的系数行列式</p><p>$$<br>\left|<br>\begin{array}<br>{cc}<br>a&amp;b\<br>a_1&amp;b_1<br>\end{array}<br>\right|\neq 0<br>$$</p><p>方程(1)可化为齐次方程</p><p>$$<br>\frac{\mathrm dY}{\mathrm dX}=\frac{aX+bY}{a_1X+b_1Y}<br>$$</p><p>求出这个齐次方程的通解后，将$X \rarr x-h,\ Y \rarr y-k$代换后得到方程(1)的通解。</p><p>当行列式等于零时，$h,\ k$无法求得，令$\frac {a_1}a=\frac{b_1}b=\lambda$，从而方程(1)写成：</p><p>$$<br>\frac{\mathrm d y}{\mathrm d x}=\frac{ax+by+c}{\lambda(ax+by)+c_1}<br>$$</p><p>引入新变量$v=ax+by$，则</p><p>$$<br>\frac{\mathrm d v}{\mathrm d x}=a+b\frac{\mathrm d y}{\mathrm d x}<br>$$</p><p>方程(1)成为</p><p>$$<br>\frac 1 b\left(\frac{\mathrm dv}{\mathrm d x}-a\right)=\frac{v+c}{\lambda v+c_1}<br>$$</p><p>这是可分离变量的方程。</p><h3 id="7-4-一阶线性微分方程"><a href="#7-4-一阶线性微分方程" class="headerlink" title="7.4 一阶线性微分方程"></a>7.4 一阶线性微分方程</h3><h4 id="线性方程"><a href="#线性方程" class="headerlink" title="线性方程"></a>线性方程</h4><p>方程</p><p>$$<br>\frac{\mathrm d y}{\mathrm d x}=P(x)y=Q(x)<br>\tag1<br>$$</p><p>叫做<strong>一阶线性微分方程</strong>。如果$Q(x)\equiv0$那么方程(1)成为齐次的，否则称为非齐次的。</p><p>为了求出非齐次方程的解，先换为齐次方程</p><p>$$<br>\frac{\mathrm d y}{\mathrm d x}+P(x)=0<br>\tag2<br>$$</p><p>方程(2)叫做对应于非齐次线性方程(1)的<strong>齐次线性方程</strong>，分离变量之后得</p><p>$$<br>\frac{\mathrm d y}y=-P(x)\mathrm d x<br>$$</p><p>两端积分积分得</p><p>$$<br>\ln|y|=-\int P(x)\mathrm d x+C_1\ \Downarrow \<br>y=Ce^{-\int P(x)\mathrm d x} (C \pm e^{C_1})<br>\tag3<br>$$</p><p>这是对应齐次线性方程(2)的通解。通过<strong>常数变易法</strong>求(1)的通解，将(3)中的$C\rarr u(x)$，即作变换</p><p>$$<br>y=ue^{-\int P(x)\mathrm d x}<br>\tag4<br>$$</p><p>于是</p><p>$$<br>\frac{\mathrm d y}{\mathrm d x}=u’e^{-\int P(x)\mathrm d x}-uP(x)e^{-\int P(x)\mathrm d x}<br>\tag5<br>$$</p><p>将(4)和(5)带入方程(1)得</p><p>$$<br>u’e^{-\int P(x)\mathrm d x}=Q(x),\ u’=Q(x)e^{\int P(x)\mathrm dx}<br>$$</p><p>两端积分</p><p>$$<br>u=\int Q(x)e^{\int P(x)\mathrm d x}\mathrm dx+C<br>$$</p><p>把上式带入(4)得非齐次线性方程(1)的通解</p><p>$$<br>y=e^{-\int P(x)\mathrm d x}\left(\int Q(x) e^{\int P(x)\mathrm d}\mathrm d x +C\right)\<br>y=Ce^{-\int P(x)\mathrm dx}+e^{-\int P(x)\mathrm dx}\int Q(x)e^{\int P(x)\mathrm dx}\mathrm dx<br>$$</p><h4 id="伯努利方程"><a href="#伯努利方程" class="headerlink" title="伯努利方程"></a>伯努利方程</h4><p>方程</p><p>$$<br>\frac{\mathrm d y}{\mathrm d x}+P(x)y=Q(x)y^n<br>$$</p><p>叫做<strong>伯努利方程</strong>。当$n=0,\ n=1$为线性微分方程，否则不是线性的。</p><h3 id="7-5-可降阶的高阶微分方程"><a href="#7-5-可降阶的高阶微分方程" class="headerlink" title="7.5 可降阶的高阶微分方程"></a>7.5 可降阶的高阶微分方程</h3><h4 id="y-n-f-x-型微分方程"><a href="#y-n-f-x-型微分方程" class="headerlink" title="$y^{(n)}=f(x)$型微分方程"></a>$y^{(n)}=f(x)$型微分方程</h4><p>因为右端仅含有自变量$x$，只要把$y^{(n-1)}$作为新的未知函数。两边积分得</p><p>$$<br>y^{(n-1)}=\int f(x)\mathrm d x +C_1<br>$$</p><p>接下来同理可得</p><p>$$<br>y^{(n-2)}=\int\left[\int f(x)\mathrm dx +C_1\right]\mathrm dx +C_2<br>$$</p><h4 id="y’’-f-x-y’-型微分方程"><a href="#y’’-f-x-y’-型微分方程" class="headerlink" title="$y’’=f(x, y’)$型微分方程"></a>$y’’=f(x, y’)$型微分方程</h4><p>右端不含未知数$y$，如果设$y’=p$，那么</p><p>$$<br>y’’=\frac{\mathrm d p}{\mathrm d x}=p’<br>$$</p><p>原方程得</p><p>$$<br>p’=f(x, p)<br>$$</p><p>这是一个关于变量$x,\ p$得一阶微分方程，设其通解为</p><p>$$<br>p=\varphi(x, C_1),\<br>p=\frac{\mathrm d y}{\mathrm d x}.\<br>\Downarrow\<br>\frac{\mathrm d y}{\mathrm d x}=\varphi(x,\ C_1)<br>$$</p><p>进行积分，得方程通解</p><p>$$<br>y=\int\varphi(x,\ C_1)\mathrm d x+C_2<br>$$</p><h4 id="y’’-y-y’-型微分方程"><a href="#y’’-y-y’-型微分方程" class="headerlink" title="$y’’=(y,\ y’)$型微分方程"></a>$y’’=(y,\ y’)$型微分方程</h4><p>令$y’=p$利用复合函数得求导法则把$y’’$化为对$y$的导数</p><p>$$<br>y’’=\frac{\mathrm d p}{\mathrm d}y’’=\frac{\mathrm d p}{\mathrm d x}=\frac{\mathrm d p}{\mathrm d y}\cdot\frac{\mathrm dy}{\mathrm d x}=p\frac{\mathrm d p}{\mathrm d y}<br>$$</p><p>方程则变为</p><p>$$<br>p\frac{\mathrm d p}{\mathrm d y}=f(y,\ p)<br>$$</p><p>这是一个关于变量$y, p$得一阶微分方程，设通解为$y’=p=\varphi(y,\ C_1)$，分离变量并积分得原方程的通解为</p><p>$$<br>\int\frac{\mathrm d y}{\varphi(y,\ C_1)}=x+C_2<br>$$</p><h3 id="7-6-高阶线性微分方程"><a href="#7-6-高阶线性微分方程" class="headerlink" title="7.6 高阶线性微分方程"></a>7.6 高阶线性微分方程</h3><h4 id="二阶线性微分方程举例"><a href="#二阶线性微分方程举例" class="headerlink" title="二阶线性微分方程举例"></a>二阶线性微分方程举例</h4><h4 id="线性微分方程解的结构"><a href="#线性微分方程解的结构" class="headerlink" title="线性微分方程解的结构"></a>线性微分方程解的结构</h4><p>有二阶齐次线性方程</p><p>$$<br>y’’+P(x)y’+Q(x)y=0<br>\tag 1<br>$$</p><p>定理：如果函数$y_1(x)$与$y_2(x)$是方程的两个解，那么$y=C_1y_1(x)+C_2y_2(x)$也是方程的解。</p><p>设$y_1(x),y_2(x),\cdots,y_n(x)$为定义在区间$I$上的$n$个函数，如果存在$n$个不全为零的常数$k_1,k_2,\cdots,k_n$，使得当$x\in I$时恒有等式：</p><p>$$<br>k_1y_1+k_2y_2+\cdots+k_ny_n\equiv 0<br>$$</p><p>成立，那么称这$n$个 函数在区间$I$上<strong>线性相关</strong>；否则称<strong>线性无关</strong>。</p><p>定理：如果$y_1(x)$与$y_2(x)$是方程的两个线性无关的特解，那么</p><p>$$<br>y=C_1y_1(x)+C_2y_2(x)<br>$$</p><p>就是方程的通解。</p><p>推论：如果$y_1(x),y_2(x),\cdots,y_n(x)$是$n$阶齐次方程$y^{(n)}+a_1(x)y^{(n-1)}+\cdots+a_{n-1}(x)y’+a_n(x)y=0$的$n$个线性无关的解，那么，此方程的通解为</p><p>$$<br>y=C_1y_1(x)+C_2y_2(x)+\cdots+C_ny_n(x)<br>\tag 2<br>$$</p><p>其中$C_n$为任意常数。</p><p>定理：设$y^*(x)$是二阶非齐次线性方程</p><p>$$<br>y’’+P(x)y’+Q(x)=f(x)<br>\tag3<br>$$</p><p>的一个特解。$Y(x)$是与对应齐次方程(1)的通解，则$y=Y(x)+y^*(x)$是二阶非齐次线性微分方程(3)的通解。</p><p>定理（线性微分方程解的叠加原理）：设非齐次线性方程(3)的右端$f(x)$是两个函数之和：$y’’+P(x)y’+Q(x)y=f_1(x)+f_2(x)$，而$y_1^<em>(x),\ y_2^</em>$分别是方程：</p><p>$$<br>y’’+P(x)y’+Q(x)y=f_1(x)\<br>y’’+P(x)y’+Q(x)y=f_2(x)<br>$$</p><p>的特解，则$y_1^<em>(x)+y_2^</em>(x)$就是原方程的特解。</p><h4 id="常数变易法"><a href="#常数变易法" class="headerlink" title="常数变易法"></a>常数变易法</h4><p>如果已知齐次方程(1)的通解为：$Y(x)=C_1y_1(x)+C_2y_2(x)$，那么可以由常数变易法求非齐次方程(3)的通解。令</p><p>$$<br>y=y_1(x)v_1+y_2(x)v_2<br>\tag4<br>$$</p><p>对(4)式求导得</p><p>$$<br>y’=y_1v_1’+y_2v_2’+y_1’v_1+y_2’v_2<br>$$</p><p>为了使$y’’$的表示式中不含$v_1’’,\ v_2’’$，可设$y_1v_1’+y_2v_2’=0$，从而$y’=y_1’v_1+y_2’v_2$，再求导得</p><p>$$<br>y’’=y_1’v_1’+y_2’v_2’+y_1’’v_1+y_2’’v_2<br>$$</p><p>把$y,\ y’,\ y’’$带入方程并整理</p><p>$$<br>y_1’v_1’+y_2’v_2’+(y_1’’+Py_1’+Qy_1)v_1+(y_2’’+Py_2’+Qy_2)v_2=f<br>$$</p><p>其中$y_1,\ y_2$是齐次方程(1)的解，故上式即为</p><p>$$<br>y_1’v_1’+y_2’v_2’=f<br>$$</p><p>联立方程，有系数行列式</p><p>$$<br>W= \left|<br>\begin{array}<br>{cc}<br>y_1&amp;y_2\<br>y_1’&amp;y_2’<br>\end{array}<br>\right|<br>=y_1y_2’-y_1’y_2\neq0<br>$$</p><p>解得：$v_1’=-\frac{y_2f}{W},\ v_2’=\frac{y_1f}{W}$</p><p>对上两式积分得</p><p>$$<br>v_1=C_1+\int\left(-\frac{y_2f}{W}\right)\mathrm d x,\quad v_2=C_2+\int\frac{y_1 f}{W}\mathrm d x<br>$$</p><p>于是得非齐次方程(3)的通解为</p><p>$$<br>y=C_1y_1+C_2y_2-y_1\int\frac{y_2f}{W}\mathrm d x+y_2\int\frac{y_1f}{W}\mathrm d x<br>$$</p><h3 id="7-7-常系数齐次线性微分方程"><a href="#7-7-常系数齐次线性微分方程" class="headerlink" title="7.7 常系数齐次线性微分方程"></a>7.7 常系数齐次线性微分方程</h3><p>二阶齐次线性微分方程</p><p>$$<br>y’’+P(x)y’+Q(x)y=0<br>\tag1<br>$$</p><p>如果$y’,y$的系数$P(x),\ Q(x)$均为常数，即(1)式成为</p><p>$$<br>y’’+py’+qy=0<br>\tag 2<br>$$</p><p>其中$p,q$是常数，那么称(2)为<strong>二阶常系数齐次线性微分方程</strong>。如果$p,q$不全为常数，称(1)为<strong>二阶变系数齐次线性微分方程</strong>。</p><p>求二阶常系数齐次线性微分方程$y’’+py’+qy=0$的通解步骤如下：</p><ol><li><p>写出微分方程(2)的特征方程：</p><p>$$<br>r^2+pr+q=0<br>\tag3<br>$$</p></li><li><p>根据特征方程(3)求两个根$r_1,\ r_2$</p></li><li><p>根据特征方程(3)的两个根的不同情形，按照下列表格写出微分方程(2)的通解</p><table><thead><tr><th>$r_1,\ r_2$</th><th>通解</th></tr></thead><tbody><tr><td>两个不相等的实根</td><td>$y=C_1e^{r_1x}+C_2e^{r_2x}$</td></tr><tr><td>两个相等的实根$r_1=r_2$</td><td>$y=(C_1+C_2x)e^{r_1x}$</td></tr><tr><td>一对共轭复根$r_{1,2}=\alpha\pm\beta i$</td><td>$y=e^{\alpha x}(C_1\cos\beta x+C_2\sin\beta x)$</td></tr></tbody></table></li></ol><p><strong>n 阶常系数齐次线性微分方程</strong>的一般形式是</p><p>$$<br>y^{(n)}+p_1y^{(n-1)}+p_2y^{(n-2)}+\cdots+p_{n-1}y’+p_ny=0<br>\tag 4<br>$$</p><p>用记号$\mathrm D$（叫做微分算子）表示对$x$求导的运算$\frac{\mathrm d}{\mathrm d x}$，把$\frac{\mathrm d y}{\mathrm d x}$记作$\mathrm Dy$，把$\frac{\mathrm d^n y}{\mathrm d x^n}$记作$\mathrm D^n y$，并把方程记作</p><p>$$<br>(\mathrm D^n+p_1\mathrm D^{n-1}+\cdots+p_{n-1}\mathrm D+p_n)y=0<br>\tag 5<br>$$</p><p>记</p><p>$$<br>L(\mathrm D)=\mathrm D^n+p_1\mathrm D^{n-1}+\cdots+p_{n-1}\mathrm D<br>$$</p><p>$L(\mathrm D)$叫做<strong>微分算子 D 的 n 次多项式</strong>，于是上式记作$L(\mathrm D)y=0$。把$y=e^{rx}$带入方程，得</p><p>$$<br>L(r)e^{rx}=0<br>$$</p><p>如果选取$r$是$n$次代数方程$L(r)=0$，即</p><p>$$<br>r^n+p_1r^{n-1}+p_2r^{n-2}+\cdots+p_{n-1}r+p_n=0<br>\tag 6<br>$$</p><p>的根，那么作出的函数$y=e^{rx}$就是方程(5)的一个解。方程(6)是方程(5)的特征方程。</p><p>根据特征方程的根，写出如下的解：</p><table><thead><tr><th>特征方程的根</th><th>通解中的对应项</th></tr></thead><tbody><tr><td>单实根$r$</td><td>一项：$Ce^{rx}$</td></tr><tr><td>一对单复根$r_{1,2}=\alpha\pm\beta \mathrm i$</td><td>两项：$e^{\alpha x}(C_1\cos\beta x+C_2\sin\beta x)$</td></tr><tr><td>$k$重实根$r$</td><td>给出$k$项：$e^{rx}(C_1+C_2 x+\cdots+C_k x^{k-1})$</td></tr><tr><td>一对$k$重复根$r_{1,2}=\alpha\pm\beta \mathrm i$</td><td>给出$2k$项：$e^{\alpha x}[(C_1+C_2 x+\cdots+C_k x^{k-1})\cos\beta x+(D_1+D_2 x+\cdots+D_k x^{k-1})\sin\beta x]$</td></tr></tbody></table><h3 id="7-8-常系数非齐次线性微分方程"><a href="#7-8-常系数非齐次线性微分方程" class="headerlink" title="7.8 常系数非齐次线性微分方程"></a>7.8 常系数非齐次线性微分方程</h3><p>$f(x)$的两种形式为：</p><ol><li><p>$f(x)=e^{\lambda x}P_m(x)$，其中$\lambda$是常数，$P_m(x)$是$x$的一个$m$次多项式：</p><p>$$<br>P_m(x)=a_0x^m+a_1x^{m-1}+\cdots+a_{m-1}x+a_m<br>$$</p></li><li><p>$f(x)=e^{\lambda x}[P_l(x)\cos\omega x+Q_n(x)\sin\omega x]$，其中$\lambda,\ \omega$是常数，$\omega\neq0, P_l(x),\ Q_n(x)$分别是$x$的$l,\ n$次多项式，且仅有一个可为零。</p></li></ol><h4 id="一、-f-x-e-lambda-x-P-m-x"><a href="#一、-f-x-e-lambda-x-P-m-x" class="headerlink" title="一、$f(x)=e^{\lambda x}P_m(x)$"></a>一、$f(x)=e^{\lambda x}P_m(x)$</h4><h4 id="二、-f-x-e-lambda-x-P-1-x-cos-omega-x-Q-n-x-sin-omega-x"><a href="#二、-f-x-e-lambda-x-P-1-x-cos-omega-x-Q-n-x-sin-omega-x" class="headerlink" title="二、$f(x)=e^{\lambda x}[P_1(x)\cos\omega x+Q_n(x)\sin\omega x]$"></a>二、$f(x)=e^{\lambda x}[P_1(x)\cos\omega x+Q_n(x)\sin\omega x]$</h4><h3 id="7-9-欧拉方程"><a href="#7-9-欧拉方程" class="headerlink" title="7.9 欧拉方程"></a>7.9 欧拉方程</h3><p>$$<br>x^ny^{(n)}+p_1x^{n-1}y^{(n-1)}+\cdots+p_{n-1}xy’+p_ny=f(x)<br>$$</p><p>其中$p_1,p_2,\cdots,p_n$为常数，叫做<strong>欧拉方程</strong></p><p>作变换$x=e^t,\ t=\ln x$，将自变量$x$换成$t$，有：</p><p>$$<br>\begin{align}<br>\frac{\mathrm dy}{\mathrm dx}&amp;=\frac{\mathrm dy}{\mathrm dt}\cdot\frac{\mathrm dt}{\mathrm dx}=\frac1x\frac{\mathrm dy}{\mathrm dt},\<br>\frac{\mathrm d^2y}{\mathrm dx^2}&amp;=\frac{1}{x^2}(\frac{\mathrm d^2 y}{\mathrm dt^2}-\frac{\mathrm dy}{\mathrm dt}),\<br>\frac{\mathrm d^3y}{\mathrm dx^3}&amp;=\frac{1}{x^3}(\frac{\mathrm d^3y}{\mathrm dt^3}-3\frac{\mathrm d^2y}{\mathrm dt^2}+2\frac{\mathrm dy}{\mathrm dt})<br>\end{align}<br>$$</p><p>一般地有</p><p>$$<br>x^ky^{(k)}=\mathrm D(\mathrm D-1)\cdots(\mathrm D-k+1)y<br>$$</p><p>便得一个以$t$为自变量的常系数线性微分方程。求出方程的解后，把$t$换成$\ln x$，即得方程的解。</p><h3 id="7-10-常系数线性微分方程组解法举例"><a href="#7-10-常系数线性微分方程组解法举例" class="headerlink" title="7.10 常系数线性微分方程组解法举例"></a>7.10 常系数线性微分方程组解法举例</h3>]]></content>
    
    <summary type="html">
    
      高等数学笔记
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="笔记" scheme="https://ryzenx.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="总结" scheme="https://ryzenx.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="高等数学" scheme="https://ryzenx.com/tags/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 基础问题 2203</title>
    <link href="https://ryzenx.com/2022/03/JS-questions-2203/"/>
    <id>https://ryzenx.com/2022/03/JS-questions-2203/</id>
    <published>2022-03-10T11:17:36.000Z</published>
    <updated>2022-09-18T02:06:02.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-基础问题-2203"><a href="#JavaScript-基础问题-2203" class="headerlink" title="JavaScript 基础问题 2203"></a>JavaScript 基础问题 2203</h1><p>一些网上收集到的面试题总结…</p><span id="more"></span><h2 id="1-类型转换"><a href="#1-类型转换" class="headerlink" title="1. 类型转换"></a>1. 类型转换</h2><blockquote><p>参考：<a href="https://juejin.cn/post/7018851549170368520">https://juejin.cn/post/7018851549170368520</a></p></blockquote><p>在JavaScript中，加法的规则其实很简单，只有两种情况：</p><ul><li>数字和数字相加</li><li>字符串和字符串相加</li></ul><p>所有其他类型的值都会被自动转换成这两种类型的值</p><p>在JavaScript中，一共有两种类型的值:</p><ul><li>原始值有：<code>undefined</code>、<code>null</code>、 布尔值(<code>Boolean</code>)、 数字(<code>Number</code>)、字符串(<code>String</code>)、<code>Symbol</code></li><li>对象值：其他的所有值都是对象类型的值，包括数组(arrays)和函数(functions)</li></ul><p>加法运算符会触发三种类型转换：将值转换为原始值、转换为数字、转换为字符串，这刚好对应了JavaScript引擎内部的三种抽象操作：</p><ul><li><code>ToPrimitive()</code></li><li><code>ToNumber()</code></li><li><code>ToString()</code></li></ul><h3 id="通过-ToPrimitive-将值转换为原始值"><a href="#通过-ToPrimitive-将值转换为原始值" class="headerlink" title="通过 ToPrimitive() 将值转换为原始值"></a>通过 ToPrimitive() 将值转换为原始值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ToPrimitive(input, PreferredType?)</span><br></pre></td></tr></table></figure><p>可选参数<code>PreferredType</code>可以是<code>Number</code>或者<code>String</code>它只代表了一个转换的偏好，转换结果不一定必须是这个参数所指的类型，但转换结果一定是一个原始值。如果<code>PreferredType</code>被标志为<code>Number</code>，则会进行下面的操作来转换输入的值：</p><ol><li>如果输入的值已经是个原始值，则直接返回它。</li><li>否则，如果输入的值是一个对象。则调用该对象的<code>valueOf()方法</code>。如果<code>valueOf()方法</code>的返回值是一个原始值，则返回这个原始值。</li><li>否则，调用这个对象的<code>toString()方法</code>。如果<code>toString()</code>方法的返回值是一个原始值，则返回这个原始值。</li><li>否则，抛出<code>TypeError</code>异常。</li></ol><p>如果<code>PreferredType</code>被标志为<code>String</code>，则转换操作的第二步和第三步的顺序会调换。如果没有<code>PreferredType</code>这个参数，则<code>PreferredType</code>的值会按照这样的规则来自动设置: <code>Date</code>类型的对象会被设置为<code>String</code>，其它类型的值会被设置为<code>Number</code>。</p><h3 id="通过-ToNumber-将值转换为数字"><a href="#通过-ToNumber-将值转换为数字" class="headerlink" title="通过 ToNumber() 将值转换为数字"></a>通过 ToNumber() 将值转换为数字</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>NaN</code></td></tr><tr><td><code>null</code></td><td><code>+0</code></td></tr><tr><td>布尔值</td><td>true被转换为 <code>1</code>，false转换为<code>0</code></td></tr><tr><td>数字</td><td>无需转换</td></tr><tr><td>字符串</td><td>由字符串解析为数字。例如：<code>&quot;324&quot;</code>被转换为<code>324</code></td></tr></tbody></table><p>如果输入的值是一个对象，则会首先会调用<code>ToPrimitive(obj, Number)</code>将该对象转换为原始值,然后在调用<code>ToNumber()</code>将这个原始值转换为数字。</p><h3 id="通过-ToString-将值转换为字符串"><a href="#通过-ToString-将值转换为字符串" class="headerlink" title="通过 ToString() 将值转换为字符串"></a>通过 ToString() 将值转换为字符串</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>&quot;undefined&quot;</code></td></tr><tr><td><code>null</code></td><td><code>&quot;null&quot;</code></td></tr><tr><td>布尔值</td><td><code>&quot;true&quot; 或者</code> <code>&quot;false&quot;</code></td></tr><tr><td>数字</td><td>数字作为字符串，比如。 <code>&quot;1.765&quot;</code></td></tr><tr><td>字符串</td><td>无需转换</td></tr></tbody></table><p>如果输入的值是一个对象，则会首先会调用<code>ToPrimitive(obj, String)</code>将该对象转换为原始值，然后再调用<code>ToString()</code>将这个原始值转换为字符串。</p><h2 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2. 作用域"></a>2. 作用域</h2><blockquote><p>参考：<a href="https://blog.fundebug.com/2019/03/15/understand-javascript-scope/">https://blog.fundebug.com/2019/03/15/understand-javascript-scope/</a></p></blockquote><h3 id="ES6-之前"><a href="#ES6-之前" class="headerlink" title="ES6 之前"></a>ES6 之前</h3><p>只有<strong>全局作用域</strong>和<strong>函数作用域</strong></p><p><strong>全局作用域</strong>：</p><ul><li>直接定义的变量和函数</li><li>未定义直接赋值的变量</li><li><code>window</code>/<code>global</code>对象的属性</li></ul><p><strong>函数作用域</strong>：</p><p>在函数内部声明的变量或者内层函数，多层作用域中，内层可以访问到外层变量。</p><h3 id="ES6-之后"><a href="#ES6-之后" class="headerlink" title="ES6 之后"></a>ES6 之后</h3><p>新增块级作用域。使用关键字<code>let</code> / <code>const</code> 声明。</p><p><code>let</code> / <code>const</code>不能被提升，在一个作用域内只能声明一次</p><h2 id="3-相等性判断"><a href="#3-相等性判断" class="headerlink" title="3. 相等性判断"></a>3. 相等性判断</h2><blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness</a></p></blockquote><p>ES2015中有四种相等算法：</p><ul><li>抽象（非严格）相等比较 (<code>==</code>)</li><li>严格相等比较 (<code>===</code>): 用于  <code>Array.prototype.indexOf</code>, <code>Array.prototype.lastIndexOf</code>, 和 <code>case</code>-matching</li><li>同值零: 用于 <code>%TypedArray%</code> 和 <code>ArrayBuffer</code>构造函数、以及<code>Map</code>和<code>Set</code>操作, 并将用于 ES2016/ES7 中的<code>String.prototype.includes</code></li><li>同值: 用于所有其他地方</li></ul><p>JavaScript提供三种不同的值比较操作：</p><ul><li>严格相等比较 (也被称作”strict equality”, “identity”, “triple equals”)，使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Identity">===</a> ,</li><li>抽象相等比较 (“loose equality”，”double equals”) ，使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators#Equality">==</a></li><li>以及 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"><code>Object.is</code></a> （ECMAScript 2015/ ES6 新特性）</li></ul><h3 id="严格相等"><a href="#严格相等" class="headerlink" title="严格相等==="></a>严格相等<code>===</code></h3><p>全等操作符比较两个值是否相等，两个被比较的值在比较前都不进行隐式转换。如果两个被比较的值具有不同的类型，这两个值是不全等的。否则，如果两个被比较的值类型相同，值也相同，并且都不是 Number 类型时，两个值全等。最后，如果两个值都是 <code>Number</code> 类型，当两个都不是 <code>NaN</code>，并且数值相同，或是两个值分别为 <code>+0</code> 和  <code>-0</code> 时，两个值被认为是全等的。</p><p>在日常中使用全等操作符几乎总是正确的选择。对于除了数值之外的值，全等操作符使用明确的语义进行比较：一个值只与自身全等。对于数值，全等操作符使用略加修改的语义来处理两个特殊情况：第一个情况是，浮点数 <code>0</code> 是不分正负的，全等操作符认为这两个值是全等的。第二个情况是，全等操作符认为 <code>NaN</code> 与其他任何值都不全等，包括它自己。（等式 <code>(x !== x)</code> 成立的唯一情况是 x 的值为 <code>NaN</code>）</p><h3 id="非严格相等"><a href="#非严格相等" class="headerlink" title="非严格相等=="></a>非严格相等<code>==</code></h3><p>一些总结规律：</p><ul><li><code>undefined</code> 与 <code>null</code> 互相相等，与其他值为false</li><li><code>Number</code>与<code>String</code>/<code>Boolean</code>比较时，后者将会被转化<code>ToNumber</code>；与对象进行比较时，后者将会被转化<code>ToPrimitive</code></li><li><code>String</code>与<code>Number</code>/<code>Boolean</code>比较时，均转换<code>ToNumber</code>；与对象比较时，后者将被转换<code>ToPrimitive</code></li><li><code>Boolean</code>与<code>Number</code>/<code>String</code>比较时，与上例相同</li><li><code>Object</code>与<code>Number</code>/<code>String</code>/<code>Boolean</code>比较时，前者将被转换<code>ToPrimitive</code>，<code>Boolean</code>被转换<code>ToNumber</code></li></ul><h3 id="同值相等"><a href="#同值相等" class="headerlink" title="同值相等"></a>同值相等</h3><p>由<code>Object.is</code>方法提供</p><h3 id="JS-圣经图"><a href="#JS-圣经图" class="headerlink" title="JS 圣经图"></a>JS 圣经图</h3><p><img src="https://ryzenx.oss-cn-hangzhou.aliyuncs.com/img/2022/5be92e73c0b119ed.jpg" alt="JS比较运算"></p><h2 id="4-回调函数"><a href="#4-回调函数" class="headerlink" title="4. 回调函数"></a>4. 回调函数</h2><blockquote><p>参考：<a href="https://www.cnblogs.com/lfri/p/11872294.html">https://www.cnblogs.com/lfri/p/11872294.html</a></p></blockquote><p>回调函数是作为一个参数传递给另一个函数。回调函数可以方便地进行异步处理，因为 JavaScript 是事件驱动的语言。这意味着，JavaScript 不会因为要等待一个响应而停止当前运行，而是在监听其他事件时继续执行。</p><h3 id="回调函数有哪些特点？"><a href="#回调函数有哪些特点？" class="headerlink" title="回调函数有哪些特点？"></a>回调函数有哪些特点？</h3><p><strong>不会立刻执行</strong></p><p>回调函数作为参数传递给一个函数的时候，传递的只是函数的定义并不会立即执行。和普通的函数一样，回调函数在函调用函数数中也要通过<code>()</code>运算符调用才会执行。</p><p><strong>是个闭包</strong></p><p>回调函数是一个闭包，也就是说它能访问到其外层定义的变量。</p><p><strong>执行前类型判断</strong></p><p>在执行回调函数前最好确认其是一个函数。</p><h2 id="5-use-strict"><a href="#5-use-strict" class="headerlink" title="5. use strict"></a>5. use strict</h2><blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode</a></p></blockquote><p>在作用域内顶部使用表达式 <code>&quot;use strict&quot;;</code></p><ol><li><p>严格模式通过<strong>抛出错误</strong>来消除了一些原有<strong>静默错误</strong>。</p><p>第一，严格模式下无法再意外创建全局变量。</p><p>第二，严格模式会使引起静默失败的赋值操作抛出异常。例如， <code>NaN</code> 是一个不可写的全局变量。在正常模式下，给 <code>NaN</code> 赋值不会产生任何作用；开发者也不会受到任何错误反馈。但在严格模式下，给 <code>NaN</code> 赋值会抛出一个异常。任何在正常模式下引起静默失败的赋值操作（给不可写属性赋值，给只读属性(getter-only)赋值, 给不可扩展对象(<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions">non-extensible</a> object)的新属性赋值）都会抛出异常。</p><p>第三，在严格模式下，试图删除不可删除的属性时会抛出异常。</p><p>第四，在Gecko版本34之前，严格模式要求一个对象内的所有属性名在对象内必须唯一。正常模式下重名属性是允许的，最后一个重名的属性决定其属性值。因为只有最后一个属性起作用，当代码要去改变属性值而不是修改最后一个重名属性的时候，复制这个对象就产生一连串的bug。在严格模式下，重名属性被认为是语法错误。</p><p>第五，严格模式要求函数的参数名唯一。在正常模式下，最后一个重名参数名会掩盖之前的重名参数。</p><p>第六，严格模式禁止八进制数字语法。ECMAScript并不包含八进制语法，但所有的浏览器都支持这种以零(<code>0</code>)开头的八进制语法：<code>0644 === 420</code> 还有 <code>&quot;\045&quot; === &quot;%&quot;</code>。在ECMAScript 6中支持为一个数字加”<code>0o</code>“的前缀来表示八进制数。</p><p>第七，ECMAScript 6中的严格模式禁止设置<code>primitive</code>值的属性。</p></li><li><p>严格模式修复了一些导致 JavaScript引擎难以执行优化的缺陷：有时候，相同的代码，严格模式可以比非严格模式下<strong>运行得更快</strong>。</p><ol><li><p>简化变量的使用</p><p>第一。严格模式禁用 <code>with</code>。<code>with</code>所引起的问题是块内的任何名称可以映射(map)到<code>with</code>传进来的对象的属性, 也可以映射到包围这个块的作用域内的变量(甚至是全局变量)，这一切都是在运行时决定的：在代码运行之前是无法得知的。</p><p>第二，严格模式下的 <code>eval</code> 不再为上层范围引入新变量。在严格模式下 <code>eval</code> 仅仅为被运行的代码创建变量，所以 <code>eval</code> 不会使得名称映射到外部变量或者其他局部变量。</p><p>第三，严格模式禁止删除声明变量。<code>delete name</code> 在严格模式下会引起语法错误。</p></li><li><p>让<code>eval</code>和<code>arguments</code>变的简单</p><p>第一，名称 <code>eval</code> 和 <code>arguments</code> 不能通过程序语法被绑定(be bound)或赋值。</p><p>第二，严格模式下，参数的值不会随 <code>arguments</code> 对象的值的改变而变化。</p><p>第三，不再支持 <code>arguments.callee</code>。</p></li><li><p>“安全的” JavaScript</p><p>第一，在严格模式下通过<code>this</code>传递给一个函数的值不会被强制转换为一个对象。</p><p>第二，在严格模式中再也不能通过广泛实现的ECMAScript扩展“游走于”JavaScript的栈中。</p><p>第三，严格模式下的<code>arguments</code>不会再提供访问与调用这个函数相关的变量的途径。</p></li></ol></li><li><p>严格模式<strong>禁用了</strong>在ECMAScript的未来版本中可能会定义的一些语法。</p><p>第一，在严格模式中一部分字符变成了保留的关键字。这些字符包括<code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>和<code>yield</code>。</p><p>第二，严格模式禁止了不在脚本或者函数层面上的函数声明。</p></li></ol><h2 id="6-null-与-undefined"><a href="#6-null-与-undefined" class="headerlink" title="6. null 与 undefined"></a>6. null 与 undefined</h2><blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects</a></p></blockquote><p>值 <code>null</code> 特指对象的值未设置。它是 JavaScript 基本类型之一，在布尔运算中被认为是<a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">falsy</a>。</p><p>全局属性<code>undefined</code>表示原始值<code>undefined。</code>它是一个JavaScript的 原始数据类型。</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive">https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive</a></p></blockquote><p>基本类型（基本数值、基本数据类型）是一种既非对象也无方法的数据。在 JavaScript 中，共有7种基本类型：<code>string</code>，<code>number</code>，<code>bigint</code>，<code>boolean</code>，<code>null</code>，<code>undefined</code>，<code>symbol</code></p><h2 id="7-判断数字是否为整数"><a href="#7-判断数字是否为整数" class="headerlink" title="7. 判断数字是否为整数"></a>7. 判断数字是否为整数</h2><blockquote><p>参考：<a href="https://www.cnblogs.com/snandy/p/3824828.html">https://www.cnblogs.com/snandy/p/3824828.html</a></p></blockquote><p>JavaScript中不区分整数和浮点数，所有数字内部都采用64位浮点格式表示，。但实际操作中比如数组索引、位操作则是基于32位整数。</p><ol><li><p>取余</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isInt = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">&#x27;number&#x27;</span> &amp;&amp; val % <span class="number">1</span> === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用Math内置方法判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isInt = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(val) === val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>parseInt</code>判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isInt = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">parseInt</span>(val, <span class="number">10</span>) === val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缺陷，val 将被转换成string再判断</span></span><br></pre></td></tr></table></figure></li><li><p>通过位运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isInt = <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (val | <span class="number">0</span>) === val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缺陷：只能判断32位以下数字</span></span><br></pre></td></tr></table></figure></li><li><p>通过新增方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(val);</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-IIFE"><a href="#8-IIFE" class="headerlink" title="8. IIFE"></a>8. IIFE</h2><blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/IIFE">https://developer.mozilla.org/zh-CN/docs/Glossary/IIFE</a></p></blockquote><p><strong>IIFE</strong>（ 立即调用函数表达式）是一个在定义时就会立即执行的 JavaScrip函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    statements</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这是一个被称为 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Self-Executing_Anonymous_Function">自执行匿名函数</a> 的设计模式，主要包含两部分。第一部分是包围在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Grouping"><code>圆括号运算符</code></a> <code>()</code> 里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。</p><p>第二部分再一次使用 <code>()</code> 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。</p><h2 id="9-命名函数与匿名函数"><a href="#9-命名函数与匿名函数" class="headerlink" title="9. 命名函数与匿名函数"></a>9. 命名函数与匿名函数</h2><p>命名函数也叫<strong>函数声明</strong>：<code>function fn() &#123;&#125;</code></p><p>此时存在变量提升，在声明这个函数之前就可以调用。</p><p>匿名函数包括<strong>函数表达式</strong>、<strong>箭头函数</strong>和<strong>回调函数</strong>的用法：</p><ul><li><code>const fn = function() &#123;&#125;</code></li><li><code>const fn = () =&gt; &#123;&#125;</code></li><li><code>function foo(() =&gt; &#123;&#125;)</code></li></ul><p>函数表达式没有提升，在定义函数表达式之前不能使用。</p><h2 id="10-私有属性"><a href="#10-私有属性" class="headerlink" title="10. 私有属性"></a>10. 私有属性</h2><blockquote><p>参考：<a href="https://segmentfault.com/a/1190000017081250">https://segmentfault.com/a/1190000017081250</a></p></blockquote><ol><li><p>约定实现：使用下划线<code>_</code>开头的属性为私有属性</p></li><li><p>使用constructor的闭包实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> _private = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    _private = <span class="string">&#x27;private&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> _private&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用IIFE创建闭包和作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Example = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _private = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      _private = <span class="string">&#x27;private&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _private;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Example;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Symbol</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Example = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _private = <span class="built_in">Symbol</span>(<span class="string">&#x27;private&#x27;</span>);</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>[_private] = <span class="string">&#x27;private&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>[_private];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Example;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>WeakMap</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Example = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _private = <span class="keyword">new</span> <span class="built_in">WeakMap</span>(); <span class="comment">// 私有成员存储容器</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      _private.set(<span class="built_in">this</span>, <span class="string">&#x27;private&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> _private.get(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Example;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>使用TypeScript</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> _private: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">val: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._private = val;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> getName(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._private;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上也是转换为IIFE并修改原型链：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Example = <span class="comment">/** <span class="doctag">@class </span>*/</span> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>._private = val;</span><br><span class="line">  &#125;   </span><br><span class="line">  Example.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._private;</span><br><span class="line">  &#125;;  </span><br><span class="line">  <span class="keyword">return</span> Example;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li></ol><h2 id="11-原型模式与构造函数模式"><a href="#11-原型模式与构造函数模式" class="headerlink" title="11. 原型模式与构造函数模式"></a>11. 原型模式与构造函数模式</h2><blockquote><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/94104346">https://zhuanlan.zhihu.com/p/94104346</a></p><p><a href="https://juejin.cn/post/6975111113792978980">https://juejin.cn/post/6975111113792978980</a></p></blockquote><p>从设计模式的角度讲，原型模式是用于创建对象的一种模式。我们不再关心对象的具体类型，而是找到一个对象，然后通过克隆来创建一个一模一样的对象。</p><p>ECMAScript 5标准中定义的真正的原型继承，需要使用<code>Object.create</code>。<code>Object.create</code>创建一个具有指定原型的对象，并且还可以包含指定的属性，例如<code>Object.create( prototype, optionalDescriptorObjects )</code></p><p>原型模式必须拥有prototype的存在，而构造函数方式不必依赖prototype。</p><h3 id="总结提问"><a href="#总结提问" class="headerlink" title="总结提问"></a>总结提问</h3><p>1、为什么说 ES6 的 Class 只是语法糖</p><p>起源上说，JavaScript是基于原型的面向对象系统。而在原型编程的思想中，类并不是必需的，对象未必需要从类中创建而来， 一个对象是通过克隆另外一个对象所得到的。</p><p>ES6的 Class 语法，让 JavaScript 看起来像是一门基于类的语言，但其背后仍是通过原型机制来创建对象。</p><p>2、使用了<code>new A()</code> ，所以A属于类吗？</p><p>在这里 A 并不是类，而是函数构造器，JavaScript 的函数既可以作为普通函数被调用， 也可以作为构造器被调用。当使用 new 运算符来调用函数时，此时的函数就是一个构造器。</p><p>3、存在没有原型的对象吗？</p><p>通过设置构造器的 prototype 来实现原型继承的时候，除了根对象 <code>Object.prototype</code> 本身之外，任何对象都会有一个 原型。而通过 <code>Object.create( null )</code>可以创建出没有原型的对象。</p><h2 id="12-字符串同态"><a href="#12-字符串同态" class="headerlink" title="12. 字符串同态"></a>12. 字符串同态</h2><blockquote><p>参考：<a href="https://github.com/kennymkchan/interview-questions-in-javascript">https://github.com/kennymkchan/interview-questions-in-javascript</a></p></blockquote><p>同态：两个字符串，如果A字符串中的每一个字符都可以在B字符串中找到唯一对应，并且顺序一一对应；如果存在这样的函数，那么A和B同态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isIsomorphic = <span class="function">(<span class="params">firstString, secondString</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (firstString.length !== secondString.length) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">var</span> letterMap = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; firstString.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> letterA = firstString[i],</span><br><span class="line">        letterB = secondString[i];</span><br><span class="line">    <span class="keyword">if</span> (letterMap[letterA] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      letterMap[letterA] = letterB;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (letterMap[letterA] !== letterB) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-Transpiling"><a href="#13-Transpiling" class="headerlink" title="13. Transpiling"></a>13. Transpiling</h2><p>为了使新标准编写的程序适应低版本的浏览器（或运行时）所进行的对代码进行转译。</p><p>可以将不支持的方法重写或者对旧标准上的对象进行补充(polyfill)</p><h2 id="14-this的指向"><a href="#14-this的指向" class="headerlink" title="14. this的指向"></a>14. this的指向</h2><p><code>this</code>通常指向当前作用域，在当前作用域找不到对象时，向上级作用域查找。</p><p><code>Function.prototype.call</code>与<code>Function.prototype.apply</code>都可以改变<code>this</code>的指向。</p><p><code>bind()</code>方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 <code>bind()</code>方法的第一个参数作为 <code>this</code>，传入 <code>bind()</code> 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数。</p><h2 id="15-map-reduce-filter"><a href="#15-map-reduce-filter" class="headerlink" title="15. map / reduce / filter"></a>15. map / reduce / filter</h2><blockquote><p>参考：<a href="https://www.freecodecamp.org/news/javascript-map-reduce-and-filter-explained-with-examples/">https://www.freecodecamp.org/news/javascript-map-reduce-and-filter-explained-with-examples/</a></p></blockquote><ul><li><p><code>map</code>：将数组的每一项传入回调函数中，获取返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].map(<span class="function"><span class="params">v</span> =&gt;</span> v * v);</span><br><span class="line"><span class="comment">// =&gt; [1,4,9]</span></span><br></pre></td></tr></table></figure></li><li><p><code>filter</code>：将每个元素传递到回调函数中，获取布尔值，为真则保留元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">1</span>, <span class="string">&quot;str&quot;</span>].filter(<span class="function"><span class="params">v</span> =&gt;</span> v);</span><br><span class="line"><span class="comment">// =&gt; [true, 1, &#x27;str&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>reduce</code>：递归调用每一个元素，回调函数有三个参数：</p><ul><li><em>accumulator</em> - 上一次迭代的返回值</li><li><em>currentValue</em> - 数组中的当前项</li><li><em>index</em> - 当前项目的索引</li><li><em>array</em> - 调用 reduce 的原始数组</li><li><code>initialValue</code>参数是可选的。如果提供，它将在第一次调用回调函数时用作初始累加器值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].reduce(<span class="function">(<span class="params">res, curr, idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> res + curr + idx;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// =&gt; 9</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript-基础问题-2203&quot;&gt;&lt;a href=&quot;#JavaScript-基础问题-2203&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 基础问题 2203&quot;&gt;&lt;/a&gt;JavaScript 基础问题 2203&lt;/h1&gt;&lt;p&gt;一些网上收集到的面试题总结…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="笔记" scheme="https://ryzenx.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://ryzenx.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Magisk安装步骤</title>
    <link href="https://ryzenx.com/2022/02/Install-magisk/"/>
    <id>https://ryzenx.com/2022/02/Install-magisk/</id>
    <published>2022-02-27T08:12:47.000Z</published>
    <updated>2022-02-27T09:18:37.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Magisk-安装步骤简述"><a href="#Magisk-安装步骤简述" class="headerlink" title="Magisk 安装步骤简述"></a>Magisk 安装步骤简述</h1><blockquote><p>Magisk is for <em>The Magic Mask for Android</em></p><p>Magisk is a suite of open source software for customizing Android, supporting devices higher than Android 5.0.</p></blockquote><span id="more"></span><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在 Android 系统还不成熟的时候，<em>root</em> Android 系统获得系统最高用户权限，从而修改系统达到快捷操作个性化等目的。</p><p>虽然 Android 系统已经来到了 <strong>Android 12</strong>（截至本文最后修改时间，<strong>Android 13 beta</strong>已经推出），各种之前需要 <em>root</em> 系统才能进行的操作已经被内置在了系统功能中。但是，搞机不息，折腾不止，<em>Magisk</em> 的多种功能和“模块”也让 Android 系统变得更加自由。</p><h2 id="2-第一步：备份数据"><a href="#2-第一步：备份数据" class="headerlink" title="2. 第一步：备份数据"></a>2. 第一步：备份数据</h2><p><strong>！！！重中之重</strong></p><p>下列操作将涉及<strong>重置系统</strong>，提前备份手机中所有数据。</p><h2 id="3-第二步：解锁-Bootloader"><a href="#3-第二步：解锁-Bootloader" class="headerlink" title="3. 第二步：解锁 Bootloader"></a>3. 第二步：解锁 Bootloader</h2><blockquote><p>Bootloader 在类似于 Windows 电脑中的“安全启动”，是系统启动引导的安全空间。以下简称<strong>BL</strong></p><p>主要的功能是防止恶意程序修改系统引导、破坏系统文件、盗取存储数据。同时防止被加密的手机通过“刷机”获取存储中的资料。</p></blockquote><p>目前，不是所有品牌的手机都能自由解锁BL，因为很多手机厂商并不希望你安装其他系统版本、不希望你 <em>root</em> 手机后卸载系统的广告应用。</p><p>目前已知可以比较方便解锁BL的手机厂商有：</p><ul><li>小米 (MIUI)：绑定小米账号7天-30天即可解锁</li><li>三星 (OneUI)：熔断式安全锁，解锁后不可恢复锁定状态，安全功能不可用</li><li>联想</li><li>一加 (H2OS)</li><li>HTC</li><li>Sony</li><li>Google</li></ul><p>解锁方法可自行搜索<code>&#123;brand&#125;&#123;model&#125;&#123;system version&#125; unlock bootloader</code></p><p><strong>解锁BL会清除所有数据！！！</strong></p><h2 id="4-第三步：获取最新安装包"><a href="#4-第三步：获取最新安装包" class="headerlink" title="4. 第三步：获取最新安装包"></a>4. 第三步：获取最新安装包</h2><p>可通过两种方法获取系统安装包：</p><ul><li><strong>官网下载</strong>，搜索：<code>&#123;brand&#125;&#123;model&#125;&#123;system version&#125; system image</code></li><li><strong>OTA升级</strong></li></ul><p>获取系统安装包完成后，先在手机上安装一下最新系统，并进行初始化设置。如果不想更新系统，则需要下载到当前对应系统版本的安装包。</p><p>在<a href="https://github.com/topjohnwu/Magisk/releases">Github上下载Magisk</a>，在手机上直接安装。</p><h2 id="5-第四步：解包并提取"><a href="#5-第四步：解包并提取" class="headerlink" title="5. 第四步：解包并提取"></a>5. 第四步：解包并提取</h2><p>对下载的系统安装包进行解压，并提取<code>boot.img</code>。如果为加密系统安装包，即仅包含<code>payload.bin</code>，则按照<a href="https://magiskcn.com/payload-boot">这个教程解包</a><code>payload.bin</code></p><p>将提取到的<code>boot.img</code>保存到容易找到的手机目录，例如手机的“下载文件夹”<code>./Download/</code></p><h2 id="6-第五步：将Magisk注入"><a href="#6-第五步：将Magisk注入" class="headerlink" title="6. 第五步：将Magisk注入"></a>6. 第五步：将Magisk注入</h2><p>打开手机上安装的<strong>Magisk</strong> App，按照下图操作：</p><p><img src="https://magiskcn.com/wp-content/uploads/2021/11/eafbece1016a6af-3.jpg" alt="Magisk安装教程插图1"></p><h2 id="7-第六步：刷入注入完成的boot-img"><a href="#7-第六步：刷入注入完成的boot-img" class="headerlink" title="7. 第六步：刷入注入完成的boot.img"></a>7. 第六步：刷入注入完成的boot.img</h2><p>将<strong>Magisk</strong>注入完成的<code>magisk_patched-*****.img</code>拷贝到电脑，需要 <code>adb</code> 和  <code>fastboot</code> 工具。</p><p>将手机关机，同时按住<strong>电源</strong> <strong>音量减</strong>，直到手机出现画面显示<strong>Bootloader</strong>字样。将手机连接到电脑。</p><p>打开电脑的“终端”，例如 Windows 系统中的 <em>PowerShell</em> 窗口，或者 macOS 中的 <em>Terminal.app</em></p><p>切换到 <code>adb</code> 和  <code>fastboot</code> 目录，输入<code>fastboot devices</code>，返回当前连接的设备(1个)表示连接成功。</p><p>确认连接成功后，输入：<code>fastboot flash boot /path/to/magisk_patched-*****.img</code>，并确认</p><p>如果显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sending ‘boot’ (131072 KB) OKAY [ 3.123s]</span><br><span class="line">Writing ‘boot’ OKAY [ 0.397s]</span><br><span class="line">Finished. Total time: 4.645s</span><br></pre></td></tr></table></figure><p>代表你的手机为单系统引导分区，且已经执行成功。</p><p>如果显示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sending ‘boota’</span><br><span class="line">Sending ‘bootb’</span><br></pre></td></tr></table></figure><p>表示你的手机为双系统引导分区。</p><p>如果没有显示<code>OKAY</code> 和 <code>Finished</code>，表示执行失败。</p><blockquote><p>这里有个坑</p></blockquote><p>这里仅需要运行<code>fastboot flash boot XXX.img</code>表示把<code>XXX.img</code>刷入<code>boot</code>分区，<strong>fastboot</strong>会自动找到下次启动的分区，但是在个别机型上，<strong>A/B</strong>分区并不是<code>boota</code>和<code>bootb</code>，而是<code>boot_a</code>和<code>boot_b</code>。如果输入上述命令执行失败，提示未找到<code>boota</code>和<code>bootb</code>分区，则手动修改为<code>boot_a</code>和<code>boot_b</code>，但注意与提示对应。</p><h2 id="8-第七步：重启手机"><a href="#8-第七步：重启手机" class="headerlink" title="8. 第七步：重启手机"></a>8. 第七步：重启手机</h2><p>断开手机与电脑的连接。可通过长按按键“电源”重启手机或者输入<code>fastboot reboot</code>重启。</p><p>重启后打开 <strong>Magisk</strong> App，如果显示（右上角有个刷新/重启按钮）：</p><p><img src="https://magiskcn.com/wp-content/uploads/2021/11/eafbece1016a6af-4.jpg" alt="Magisk安装教程插图5"></p><p>则表示安装成功。</p><br /><blockquote><p>参考：<a href="https://magiskcn.com/">https://magiskcn.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Magisk-安装步骤简述&quot;&gt;&lt;a href=&quot;#Magisk-安装步骤简述&quot; class=&quot;headerlink&quot; title=&quot;Magisk 安装步骤简述&quot;&gt;&lt;/a&gt;Magisk 安装步骤简述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Magisk is for &lt;em&gt;The Magic Mask for Android&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Magisk is a suite of open source software for customizing Android, supporting devices higher than Android 5.0.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="玩机" scheme="https://ryzenx.com/tags/%E7%8E%A9%E6%9C%BA/"/>
    
      <category term="心得" scheme="https://ryzenx.com/tags/%E5%BF%83%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6+标准学习</title>
    <link href="https://ryzenx.com/2022/01/JS-ES6/"/>
    <id>https://ryzenx.com/2022/01/JS-ES6/</id>
    <published>2022-01-10T04:09:06.000Z</published>
    <updated>2022-01-14T05:16:20.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-6-学习笔记"><a href="#ECMAScript-6-学习笔记" class="headerlink" title="ECMAScript 6+学习笔记"></a>ECMAScript 6+学习笔记</h1><blockquote><p>ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。</p><p>因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。</p></blockquote><blockquote><ul><li><p>本笔记主要参考了阮一峰老师的开源教程：<a href="https://es6.ruanyifeng.com/https://es6.ruanyifeng.com/">《ECMAScript 6 入门教程》</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/">MDN Web Docs</a></p></li><li><p><a href="https://tc39.es/">ECMAScript TC39</a></p></li></ul></blockquote><blockquote><p>Update Time:</p></blockquote><span id="more"></span><p>根据我的理解将内容分为两个大的部分：<strong>新增</strong>和<strong>扩展</strong>。</p><h2 id="新增内容"><a href="#新增内容" class="headerlink" title="新增内容"></a>新增内容</h2><h3 id="1-Let-and-Const-Declarations"><a href="#1-Let-and-Const-Declarations" class="headerlink" title="[1] Let and Const Declarations"></a>[1] Let and Const Declarations</h3><p><code>let</code>仅在当作用范围有效，且无如<code>var</code>的变量提升：在 JavaScript 中，<code>var</code>声明的变量在赋值之前就已经存在，其值为<code>undefined</code>。</p><p><code>let</code>不允许重复声明。</p><p><code>let</code>新增了块级作用域。能够防止内层变量覆盖全局变量，防止内层变量泄露到全局变量。</p><p><code>const</code>声明一个只读、不变的“常量”，实际上固定了一个变量的内存地址。当<code>const</code>声明<strong>对象</strong>或<strong>数组</strong>时，其指向的地址不变，当指向对象的值是可变的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">arr.push(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">// -&gt; [1]</span></span><br><span class="line">obj.name = <span class="string">&quot;obj&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name);</span><br><span class="line"><span class="comment">// -&gt; &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-String-的新增方法"><a href="#2-String-的新增方法" class="headerlink" title="[2] String 的新增方法"></a>[2] String 的新增方法</h3><ul><li><code>String.fromCodePoint(/*unicode*/)</code> 用于返回 Unicode</li><li><code>String.raw(/*string*/)</code> 用于返回原始字符串，即将字符串转义后显示</li><li><code>String.prototype.codePointAt(/*index*/)</code> 解析字符串中的 Unicode 码</li><li><code>String.prototype.normalize(/*arg*/)</code> 用于合成多字节 Unicode 字</li><li><code>String.prototype.includes(/*toFind*/)</code> 返回是否包含参数字符串</li><li><code>String.prototype.startsWith(/*toFind*/)</code> 返回字符串头部是否是参数字符串</li><li><code>String.prototype.endsWit(/*toFind*/)</code> 返回字符串尾部是否是参数字符串</li><li><code>String.prototype.repeat(/*uint n*/)</code> 将字符串重复 n 次</li><li><code>String.prototype.padStart(/*uint len, string*/)</code> 使用第二个参数在起始补全第一个参数值的长度</li><li><code>String.prototype.padEnd(/*uint len, string*/)</code> 使用第二个参数在末尾补全第一个参数值的长度</li><li><code>String.prototype.trimStart()</code> 消除起始空格，不修改原字符串</li><li><code>String.prototype.trimEnd()</code> 消除末尾空格，不修改原字符串</li><li><code>String.prototype.matchAll()</code> 返回正则所有匹配</li><li><code>String.prototype.replaceAll(/*old, new*/)</code> 全部替换匹配值</li><li><code>String.prototype.at(/*index*/)</code> 返回指定位置的字符</li></ul><h3 id="3-RegExp"><a href="#3-RegExp" class="headerlink" title="[3] RegExp"></a>[3] RegExp</h3><p>新增修饰符<code>u</code>: Unicode 模式，能够正常识别双字符 Unicode 字，同时<code>.</code>能够正常匹配所有 Unicode 字符</p><p>新增<code>RegExp.prototype.unicode</code>检查是否有<code>u</code>修饰符</p><p>新增修饰符<code>y</code>: 从上一个匹配到的位置开始匹配</p><p>新增<code>RegExp.prototype.sticky</code>检查是否有<code>y</code>修饰符</p><p>新增<code>RegExp.prototype.flags</code>显示所有修饰符</p><p>新增修饰符<code>s</code>: dotAll，使得<code>.</code>修饰所有字符</p><p>新增后行断言：lookbehind：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已有先行断言</span></span><br><span class="line">/\d+(?=%)/  <span class="comment">/* 表示匹配%前方的数字 */</span></span><br><span class="line"><span class="comment">// 新增后行断言</span></span><br><span class="line"><span class="regexp">/(?&lt;=#)\d+/</span>  <span class="comment">/* 表示匹配#之后的数字 */</span></span><br></pre></td></tr></table></figure><p>新增命名组匹配（类似 Python 中），可以进行后续引用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reDate = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> matchRes = reDate.exec(<span class="string">&quot;2022-01-01&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; year, month, day &#125; = matchRes.groups;</span><br><span class="line"><span class="keyword">const</span> reTwice = <span class="regexp">/^(?&lt;word&gt;\w+)-\k&lt;word&gt;$/</span>;</span><br><span class="line">reTwice.test(<span class="string">&quot;abc-abc&quot;</span>);</span><br><span class="line"><span class="comment">// -&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="4-Number"><a href="#4-Number" class="headerlink" title="[4] Number"></a>[4] Number</h3><p>新增二进制<code>0b0100</code>八进制<code>0o4</code>。转换：<code>Number(&#39;0b0100&#39;) = 4</code></p><p>新增数值分隔符<code>1000 == 1_000</code></p><p>新增<code>Number.isFinite(/*number*/)</code> 判断是否为有限<strong>数值</strong></p><p>新增<code>Number.isNaN(/*number*/)</code> 判断是否为<code>NaN</code>类型</p><p>新增<code>Number.isInteger()</code> 判断是否为整数。特别地，JavaScript 内部，整数和浮点数采用的是同样的储存方法，所以 25 和 25.0 被视为同一个值；如果数值的精度超过这个限度，第 54 位及后面的位就会被丢弃，这种情况下，<code>Number.isInteger</code>可能会误判；如果一个数值的绝对值小于<code>Number.MIN_VALUE</code>（5E-324），即小于 JavaScript 能够分辨的最小值，会被自动转为 0，这时，<code>Number.isInteger</code>也会误判</p><p>新增<code>Number.EPSILON</code>代表一个极小的常量<code>Number.EPSILON === Math.pow(2, -52)</code></p><p>新增<code>Number.isSafeInteger()</code>，同时新增最大、最小整数常量<code>Number.MAX_SAFE_INTEGER</code> <code>Number.MIN_SAFE_INTEGER</code></p><h3 id="5-Math"><a href="#5-Math" class="headerlink" title="[5] Math"></a>[5] Math</h3><ul><li><p><code>Math.trunc(/*number*/)</code> 去除小数部分，返回整数部分；首先转换为数值，若无法转换，返回<code>NaN</code></p></li><li><p><code>Math.sign(/*number*/)</code> 判断参数正负，返回值：<code>+1 -1 0 -0 NaN</code></p></li><li><p><code>Math.cbrt(/*number*/)</code> 计算立方根</p></li><li><p><code>Math.clz32(/*number*/)</code> 将参数转为 32 位无符号整数的形式，然后返回这个 32 位值里面有多少个前导 0</p></li><li><p><code>Math.imul(/*numbers*/)</code> 返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0x7fffffff</span> * <span class="number">0x7fffffff</span>) | <span class="number">0</span>;</span><br><span class="line"><span class="comment">// -&gt; 0</span></span><br><span class="line"><span class="built_in">Math</span>.imul(<span class="number">0x7fffffff</span>, <span class="number">0x7fffffff</span>);</span><br><span class="line"><span class="comment">// -&gt; 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Math.fround(/*number*/)</code> 返回一个数的 32 位单精度浮点数形式</p></li><li><p><code>Math.hypot(/*numbers*/)</code> 返回所有参数的平方和的开方</p></li><li><p><code>Math.expm1(/*number*/)</code> 返回$e^x-1$，等价于<code>Math.exp(x) - 1</code></p></li><li><p><code>Math.log1p(/*number*/)</code> 返回$\ln(1 + x)$</p></li><li><p><code>Math.log10(/*number*/)</code> 返回$\lg x$</p></li><li><p><code>Math.log2(/*number*/)</code> 返回$\log_2 x$</p></li><li><p><code>Math.sinh(x)</code> 返回<code>x</code>的双曲正弦（hyperbolic sine）</p></li><li><p><code>Math.cosh(x)</code> 返回<code>x</code>的双曲余弦（hyperbolic cosine）</p></li><li><p><code>Math.tanh(x)</code> 返回<code>x</code>的双曲正切（hyperbolic tangent）</p></li><li><p><code>Math.asinh(x)</code> 返回<code>x</code>的反双曲正弦（inverse hyperbolic sine）</p></li><li><p><code>Math.acosh(x)</code> 返回<code>x</code>的反双曲余弦（inverse hyperbolic cosine）</p></li><li><p><code>Math.atanh(x)</code> 返回<code>x</code>的反双曲正切（inverse hyperbolic tangent）</p></li></ul><h3 id="6-BigInt"><a href="#6-BigInt" class="headerlink" title="[6] BigInt"></a>[6] BigInt</h3><p>用来表示整数，没有位数限制。需要添加后缀<code>n</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">7378697629483821n</span>;</span><br><span class="line"><span class="keyword">typeof</span> n;</span><br><span class="line"><span class="comment">// -&gt; &#x27;bigint&#x27;</span></span><br></pre></td></tr></table></figure><p>也可以进行转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BigInt</span>(<span class="string">&quot;123&quot;</span>); <span class="comment">// -&gt; 123n</span></span><br></pre></td></tr></table></figure><p>实例方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BigInt</span>.prototype.toString();</span><br><span class="line"><span class="built_in">BigInt</span>.prototype.valueOf();</span><br><span class="line"><span class="built_in">BigInt</span>.prototype.toLocaleString();</span><br></pre></td></tr></table></figure><p>静态方法：</p><ul><li><code>BigInt.asUintN(width, BigInt)</code>： 给定的 BigInt 转为 0 到 2width - 1 之间对应的值。</li><li><code>BigInt.asIntN(width, BigInt)</code>：给定的 BigInt 转为 -2width - 1 到 2width - 1 - 1 之间对应的值。</li><li><code>BigInt.parseInt(string[, radix])</code>：近似于<code>Number.parseInt()</code>，将一个字符串转换成指定进制的 BigInt。</li></ul><h2 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h2><h3 id="1-globalThis"><a href="#1-globalThis" class="headerlink" title="(1) globalThis"></a>(1) globalThis</h3><p><code>globalThis</code>是全局对象(The <em>global object</em>)的扩展，其属性如下：</p><blockquote><p>This property has the attributes { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.</p></blockquote><h3 id="2-Destructuring-Assignment"><a href="#2-Destructuring-Assignment" class="headerlink" title="(2) Destructuring Assignment"></a>(2) Destructuring Assignment</h3><p>变量的解构语法能够方便地解构数组(array)、对象(object)内部的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LeftHandSideExpression = AssignmentExpression</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br><span class="line"><span class="comment">// -&gt; 2 1</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">  <span class="function"><span class="title">getter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 将变量扩充到window全局对象中</span></span><br><span class="line"><span class="keyword">var</span> &#123; name, getter &#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="comment">// -&gt; &#x27;obj&#x27;</span></span><br><span class="line"><span class="comment">// getter中的this-&gt;window</span></span><br><span class="line">getter();</span><br><span class="line"><span class="comment">// -&gt; &#x27;obj&#x27;</span></span><br></pre></td></tr></table></figure><p>同样可以多层解构和部分解构，只要与被解构的结构相同即可。</p><p>由于 JavaScript 内部皆对象，则对象的解构可以用于能够被转换为对象的：数组、字符串、数值、布尔值。</p><h3 id="3-Unicode"><a href="#3-Unicode" class="headerlink" title="(3) Unicode"></a>(3) Unicode</h3><p>单字节 Unicode: <code>&quot;\u0061&quot;</code>，双字节 Unicode: <code>&quot;\u&#123;20BB7&#125;&quot;</code></p><h3 id="4-Template-strings"><a href="#4-Template-strings" class="headerlink" title="(4) Template strings"></a>(4) Template strings</h3><p>字符串的扩展声明语法，使用反引号表示`，内部可插入表达式。可以包含多行字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> resp = &#123; <span class="attr">status</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> text = <span class="string">`response: <span class="subst">$&#123;resp.status == <span class="number">0</span> ? <span class="string">&quot;ok&quot;</span> : <span class="string">&quot;error&quot;</span>&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(text);</span><br></pre></td></tr></table></figure><p>可以作为第一个参数传入函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ++<span class="built_in">parseInt</span>(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add<span class="string">`12`</span>);</span><br><span class="line"><span class="comment">// -&gt; 13</span></span><br></pre></td></tr></table></figure><p>但是如果包含模版内表达式，则会换转为多个参数。将表达式切分为多个部分，传递给参数 0，然后将表达式结果依次传递给后续参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>,</span><br><span class="line">  b = <span class="number">2</span>;</span><br><span class="line">add<span class="string">`<span class="subst">$&#123;a + b&#125;</span>`</span>; <span class="comment">// 错误！Uncaught ReferenceError: Invalid left-hand side expression in prefix operation</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">arg, ...args</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">  <span class="keyword">if</span> (args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> args) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">tag<span class="string">`part1<span class="subst">$&#123;a + b&#125;</span>part2<span class="subst">$&#123;a * b&#125;</span>part3`</span>;</span><br><span class="line"><span class="comment">// -&gt; [&#x27;part1&#x27;, &#x27;part2&#x27;, &#x27;part3&#x27;]</span></span><br><span class="line"><span class="comment">// -&gt; 3</span></span><br><span class="line"><span class="comment">// -&gt; 2</span></span><br></pre></td></tr></table></figure><h3 id="5-Function"><a href="#5-Function" class="headerlink" title="(5) Function"></a>(5) Function</h3><p>可为参数添加默认值<code>function(n = 0) &#123;&#125;</code> 当传入参数为<code>undefined</code>时触发，需要放在尾部</p><p>将默认值设定为<code>undefined</code>代表是可以省略的</p><p><code>Function.prototype.length</code>返回需要传入参数的个数</p><p>新增<strong>rest</strong>参数<code>function(...rest) &#123;&#125;</code>包含传递参数的数组，必须放在尾部</p><p><code>Function.prototype.name</code>返回函数名，或者匿名函数的变量名</p><p>箭头函数<code>() =&gt; &#123;&#125;</code>用于快速编写匿名函数，其不包含自己的作用域。将<code>this</code>固定化，有利于封装回调函数</p><h2 id="变化内容"><a href="#变化内容" class="headerlink" title="变化内容"></a>变化内容</h2><h3 id="lt-1-gt-RegExp-Constructor"><a href="#lt-1-gt-RegExp-Constructor" class="headerlink" title="&lt;1&gt; RegExp Constructor"></a>&lt;1&gt; RegExp Constructor</h3><p><code>RegExp</code>构造函数可以同时接收正则表达式和修饰符参数。参数会覆盖表达式中的修饰符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/abc/gi</span>, <span class="string">&quot;i&quot;</span>).flags;</span><br><span class="line"><span class="comment">// -&gt; &#x27;i&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="lt-2-gt-RegExp-property"><a href="#lt-2-gt-RegExp-property" class="headerlink" title="&lt;2&gt; RegExp property"></a>&lt;2&gt; RegExp property</h3><p>ES6 将这 4 个方法，在语言内部全部调用<code>RegExp</code>的实例方法，从而做到所有与正则相关的方法，全都定义在<code>RegExp</code>对象上。</p><ul><li><code>String.prototype.match</code> 调用 <code>RegExp.prototype[Symbol.match]</code></li><li><code>String.prototype.replace</code> 调用 <code>RegExp.prototype[Symbol.replace]</code></li><li><code>String.prototype.search</code> 调用 <code>RegExp.prototype[Symbol.search]</code></li><li><code>String.prototype.split</code> 调用 <code>RegExp.prototype[Symbol.split]</code></li></ul><h3 id="lt-3-gt-Number"><a href="#lt-3-gt-Number" class="headerlink" title="&lt;3&gt; Number"></a>&lt;3&gt; Number</h3><p><code>parseInt() parseFloat()</code>移动到<code>Number</code>对象中</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ECMAScript-6-学习笔记&quot;&gt;&lt;a href=&quot;#ECMAScript-6-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6+学习笔记&quot;&gt;&lt;/a&gt;ECMAScript 6+学习笔记&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小，基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。&lt;/p&gt;
&lt;p&gt;因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本笔记主要参考了阮一峰老师的开源教程：&lt;a href=&quot;https://es6.ruanyifeng.com/https://es6.ruanyifeng.com/&quot;&gt;《ECMAScript 6 入门教程》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/&quot;&gt;MDN Web Docs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://tc39.es/&quot;&gt;ECMAScript TC39&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Update Time:&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="JS" scheme="https://ryzenx.com/tags/js/"/>
    
      <category term="Note" scheme="https://ryzenx.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>给桌面换上bing壁纸  S-Wallpaper</title>
    <link href="https://ryzenx.com/2021/06/S-Wallpaper/"/>
    <id>https://ryzenx.com/2021/06/S-Wallpaper/</id>
    <published>2021-06-09T09:16:25.000Z</published>
    <updated>2022-04-04T04:14:23.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="给桌面换上bing壁纸-S-Wallpaper"><a href="#给桌面换上bing壁纸-S-Wallpaper" class="headerlink" title="给桌面换上bing壁纸  S-Wallpaper"></a>给桌面换上bing壁纸  S-Wallpaper</h1><blockquote><p><a href="https://bing.com">bing</a>的每日壁纸都很好看，很多时候就想把它下载下来，保存、设置为自己的电脑桌面壁纸。</p><p>网上有类似功能的软件不少，不过自己实际做一个还是很有趣味的！</p><p>服务器端是通过php实现的，下面会给出代码，可以自行部署在服务器上然后实现多端保存。</p></blockquote><span id="more"></span><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>服务器端的文件名称为<code>bing.php</code>。其作用不难理解，就是解析bing.com的背景图片然后保存到服务器，并且直接给请求端返回为<code>.jpg</code>图片。</p><p>目前解析的bing.com壁纸分辨率为<strong>1080P</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 保存文件的文件夹名称</span></span><br><span class="line"><span class="variable">$path</span>=date(<span class="string">&#x27;Ym&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (!file_exists(<span class="variable">$path</span>)) &#123;</span><br><span class="line">    mkdir(<span class="variable">$path</span>, <span class="number">0777</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$last</span> = strtotime(<span class="string">&quot;-1 month&quot;</span>, time());</span><br><span class="line"><span class="variable">$last_month</span> = date(<span class="string">&quot;Ym&quot;</span>, <span class="variable">$last</span>);  <span class="comment">//上个月</span></span><br><span class="line"><span class="comment">// 删除上个月保存的图片，可以自行调整（防止服务器硬盘空间被占用满）</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(<span class="variable">$last_month</span>)) &#123;</span><br><span class="line">    deleteDir(<span class="variable">$last_month</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 保存图片的文件名</span></span><br><span class="line"><span class="variable">$pathurl</span> = <span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&#x27;d&#x27;</span>).<span class="string">&#x27;.jpg&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (!is_file(<span class="variable">$pathurl</span>)) &#123;</span><br><span class="line">    <span class="comment">// 对bing.com进行请求</span></span><br><span class="line">    <span class="comment">// 中国区的bing壁纸更新可能有时差</span></span><br><span class="line">    <span class="variable">$str</span> = file_get_contents(<span class="string">&#x27;https://cn.bing.com/HPImageArchive.aspx?idx=0&amp;n=1&#x27;</span>);</span><br><span class="line">    <span class="comment">// 对请求的内容进行正则匹配</span></span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/&lt;urlBase&gt;(.+?)&lt;\/urlBase&gt;/ies&quot;</span>, <span class="variable">$str</span>, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">        <span class="comment">// 生成bing.com图片的实际地址</span></span><br><span class="line">        <span class="variable">$imgurl</span> = <span class="string">&#x27;https://cn.bing.com&#x27;</span>.<span class="variable">$matches</span>[<span class="number">1</span>].<span class="string">&#x27;_1920x1080.jpg&#x27;</span>;</span><br><span class="line">        <span class="comment">// 拷贝（下载）图片到本地</span></span><br><span class="line">        copy(<span class="variable">$imgurl</span>, <span class="variable">$pathurl</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果请求、匹配失败，则防护一张预设静态图片，防止请求端得不到数据</span></span><br><span class="line">        <span class="variable">$static_file</span> = <span class="string">&#x27;https://example.com/unamed.jpg&#x27;</span>;</span><br><span class="line">        copy(<span class="variable">$static_file</span>, <span class="variable">$pathurl</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pathurl</span>) &#123;</span><br><span class="line">    <span class="comment">// 向请求端直接返回本图片</span></span><br><span class="line">    header(<span class="string">&#x27;Content-Type: image/jpeg&#x27;</span>);</span><br><span class="line">    header(<span class="string">&quot;Cache-Control: no-store, no-cache, must-revalidate&quot;</span>);  <span class="comment">//强制不缓存</span></span><br><span class="line">    header(<span class="string">&quot;Pragma: no-cache&quot;</span>);  <span class="comment">//禁止本页被缓存</span></span><br><span class="line">    @ob_end_clean();</span><br><span class="line">    @readfile(<span class="variable">$pathurl</span>);</span><br><span class="line">    @flush();</span><br><span class="line">    @ob_flush();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDir</span>(<span class="params"><span class="variable">$path_e</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_dir(<span class="variable">$path_e</span>)) &#123;</span><br><span class="line">        <span class="comment">//扫描一个目录内的所有目录和文件并返回数组</span></span><br><span class="line">        <span class="variable">$dirs</span> = scandir(<span class="variable">$path_e</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$dirs</span> <span class="keyword">as</span> <span class="variable">$dir</span>) &#123;</span><br><span class="line">            <span class="comment">//排除目录中的当前目录(.)和上一级目录(..)</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$dir</span> != <span class="string">&#x27;.&#x27;</span> &amp;&amp; <span class="variable">$dir</span> != <span class="string">&#x27;..&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是目录则递归子目录，继续操作</span></span><br><span class="line">                <span class="variable">$sonDir</span> = <span class="variable">$path_e</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$dir</span>;</span><br><span class="line">                <span class="keyword">if</span> (is_dir(<span class="variable">$sonDir</span>)) &#123;</span><br><span class="line">                    <span class="comment">//递归删除</span></span><br><span class="line">                    deleteDir(<span class="variable">$sonDir</span>);</span><br><span class="line">                    <span class="comment">//目录内的子目录和文件删除后删除空目录</span></span><br><span class="line">                    @rmdir(<span class="variable">$sonDir</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//如果是文件直接删除</span></span><br><span class="line">                    @unlink(<span class="variable">$sonDir</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @rmdir(<span class="variable">$path_e</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Python-主程序"><a href="#Python-主程序" class="headerlink" title="Python 主程序"></a>Python 主程序</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>下载服务器端的图片文件，并转码为bmp格式，给Windows系统设置为壁纸。</p><blockquote><p>对于其他系统可以自行研究相关代码</p></blockquote><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>一下实例程序为了更加直观的人机交互，设置了很多提示语句，如果想做成无窗口的程序可删除提示语句。</p><h3 id="需求依赖"><a href="#需求依赖" class="headerlink" title="需求依赖"></a>需求依赖</h3><p><code>pyinstaller</code>为打包Python程序所用，直接运行<code>python main.py</code>可以不安装此依赖包</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requests</span><br><span class="line">pywi<span class="symbol">n32</span></span><br><span class="line">Pillow</span><br><span class="line">pyi<span class="symbol">nstaller</span></span><br></pre></td></tr></table></figure><h3 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a><code>main.py</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: Steven Yan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"><span class="keyword">import</span> win32con</span><br><span class="line"><span class="keyword">import</span> win32gui</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUrl</span>():</span></span><br><span class="line">    myUrl = <span class="string">&quot;https://stevenos.com/api/bing&quot;</span></span><br><span class="line">    <span class="keyword">return</span> myUrl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPic</span>(<span class="params">picUrl</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Downloading picture from StevenOS.com...\n&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        req = requests.get(picUrl)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;pyDesktopPic.jpg&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> ccc:</span><br><span class="line">            ccc.write(req.content)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Picture saved at TEMP dir.\n&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Can&#x27;t download Picture!\n&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Check your Internet access and try again.&quot;</span>)</span><br><span class="line">        goodBye()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">moveFile</span>(<span class="params">file, des</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(file):</span><br><span class="line">        <span class="built_in">print</span>(file+<span class="string">&quot; is not exist&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Please contact me@StevenOS.com&quot;</span>)</span><br><span class="line">        goodBye()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(des):</span><br><span class="line">            os.makedirs(des)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.system(<span class="string">&quot;move /y &quot;</span>+file+<span class="string">&quot; &quot;</span>+des)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convPic</span>(<span class="params">jpg, bmp</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        img = Image.<span class="built_in">open</span>(jpg)</span><br><span class="line">        img.save(bmp, <span class="string">&#x27;BMP&#x27;</span>)</span><br><span class="line">        os.remove(jpg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The picture was converted successfully.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setWallpaper</span>(<span class="params">picUri</span>):</span></span><br><span class="line">    key = win32api.RegOpenKeyEx(</span><br><span class="line">        win32con.HKEY_CURRENT_USER, <span class="string">&quot;Control Panel\\Desktop&quot;</span>, <span class="number">0</span>, win32con.KEY_SET_VALUE)</span><br><span class="line">    win32api.RegSetValueEx(key, <span class="string">&quot;WallpaperStyle&quot;</span>, <span class="number">0</span>, win32con.REG_SZ, <span class="string">&quot;2&quot;</span>)</span><br><span class="line">    win32api.RegSetValueEx(key, <span class="string">&quot;TileWallpaper&quot;</span>, <span class="number">0</span>, win32con.REG_SZ, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    win32gui.SystemParametersInfo(win32con.SPI_SETDESKWALLPAPER, picUri, <span class="number">1</span>+<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n-&gt;&gt;TODAY Wallpaper set!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMe</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                  Website: RyzenX.com                 ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                     By Steven Yan                    ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodBye</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nGood Bye! See you next time!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&gt; %s&quot;</span> % <span class="built_in">str</span>(<span class="number">4</span>-i))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This Program only supports Windows&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.system(<span class="string">&quot;mode con cols=60 lines=30&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;color 0e&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;title Daily Wallpaper Changer from StevenOS.com&quot;</span>)</span><br><span class="line">        printMe()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Now: %s \n&quot;</span> % time.ctime())</span><br><span class="line">    tempDir = os.getenv(<span class="string">&#x27;TEMP&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Your TEMP dir is: &quot;</span>+tempDir+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Note: cleaning out &quot;</span>+tempDir+<span class="string">&quot; will delete the wallpaper file&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    downloadPic(getUrl())</span><br><span class="line">    moveFile(<span class="string">&quot;pyDesktopPic.jpg&quot;</span>, tempDir)</span><br><span class="line">    convPic(tempDir+<span class="string">&quot;\pyDesktopPic.jpg&quot;</span>, tempDir+<span class="string">&quot;\pyDesktopPic.bmp&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    setWallpaper(tempDir+<span class="string">&quot;\pyDesktopPic.bmp&quot;</span>)</span><br><span class="line">    goodBye()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="辅助程序"><a href="#辅助程序" class="headerlink" title="辅助程序"></a>辅助程序</h2><h3 id="Windows启动工具命令行批处理"><a href="#Windows启动工具命令行批处理" class="headerlink" title="Windows启动工具命令行批处理"></a>Windows启动工具命令行批处理</h3><p>为了更好、更优雅地设置Windows开机自运行、右键运行、定时运行主程序，特别编写了这个批处理工具集。</p><p>实现的功能有：</p><ul><li>写入注册表，开机启动</li><li>添加程序到Windows计划任务</li><li>设置为桌面右键菜单项</li></ul><h3 id="start-bat"><a href="#start-bat" class="headerlink" title="start.bat"></a><code>start.bat</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">title Program Starter</span><br><span class="line">%1 %2</span><br><span class="line">ver|find <span class="string">&quot;5.&quot;</span> &gt; nul &amp;&amp; goto :main</span><br><span class="line">mshta vbscript:createobject(<span class="string">&quot;shell.application&quot;</span>).shellexecute(<span class="string">&quot;%~s0&quot;</span>,<span class="string">&quot;goto :main&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;runas&quot;</span>,1)(window.close) &amp; goto :eof</span><br><span class="line">:main</span><br><span class="line">  cls</span><br><span class="line">  mode con cols=60 lines=20</span><br><span class="line">  color 06</span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##        You can just drag your file into here         ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##                                                      ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##                 Website: RyzenX.com                  ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##                      By Steven                       ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  pause</span><br><span class="line">:ch</span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##   1, Add the Program to `Run` Registry               ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##   2, Add the program to scheduled task               ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##   3, Add the program to Desktop Right-Click *Good    ##</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="comment">##########################################################</span></span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  <span class="built_in">echo</span> Pleas enter your choice</span><br><span class="line">  <span class="built_in">set</span> /p a= :</span><br><span class="line">  <span class="built_in">set</span> /p src= Enter the Program path:</span><br><span class="line">  <span class="built_in">set</span> /p name= Enter the Key Name (Important):</span><br><span class="line">  <span class="keyword">if</span> %a%==1 goto addReg</span><br><span class="line">  <span class="keyword">if</span> %a%==2 goto addSchtask</span><br><span class="line">  <span class="keyword">if</span> %a%==3 goto rc</span><br><span class="line">  <span class="built_in">echo</span> Not good. &amp; pause &amp; goto ch</span><br><span class="line">:addReg</span><br><span class="line">  reg add <span class="string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run&quot;</span> /v %name% /d %src% /f</span><br><span class="line">  pause&amp;goto main</span><br><span class="line">:addSchtask</span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  <span class="built_in">echo</span> CAUTION: Time formatted like this: 10:10:00 </span><br><span class="line">  <span class="built_in">set</span> /p ttt= What time <span class="keyword">do</span> you want to change your Wallpaper: </span><br><span class="line">  schtasks /create /tn %name% /ru system /tr %src% /sc DAILY /st %ttt%</span><br><span class="line">  pause&amp;goto main</span><br><span class="line">:rc</span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  <span class="built_in">echo</span> Right-Click at desktop, you can click <span class="string">&quot;%name%&quot;</span> to change your wallpaper manually.</span><br><span class="line">  <span class="built_in">echo</span>.</span><br><span class="line">  pause</span><br><span class="line">  reg add <span class="string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\%name%&quot;</span> /f</span><br><span class="line">  reg add <span class="string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\%name%\command&quot;</span> /f</span><br><span class="line">  reg add <span class="string">&quot;HKEY_CLASSES_ROOT\Directory\Background\shell\%name%\command&quot;</span> /ve /d <span class="string">&quot;%src%&quot;</span> /f</span><br><span class="line">  pause&amp;goto main</span><br></pre></td></tr></table></figure><h2 id="欢迎使用！"><a href="#欢迎使用！" class="headerlink" title="欢迎使用！"></a>欢迎使用！</h2><p><a href="https://github.com/Steven-nagisa-Y/S-Wallpaper">Steven-nagisa-Y/S-Wallpaper  (@github.com)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;给桌面换上bing壁纸-S-Wallpaper&quot;&gt;&lt;a href=&quot;#给桌面换上bing壁纸-S-Wallpaper&quot; class=&quot;headerlink&quot; title=&quot;给桌面换上bing壁纸  S-Wallpaper&quot;&gt;&lt;/a&gt;给桌面换上bing壁纸  S-Wallpaper&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://bing.com&quot;&gt;bing&lt;/a&gt;的每日壁纸都很好看，很多时候就想把它下载下来，保存、设置为自己的电脑桌面壁纸。&lt;/p&gt;
&lt;p&gt;网上有类似功能的软件不少，不过自己实际做一个还是很有趣味的！&lt;/p&gt;
&lt;p&gt;服务器端是通过php实现的，下面会给出代码，可以自行部署在服务器上然后实现多端保存。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="essay" scheme="https://ryzenx.com/tags/essay/"/>
    
      <category term="code" scheme="https://ryzenx.com/tags/code/"/>
    
      <category term="Python" scheme="https://ryzenx.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Rust 学习记录</title>
    <link href="https://ryzenx.com/2021/05/Rust-learning/"/>
    <id>https://ryzenx.com/2021/05/Rust-learning/</id>
    <published>2021-05-23T08:13:56.000Z</published>
    <updated>2021-09-14T10:12:24.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rust-语言学习记录"><a href="#Rust-语言学习记录" class="headerlink" title="Rust 语言学习记录"></a>Rust 语言学习记录</h1><blockquote><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>一门赋予每个人 构建可靠且高效软件能力的语言。</p><p>Rust 官方文档 -&gt; <a href="https://doc.rust-lang.org/book/">The Rust Programming Language - (rust-lang.org)</a></p></blockquote><span id="more"></span><h2 id="Rust-安装"><a href="#Rust-安装" class="headerlink" title="Rust 安装"></a>Rust 安装</h2><p>参见<strong>官方文档</strong>：<a href="https://www.rust-lang.org/zh-CN/tools/install">安装 Rust - Rust 程序设计语言 (rust-lang.org)</a></p><p>或者 <strong>菜鸟教程</strong>：<a href="https://www.runoob.com/rust/rust-setup.html">Rust 环境搭建 | 菜鸟教程 (runoob.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rustc -V</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rustc 1.51.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cargo -V</span></span><br><span class="line"><span class="meta">#</span><span class="bash">cargo 1.51.0</span></span><br></pre></td></tr></table></figure><h2 id="使用-Cargo-建立第一个项目"><a href="#使用-Cargo-建立第一个项目" class="headerlink" title="使用 Cargo 建立第一个项目"></a>使用 Cargo 建立第一个项目</h2><p>参考官方：<a href="https://www.rust-lang.org/learn/get-started">Getting started - Rust Programming Language (rust-lang.org)</a></p><h3 id="使用Cargo-toml配置项目"><a href="#使用Cargo-toml配置项目" class="headerlink" title="使用Cargo.toml配置项目"></a>使用Cargo.toml配置项目</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;Steven Yan&quot;</span>]</span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="comment"># 新引入了一个ferris-says包，显示螃蟹对话框</span></span><br><span class="line"><span class="attr">ferris-says</span> = <span class="string">&quot;0.2&quot;</span></span><br></pre></td></tr></table></figure><h3 id="编写主函数"><a href="#编写主函数" class="headerlink" title="编写主函数"></a>编写主函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用新引入的包</span></span><br><span class="line"><span class="keyword">use</span> ferris_says::say;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;stdout, BufWriter&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> stdout = stdout();</span><br><span class="line">    <span class="keyword">let</span> message = <span class="built_in">String</span>::from(<span class="string">&quot;Hello fellow Rustaceans!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> width = message.chars().count();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> writer = BufWriter::new(stdout.lock());</span><br><span class="line">    say(message.as_bytes(), width, &amp;<span class="keyword">mut</span> writer).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构建编译项目"><a href="#构建编译项目" class="headerlink" title="构建编译项目"></a>构建编译项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cargo build</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cargo 工具将从crates.io下载依赖包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cargo run</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Compiling one v0.1.0 (/Users/steven/_Code/Rust/one)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    Finished dev [unoptimized + debuginfo] target(s) <span class="keyword">in</span> 0.81s</span></span><br><span class="line"><span class="meta">#</span><span class="bash">     Running `/Users/steven/_Code/Rust/one/target/debug/one`</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> __________________________</span></span><br><span class="line"><span class="meta">#</span><span class="bash">&lt; Hello fellow Rustaceans! &gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash">        \</span></span><br><span class="line"><span class="bash"><span class="comment">#         \</span></span></span><br><span class="line"><span class="bash"><span class="comment">#            _~^~^~_</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">        \) /  o o  \ (/</span></span><br><span class="line"><span class="meta">#</span><span class="bash">          <span class="string">&#x27;_   -   _&#x27;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">          / <span class="string">&#x27;-----&#x27;</span> \</span></span><br></pre></td></tr></table></figure><h3 id="猜字符游戏"><a href="#猜字符游戏" class="headerlink" title="猜字符游戏"></a>猜字符游戏</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering;</span><br><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Guess the number!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> secret_number = rand::thread_rng().gen_range(<span class="number">1</span>..<span class="number">101</span>);</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Please input your guess.&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> guess = <span class="built_in">String</span>::new();</span><br><span class="line">        io::stdin()</span><br><span class="line">            .read_line(&amp;<span class="keyword">mut</span> guess)</span><br><span class="line">            .expect(<span class="string">&quot;Failed to read line&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> guess: <span class="built_in">u32</span> = <span class="keyword">match</span> guess.trim().parse() &#123;</span><br><span class="line">            <span class="literal">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="literal">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;You guessed: &#123;&#125;&quot;</span>, guess);</span><br><span class="line">        <span class="keyword">match</span> guess.cmp(&amp;secret_number) &#123;</span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;You win!&quot;</span>); </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// 使用let关键字创建变量，该变量默认是不可变的</span></span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// num1 is not changeable</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num1 = &#123;&#125;&quot;</span>, num1);</span><br><span class="line">    <span class="comment">// 使用mut关键字将该变量声明为可变的</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> num2 = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// num2 is changeable</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num2 = &#123;&#125;&quot;</span>, num2);</span><br><span class="line">    num2 += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num2 = &#123;&#125;&quot;</span>, num2);</span><br><span class="line">    <span class="comment">// 常量用关键字const声明，一般用大写，且需要标注值的类型</span></span><br><span class="line">    <span class="keyword">const</span> MAX_NUM: <span class="built_in">u32</span> = <span class="number">100_000</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;MAX_NUM = &#123;&#125; is constants&quot;</span>, MAX_NUM);</span><br><span class="line">    <span class="comment">// 使用let可以对一个变量名重新赋值</span></span><br><span class="line">    <span class="keyword">let</span> num3 = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num3 = &#123;&#125;&quot;</span>, num3);</span><br><span class="line">    <span class="comment">// This declare a NEW variable named num3</span></span><br><span class="line">    <span class="keyword">let</span> num3: <span class="built_in">String</span> = (num3 * <span class="number">2</span>).to_string();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;NEW num3 = &#123;&#125;&quot;</span>, num3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="整形变量"><a href="#整形变量" class="headerlink" title="整形变量"></a>整形变量</h4><table><thead><tr><th>长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td><code>i8</code></td><td><code>u8</code></td></tr><tr><td>16-bit</td><td><code>i16</code></td><td><code>u16</code></td></tr><tr><td>32-bit</td><td><strong>*</strong><code>i32</code></td><td><code>u32</code></td></tr><tr><td>64-bit</td><td><code>i64</code></td><td><code>u64</code></td></tr><tr><td>128-bit</td><td><code>i128</code></td><td><code>u128</code></td></tr><tr><td>arch</td><td><code>isize</code></td><td><code>usize</code></td></tr></tbody></table><h4 id="字面值"><a href="#字面值" class="headerlink" title="字面值"></a>字面值</h4><table><thead><tr><th>数字字面值</th><th>例子</th></tr></thead><tbody><tr><td>Decimal (十进制)</td><td><code>98_222</code></td></tr><tr><td>Hex (十六进制)</td><td><code>0xff</code></td></tr><tr><td>Octal (八进制)</td><td><code>0o77</code></td></tr><tr><td>Binary (二进制)</td><td><code>0b1111_0000</code></td></tr><tr><td>Byte (单字节字符)(仅限于<code>u8</code>)</td><td><code>b&#39;A&#39;</code></td></tr></tbody></table><h4 id="浮点变量"><a href="#浮点变量" class="headerlink" title="浮点变量"></a>浮点变量</h4><table><thead><tr><th>长度</th><th>关键字</th></tr></thead><tbody><tr><td>32-bit</td><td><code>f32</code></td></tr><tr><td>64-bit</td><td><strong>*</strong><code>f64</code></td></tr></tbody></table><h4 id="布尔型变量"><a href="#布尔型变量" class="headerlink" title="布尔型变量"></a>布尔型变量</h4><table><thead><tr><th>布尔值</th><th>关键字</th></tr></thead><tbody><tr><td>真</td><td><code>true</code></td></tr><tr><td>假</td><td><code>false</code></td></tr></tbody></table><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p><code>char z = &#39;Z&#39;;</code></p><p>char 大小为四个字节(four bytes)，并代表了一个 Unicode 标量值（Unicode Scalar Value）</p><h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组：元组长度固定；元组中的每一个位置都有一个类型，而且这些不同值的类型也不必是相同的</span></span><br><span class="line"><span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"><span class="comment">// x = 500; y = 6.4; z = 1</span></span><br><span class="line"><span class="comment">// tup.0 = 500; tup.1 = 6.4; tup.2 = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组： Rust 中的数组是固定长度的；数组中的每个元素的类型必须相同</span></span><br><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr[0] = 1; arr[1] = 2; arr[5] = thread &#x27;main&#x27; panicked at &#x27;index out of bounds: the len is 5 but the index is 5&#x27;</span></span><br><span class="line"><span class="comment">// 初始化数组：5个为0的数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>; <span class="number">5</span>];</span><br><span class="line"><span class="comment">// arr = [0, 0, 0, 0, 0];</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> input = <span class="number">5408</span>;</span><br><span class="line">    show_input(input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在函数签名中，必须声明每个参数的类型。</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">show_input</span></span>(input: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Your input is &#123;&#125;&quot;</span>, input)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用箭头 -&gt; 指明返回值类型</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">x_times</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="comment">// 不添加;表示一个表达式作为返回值</span></span><br><span class="line">    x * x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h3><p><strong>语句</strong>（<em>Statements</em>）是执行一些操作但不返回值的指令。<strong>表达式</strong>（<em>Expressions</em>）计算并产生一个值。</p><p><code>let x = 10;</code> 是一个语句，<code>5 + 6</code> 是一个表达式。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> m = &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line">    n * n</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// n * n 是一个表达式，返回值是25</span></span><br><span class="line"><span class="comment">// m = 25;</span></span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    for_fn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">if_condition</span></span>(a: <span class="built_in">bool</span>, b: <span class="built_in">bool</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &amp;&amp; b &#123;</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> a &#123;</span><br><span class="line">        <span class="number">2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> b &#123;</span><br><span class="line">        <span class="number">3</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">loop_fn</span></span>(times: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;counter = &#123;&#125;&quot;</span>, counter);</span><br><span class="line">        <span class="keyword">if</span> counter &gt;= times &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            counter += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">while_fn</span></span>(times: <span class="built_in">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> counter &lt;= times &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;counter = &#123;&#125;&quot;</span>, counter);</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for循环控制流</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">for_fn</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;value is &#123;&#125;&quot;</span>, ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><h3 id="什么是所有权？"><a href="#什么是所有权？" class="headerlink" title="什么是所有权？"></a>什么是所有权？</h3><blockquote><p>Rust 的核心功能（之一）是 <strong>所有权</strong>（<em>ownership</em>）。虽然该功能很容易解释，但它对语言的其他部分有着深刻的影响。</p><p>Rust 通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查。在运行时，所有权系统的任何功能都不会减慢程序。</p></blockquote><h3 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h3><ol><li>Rust 中的每一个值都有一个被称为其 <strong>所有者</strong>（<em>owner</em>）的变量。</li><li>值在任一时刻有且只有一个所有者。</li><li>当所有者（变量）离开作用域，这个值将被丢弃。</li></ol><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// s 在这里无效, 它尚未声明</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;  <span class="comment">// 从此处起，s 是有效的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此作用域已结束，s 不再有效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量与数据的交互"><a href="#变量与数据的交互" class="headerlink" title="变量与数据的交互"></a>变量与数据的交互</h3><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line"><span class="comment">// 此时 x = y = 5</span></span><br><span class="line"><span class="comment">// Rust 有一个叫做 Copy trait 的特殊注解，可以用在类似整型这样的存储在栈上的类型上。如果一个类型拥有 Copy trait，一个旧的变量在将其赋值给其他变量后仍然可用。Rust 不允许自身或其任何部分实现了 Drop trait 的类型使用 Copy trait。</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1;</span><br><span class="line"><span class="comment">// 此时应该是s1, s2 -&gt; &quot;hello&quot;两个数据指针指向了同一个地址</span></span><br><span class="line"><span class="comment">// &gt; 当 s2 和 s1 离开作用域，他们都会尝试释放相同的内存。这是一个叫做 二次释放（double free）的错误，也是之前提到过的内存安全性 bug 之一。</span></span><br><span class="line"><span class="comment">// 实际上是s2 -&gt; &quot;hello&quot;, s1被移除掉</span></span><br></pre></td></tr></table></figure><h4 id="有哪些类型是Copy的呢？"><a href="#有哪些类型是Copy的呢？" class="headerlink" title="有哪些类型是Copy的呢？"></a>有哪些类型是<code>Copy</code>的呢？</h4><ul><li>所有整数类型，比如 <code>u32</code>。</li><li>布尔类型，<code>bool</code>，它的值是 <code>true</code> 和 <code>false</code>。</li><li>所有浮点数类型，比如 <code>f64</code>。</li><li>字符类型，<code>char</code>。</li><li>元组，当且仅当其包含的类型也都是 <code>Copy</code> 的时候。比如，<code>(i32, i32)</code> 是 <code>Copy</code> 的，但 <code>(i32, String)</code> 就不是</li></ul><h4 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = s1.clone();</span><br><span class="line"><span class="comment">// s1 -&gt; &quot;hello&quot;(1) s2 -&gt; &quot;hello&quot;(2) </span></span><br><span class="line"><span class="comment">// &quot;hello&quot; 被复制了</span></span><br></pre></td></tr></table></figure><h3 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// s 进入作用域</span></span><br><span class="line">    takes_ownership(s);             <span class="comment">// s 的值移动到函数里 ...</span></span><br><span class="line">                                    <span class="comment">// ... 所以到这里不再有效</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;                      <span class="comment">// x 进入作用域</span></span><br><span class="line">    makes_copy(x);                  <span class="comment">// x 应该移动函数里，</span></span><br><span class="line">                                    <span class="comment">// 但 i32 是 Copy 的，所以在后面可继续使用 x</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span></span><br><span class="line">  <span class="comment">// 所以不会有特殊操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>) &#123; <span class="comment">// some_string 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class="line">&#125; <span class="comment">// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">makes_copy</span></span>(some_integer: <span class="built_in">i32</span>) &#123; <span class="comment">// some_integer 进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_integer);</span><br><span class="line">&#125; <span class="comment">// 这里，some_integer 移出作用域。不会有特殊操作</span></span><br></pre></td></tr></table></figure><h3 id="引用与借用"><a href="#引用与借用" class="headerlink" title="引用与借用"></a>引用与借用</h3><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="comment">// 可变引用</span></span><br><span class="line">    change(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);  <span class="comment">// hello world</span></span><br><span class="line">    <span class="comment">// 只能有一个可变引用</span></span><br><span class="line">    <span class="comment">// cannot borrow `s` as mutable more than once at a time</span></span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    <span class="comment">// 我们也不能在拥有不可变引用的同时拥有可变引用。</span></span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s; <span class="comment">// 大问题</span></span><br><span class="line">    <span class="comment">// 一个引用的作用域从声明的地方开始一直持续到最后一次使用为止</span></span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="keyword">let</span> r2 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2);</span><br><span class="line">    <span class="comment">// 此位置之后 r1 和 r2 不再使用</span></span><br><span class="line">    <span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s; <span class="comment">// 没问题</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, r3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 错误：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="comment">// 错误！无法修改引用的值</span></span><br><span class="line">    some_string.push_str(<span class="string">&quot;, world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确：</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(<span class="built_in">str</span>: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>) &#123;</span><br><span class="line">    <span class="built_in">str</span>.push_str(<span class="string">&quot; world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们将获取引用作为函数参数称为 <strong>借用</strong></p><ul><li>在任意给定时间，<strong>要么</strong> 只能有一个可变引用，<strong>要么</strong> 只能有多个不可变引用。</li><li>引用必须总是有效的。</li></ul></blockquote><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><blockquote><p>另一个没有所有权的数据类型是 <em>slice</em>。slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。</p></blockquote><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串切片</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> hello = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> world = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line"><span class="comment">// 数字切片</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><blockquote><p>struct<em>，或者 *structure</em>，是一个自定义数据类型，允许你命名和包装多个相关的值，从而形成一个有意义的组合。</p><p>不需要依赖顺序来指定或访问实例中的值。</p><p>定义结构体，需要使用 <code>struct</code> 关键字并为整个结构体提供一个名字。结构体的名字需要描述它所组合的数据的意义。接着，在大括号中，定义每一部分数据的名字和类型，我们称为 <strong>字段</strong>（<em>field</em>）。</p></blockquote><h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span></span> &#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    account: <span class="built_in">String</span>,</span><br><span class="line">    id: <span class="built_in">i32</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实例化结构体"><a href="#实例化结构体" class="headerlink" title="实例化结构体"></a>实例化结构体</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user1 = User &#123;</span><br><span class="line">    name: <span class="built_in">String</span>::from(<span class="string">&quot;Van&quot;</span>),</span><br><span class="line">    account: <span class="built_in">String</span>::from(<span class="string">&quot;vansama&quot;</span>),</span><br><span class="line">    id: <span class="number">123456</span>,</span><br><span class="line">    extra: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 可变结构体实例</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> user2 = User &#123;</span><br><span class="line">    name: <span class="built_in">String</span>::from(<span class="string">&quot;Dark&quot;</span>),</span><br><span class="line">    account: <span class="built_in">String</span>::from(<span class="string">&quot;darkholme&quot;</span>),</span><br><span class="line">    id: <span class="number">1234567</span>,</span><br><span class="line">    extra: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 获取值、改变值可以用点&quot;.&quot;号</span></span><br><span class="line"><span class="built_in">print!</span>(user1.name);</span><br><span class="line"><span class="comment">// 从已有结构体创建新结构体实例</span></span><br><span class="line"><span class="keyword">let</span> user3 = User &#123;</span><br><span class="line">    name: <span class="built_in">String</span>::from(<span class="string">&quot;Sam&quot;</span>),</span><br><span class="line">    account: <span class="built_in">String</span>::from(<span class="string">&quot;sans&quot;</span>),</span><br><span class="line">    ..user1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过派生-trait-增加实用功能"><a href="#通过派生-trait-增加实用功能" class="headerlink" title="通过派生 trait 增加实用功能"></a>通过派生 trait 增加实用功能</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加结构体打印功能</span></span><br><span class="line"><span class="comment">// Rust 确实 包含了打印出调试信息的功能，不过我们必须为结构体显式选择这个功能。为此，在结构体定义之前加上 #[derive(Debug)] 注解</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;rect1 is &#123;:#?&#125;&quot;</span>, rect1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">rect1 is Rectangle &#123;</span><br><span class="line">    width: <span class="number">30</span>,</span><br><span class="line">    height: <span class="number">50</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><p><strong>方法</strong> 与函数类似：它们使用 <code>fn</code> 关键字和名称声明，可以拥有参数和返回值，同时包含在某处调用该方法时会执行的代码。不过方法与函数是不同的，因为它们在结构体的上下文中被定义（或者是枚举或 trait 对象的上下文，将分别在第六章和第十七章讲解），并且它们第一个参数总是 <code>self</code>，它代表调用该方法的结构体实例。</p><p><code>impl</code>块允许有多个。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">can_hold</span></span>(&amp;<span class="keyword">self</span>, other: &amp;Rectangle) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width &gt;= other.width &amp;&amp; <span class="keyword">self</span>.height &gt;= other.height</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> rect1 = Rectangle &#123; width: <span class="number">30</span>, height: <span class="number">50</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect2 = Rectangle &#123; width: <span class="number">10</span>, height: <span class="number">40</span> &#125;;</span><br><span class="line">    <span class="keyword">let</span> rect3 = Rectangle &#123; width: <span class="number">60</span>, height: <span class="number">45</span> &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(</span><br><span class="line">      <span class="string">&quot;The area of the rectangle is &#123;&#125; square pixels.&quot;</span>,</span><br><span class="line">      rect1.area()</span><br><span class="line">    );</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Can rect1 hold rect2? &#123;&#125;&quot;</span>, rect1.can_hold(&amp;rect2));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Can rect1 hold rect3? &#123;&#125;&quot;</span>, rect1.can_hold(&amp;rect3));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关联函数"><a href="#关联函数" class="headerlink" title="关联函数"></a>关联函数</h3><p><code>impl</code> 块的另一个有用的功能是：允许在 <code>impl</code> 块中定义 <strong>不</strong> 以 <code>self</code> 作为参数的函数。这被称为 <strong>关联函数</strong>（<em>associated functions</em>），因为它们与结构体相关联。它们仍是函数而不是方法，因为它们并不作用于一个结构体的实例。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如轻松地创建一个正方形</span></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rectangle &#123;</span><br><span class="line">        Rectangle &#123; width: size, height: size &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举与模式匹配"><a href="#枚举与模式匹配" class="headerlink" title="枚举与模式匹配"></a>枚举与模式匹配</h2><p><strong>枚举</strong>（<em>enumerations</em>），也被称作 <em>enums</em>。枚举允许你通过列举可能的 <strong>成员</strong>（<em>variants</em>） 来定义一个类型。首先，我们会定义并使用一个枚举来展示它是如何连同数据一起编码信息的。接下来，我们会探索一个特别有用的枚举，叫做 <code>Option</code>，它代表一个值要么是某个值要么什么都不是。然后会讲到在 <code>match</code> 表达式中用模式匹配，针对不同的枚举值编写相应要执行的代码。最后会介绍 <code>if let</code>，另一个简洁方便处理代码中枚举的结构。</p><h3 id="创建枚举"><a href="#创建枚举" class="headerlink" title="创建枚举"></a>创建枚举</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举例：IP 地址的类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrType</span></span> &#123;</span><br><span class="line">    v4,</span><br><span class="line">    v6,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">let</span> ipv4 = IpAddrType:v4;</span><br><span class="line"><span class="keyword">let</span> ipv6 = IpAddrType:v6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 IP 数据放在结构体中</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span>: <span class="title">IpAddrType</span></span>,</span><br><span class="line">    addr: <span class="built_in">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简洁的方式：将数据直接放进枚举成员中。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddr</span></span> &#123;</span><br><span class="line">    V4(<span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>),</span><br><span class="line">    V6(<span class="built_in">String</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Option-枚举"><a href="#Option-枚举" class="headerlink" title="Option 枚举"></a>Option 枚举</h3><p>Rust 并没有空值，不过它确实拥有一个可以编码存在或不存在概念的枚举。这个枚举是 <code>Option&lt;T&gt;</code>，而且它<a href="https://doc.rust-lang.org/std/option/enum.Option.html">定义于标准库中</a></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Option&lt;T&gt; 枚举是如此有用以至于它甚至被包含在了 prelude 之中，不需要将其显式引入作用域。另外，它的成员也是如此，可以不需要 Option:: 前缀来直接使用 Some 和 None。即便如此 Option&lt;T&gt; 也仍是常规的枚举，Some(T) 和 None 仍是 Option&lt;T&gt; 的成员。</span></span><br><span class="line"><span class="keyword">let</span> some_number = <span class="literal">Some</span>(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h4 id="为什么-Option-lt-T-gt-比空值安全？"><a href="#为什么-Option-lt-T-gt-比空值安全？" class="headerlink" title="为什么 Option&lt;T&gt; 比空值安全？"></a>为什么 <code>Option&lt;T&gt;</code> 比空值安全？</h4><p>当在 Rust 中拥有一个像 <code>i8</code> 这样类型的值时，编译器确保它总是有一个有效的值。只有当使用 <code>Option&lt;i8&gt;</code>（或者任何用到的类型）的时候需要担心可能没有值，而编译器会确保在<code>Option&lt;i8&gt;</code>使用值之前处理了为空的情况。</p><h3 id="控制流运算符"><a href="#控制流运算符" class="headerlink" title="控制流运算符"></a>控制流运算符</h3><p>Rust 有一个叫做 <code>match</code> 的极为强大的控制流运算符，它允许我们将一个值与一系列的模式相比较，并根据相匹配的模式执行相应代码。模式可由字面值、变量、通配符和许多其他内容构成。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Coin</span></span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    Quarter,</span><br><span class="line">    Buck,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">value_in_cents</span></span>(coin: Coin) -&gt; <span class="built_in">u8</span> &#123;</span><br><span class="line">    <span class="comment">// match 分支分为两部分：目标匹配模式和代码；分支之间使用 , 分隔</span></span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">        <span class="comment">// 如果分支代码较短的话通常不使用大括号，如果想要在分支中运行多行代码，可以使用大括号。</span></span><br><span class="line">        Coin::Buck =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;a buck equals 100 coins.&quot;</span>);</span><br><span class="line">            <span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rust 中的匹配是 <strong>穷尽的</strong>（<em>exhaustive</em>）：必须穷举到最后的可能性来使代码有效。</p><h3 id="更简洁的控制流"><a href="#更简洁的控制流" class="headerlink" title="更简洁的控制流"></a>更简洁的控制流</h3><p>使用<code>if let</code>实现单个<code>match</code>选项。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> choice = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">match</span> choice &#123;</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;This is 1&quot;</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, choice)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等同于</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="number">1</span> = choice &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;This is 1.&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;.&quot;</span>, choice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Rust-语言学习记录&quot;&gt;&lt;a href=&quot;#Rust-语言学习记录&quot; class=&quot;headerlink&quot; title=&quot;Rust 语言学习记录&quot;&gt;&lt;/a&gt;Rust 语言学习记录&lt;/h1&gt;&lt;blockquote&gt;
&lt;h2 id=&quot;Rust&quot;&gt;&lt;a href=&quot;#Rust&quot; class=&quot;headerlink&quot; title=&quot;Rust&quot;&gt;&lt;/a&gt;Rust&lt;/h2&gt;&lt;p&gt;一门赋予每个人 构建可靠且高效软件能力的语言。&lt;/p&gt;
&lt;p&gt;Rust 官方文档 -&amp;gt; &lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;The Rust Programming Language - (rust-lang.org)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="学习" scheme="https://ryzenx.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Rust" scheme="https://ryzenx.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>Golang 学习记录</title>
    <link href="https://ryzenx.com/2021/01/Golang-learning/"/>
    <id>https://ryzenx.com/2021/01/Golang-learning/</id>
    <published>2021-01-26T03:17:33.000Z</published>
    <updated>2021-05-23T08:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Golang-学习记录"><a href="#Golang-学习记录" class="headerlink" title="Golang 学习记录"></a>Golang 学习记录</h1><p>[toc]</p><span id="more"></span><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="分组定义"><a href="#分组定义" class="headerlink" title="分组定义"></a>分组定义</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单独导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="comment">// 分组导入</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">4<span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同样适用于声明和定义</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">4i <span class="keyword">int</span></span><br><span class="line">  ok <span class="keyword">bool</span> = <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">4str <span class="keyword">string</span> = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">  cmx <span class="keyword">complex64</span> = <span class="number">10</span> + <span class="number">2i</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出的方法、变量必须是首字母大写</span></span><br><span class="line">math.pi <span class="comment">// cannot refer to unexported name math.pi</span></span><br><span class="line">math.Pi <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><h3 id="Go的多线程"><a href="#Go的多线程" class="headerlink" title="Go的多线程"></a>Go的多线程</h3><ul><li><p><strong>GoRoutine</strong> <code>go f(x)</code>表示在新的线程中执行<code>f(x)</code>，但<code>f</code>和<code>x</code>的求值都是在当前线程。</p></li><li><p><strong>信道</strong>是带有类型的管道，你可以通过它用信道操作符 &lt;- 来发送或者接收值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)  <span class="comment">//创建信道</span></span><br><span class="line">ch &lt;- v    <span class="comment">// 将 v 发送至信道 ch。</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从 ch 接收值并赋予 v。</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的参数和返回值需要显式声明类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的返回值也可以提前指定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">power</span><span class="params">(x, n <span class="keyword">int</span>)</span> <span class="params">(z <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  i, z := <span class="number">0</span>, <span class="number">1</span> <span class="comment">// 短变量声明，自动判断类型</span></span><br><span class="line">  <span class="keyword">for</span> ;i &lt; n; i++ &#123;</span><br><span class="line">    z *= x</span><br><span class="line">  &#125;</span><br><span class="line">4<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 基本函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br><span class="line"><span class="comment">// 相当于 while &#123;&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">4<span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line">    <span class="comment">// v仅在当前结构体内有效</span></span><br><span class="line">44<span class="keyword">return</span> v</span><br><span class="line">4&#125;</span><br><span class="line">4<span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Go 自动提供了在这些语言中每个 case 后面所需的 break 语句。 除非以 fallthrough 语句结束，否则分支会自动终止。 Go 的另一点重要的不同在于 switch 的 case 无需为常量，且取值不必为整数。</span></span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line">4<span class="keyword">case</span> <span class="string">&quot;darwin&quot;</span>:</span><br><span class="line">44fmt.Println(<span class="string">&quot;macOS.&quot;</span>)</span><br><span class="line">4<span class="keyword">case</span> <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">44fmt.Println(<span class="string">&quot;Linux.&quot;</span>)</span><br><span class="line">4<span class="keyword">default</span>:</span><br><span class="line">44fmt.Printf(<span class="string">&quot;%s.\n&quot;</span>, os)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defer 语句会将函数推迟到外层函数返回之后执行。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">4<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">4fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// defer 栈：后进先出</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">4<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">44<span class="keyword">defer</span> fmt.Println(i)</span><br><span class="line">4&#125;</span><br><span class="line">4fmt.Println(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">done 9 8 7 6 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内置接口</span></span><br><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123; String() <span class="keyword">string</span> &#125;</span><br><span class="line"><span class="comment">// fmt包将通过String方法打印值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123; Error() <span class="keyword">string</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image接口</span></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">interface</span> &#123;</span><br><span class="line">    ColorModel() color.Model</span><br><span class="line">    Bounds() image.Rectangle</span><br><span class="line">    At(x, y <span class="keyword">int</span>) color.Color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构体</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">4X <span class="keyword">int</span></span><br><span class="line">4Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">4v := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">  fmt.Println(v) <span class="comment">// &#123;1, 2&#125;</span></span><br><span class="line">4fmt.Println(v.X) <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法：带特殊接受者参数的函数</span></span><br><span class="line"><span class="comment">// 例：为自定义类型写方法</span></span><br><span class="line"><span class="keyword">type</span> iFloat <span class="keyword">float64</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f iFloat)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -f</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用指针接受者来修改原本的值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Add</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  v.X = v.X + i</span><br><span class="line">  v.Y = v.Y + i</span><br><span class="line">&#125;</span><br><span class="line">v.Add(<span class="number">5</span>)  <span class="comment">// 对于指针接受者，Go会自动转换成(&amp;v).Add(5)</span></span><br><span class="line">p := &amp;v <span class="comment">// 对于值的接受者，也可以传递指针，Go会自动转换成(*p).Add(5)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口:接口类型的变量可以保存任何实现了这些方法的值。</span></span><br><span class="line"><span class="keyword">type</span> I <span class="keyword">interface</span> &#123;</span><br><span class="line">  Method()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口内部包含了值和具体方法的元组</span></span><br><span class="line">=&gt; (value, <span class="keyword">type</span>)</span><br><span class="line"><span class="comment">// 例</span></span><br><span class="line"><span class="keyword">type</span> Text <span class="keyword">struct</span> &#123;</span><br><span class="line">  S <span class="keyword">string</span></span><br><span class="line">&#125; <span class="comment">// 定义一个结构体</span></span><br><span class="line"><span class="comment">// 隐式实现接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Text)</span> <span class="title">Method</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(t.S)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i I</span><br><span class="line">i = &amp;Text&#123;<span class="string">&quot;text&quot;</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;%v, %T&quot;</span>, i, i) <span class="comment">// 输出：&amp;&#123;hh&#125;, *main.Text</span></span><br><span class="line"><span class="comment">// 空接口：用来保存任何类型的值</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">interface</span>&#123;&#125;  <span class="comment">// (&lt;nil&gt;, &lt;nil&gt;)</span></span><br><span class="line">i = <span class="number">42</span>  <span class="comment">// (42, int)</span></span><br><span class="line">i = <span class="string">&quot;yes&quot;</span>  <span class="comment">// (yes, string)</span></span><br><span class="line"><span class="comment">// 接口类型判断</span></span><br><span class="line">tmp := i.(<span class="keyword">int</span>)  <span class="comment">// 表示获取i中int类型的值并赋值给t。如果i中类型不是int，则会引发panic</span></span><br><span class="line">tmp, ok := i.(<span class="keyword">string</span>)  <span class="comment">// 如果i保存了string类型的值，ok=true。否则tmp=0,ok=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read方法</span></span><br><span class="line"><span class="comment">// io 包指定了 io.Reader 接口，它表示从数据流的末尾进行读取。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T)</span> <span class="title">Read</span><span class="params">(b []<span class="keyword">byte</span>)</span> <span class="params">(n <span class="keyword">int</span>, err error)</span></span> &#123;&#125;</span><br><span class="line"><span class="comment">// Read 用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个 io.EOF 错误。</span></span><br></pre></td></tr></table></figure><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span>: <span class="literal">true</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">string</span></span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></span><br><span class="line"><span class="keyword">byte</span> <span class="comment">// uint8 的别名</span></span><br><span class="line"><span class="keyword">rune</span> <span class="comment">// int32 的别名</span></span><br><span class="line">    <span class="comment">// 表示一个 Unicode 码点</span></span><br><span class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 类型转换</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">37</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><br /><center>未完待续，持续学习中...</center>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Golang-学习记录&quot;&gt;&lt;a href=&quot;#Golang-学习记录&quot; class=&quot;headerlink&quot; title=&quot;Golang 学习记录&quot;&gt;&lt;/a&gt;Golang 学习记录&lt;/h1&gt;&lt;p&gt;[toc]&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="后端" scheme="https://ryzenx.com/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="学习" scheme="https://ryzenx.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Golang" scheme="https://ryzenx.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Android开发心得：代码管理</title>
    <link href="https://ryzenx.com/2020/11/Android%E5%BC%80%E5%8F%91-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%BF%83%E5%BE%97/"/>
    <id>https://ryzenx.com/2020/11/Android%E5%BC%80%E5%8F%91-%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%BF%83%E5%BE%97/</id>
    <published>2020-11-21T15:01:00.000Z</published>
    <updated>2021-06-13T03:30:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-开发心得"><a href="#Android-开发心得" class="headerlink" title="Android 开发心得"></a>Android 开发心得</h1><h2 id="1-代码的管理和规范化"><a href="#1-代码的管理和规范化" class="headerlink" title="1. 代码的管理和规范化"></a>1. 代码的管理和规范化</h2><p>举例：包名是<strong>com.example.app</strong></p><span id="more"></span><h3 id="文件的安排"><a href="#文件的安排" class="headerlink" title="文件的安排"></a>文件的安排</h3><ul><li><p>package.java</p><ul><li><p>ui</p><blockquote><p>用于存放控制Activity和UI界面的代码</p></blockquote><ul><li>MainActivity.java 则路径为：<code>com.example.app.ui.MainActivity</code></li><li>LaunchActivity.java</li></ul></li><li><p>service</p><blockquote><p>用于存放服务代码</p></blockquote><ul><li>MediaPlayService.java <code>com.expample.app.service.MediaPlayService</code></li><li>KeepAliveService.java</li></ul></li><li><p>receiver</p><blockquote><p>用于存放监听器代码</p></blockquote><ul><li>BoardcastReceiver.java <code>com.example.app.receiver.BoardcastReceiver</code></li><li>LoadReceiver.java</li></ul></li><li><p>utils</p><blockquote><p>用于存放算法类、通用工具类、引入的计算类代码，一般通知类封装后也放在这里</p></blockquote><ul><li>PlaylistSort.java <code>com.example.app.utils.PlaylistSort</code></li><li>ConvertDataFormat.java</li></ul></li><li><p>sdk</p><blockquote><p>用于存放引入的SDK</p></blockquote><ul><li>AMap.java</li></ul></li></ul></li></ul><p>对于多页面多功能性的复杂app，还会通过模块来再次分类。</p><p>比如app有两个模块：<em>看视频<em>和</em>发消息</em></p><ul><li>package.java<ul><li>media<ul><li>ui</li><li>service</li><li>receiver</li><li>provider</li><li>sdk</li></ul></li><li>message<ul><li>ui</li><li>service</li><li>receiver</li><li>provider</li><li>sdk</li></ul></li></ul></li></ul><p>一般来说对于算法：排序、加密等；可复用的工具：网络请求、网络下载等；系统工具：通知、消息、调整屏幕亮度等。这些都是全部页面、组件都会用到的，所以utils基本是放在主目录下。</p><p>考虑到后续加的功能，例如微信：<code>com.tencent.mm.plugin</code>全部把朋友圈、小视频、小程序等组件都放在了plugin里面。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-开发心得&quot;&gt;&lt;a href=&quot;#Android-开发心得&quot; class=&quot;headerlink&quot; title=&quot;Android 开发心得&quot;&gt;&lt;/a&gt;Android 开发心得&lt;/h1&gt;&lt;h2 id=&quot;1-代码的管理和规范化&quot;&gt;&lt;a href=&quot;#1-代码的管理和规范化&quot; class=&quot;headerlink&quot; title=&quot;1. 代码的管理和规范化&quot;&gt;&lt;/a&gt;1. 代码的管理和规范化&lt;/h2&gt;&lt;p&gt;举例：包名是&lt;strong&gt;com.example.app&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="开发" scheme="https://ryzenx.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>前端页面计算SHA256（模拟区块链货币挖矿过程）</title>
    <link href="https://ryzenx.com/2020/11/Front_Calc_SHA265/"/>
    <id>https://ryzenx.com/2020/11/Front_Calc_SHA265/</id>
    <published>2020-11-14T10:00:23.000Z</published>
    <updated>2020-11-14T10:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端页面计算SHA256"><a href="#前端页面计算SHA256" class="headerlink" title="前端页面计算SHA256"></a>前端页面计算SHA256</h1><blockquote><p>模拟计算区块链货币的“挖矿”过程。参考课程：<a href="https://www.icourse163.org/learn/NJU-1449346161">https://www.icourse163.org/learn/NJU-1449346161</a></p><p>使用了CryptoJS计算SHA256，使用bootstrap框架。</p></blockquote><span id="more"></span><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;onLoad()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>区块: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group-prepend&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;input-group-text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;basic-addon1&quot;</span>&gt;</span>#<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;block number&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;block&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;calc()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>随机数: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;random&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;random number&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;random&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;calc()&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span> <span class="attr">style</span>=<span class="string">&quot;align-items: flex-start;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>数据: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;data&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;With textarea&quot;</span> <span class="attr">style</span>=<span class="string">&quot;min-height: 150px;&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;calc()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>SHA256: <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;hash&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;hash number&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;hash&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;word-break:break-all;word-wrap:break-all;resize:unset;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>前几位为0？<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;input-group&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;int&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;int&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-area&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;start()&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>Start!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">420px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">226</span>, <span class="number">240</span>, <span class="number">220</span>, <span class="number">200</span>);</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.line</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.label</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.btn-area</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: left;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>格式化的字符串为：<code>block=$&#123;block&#125;;random=$&#123;random&#125;;data=$&#123;data&#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> block = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> random = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> int = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> hash = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">src, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Array</span>(n + <span class="number">1</span>)).join(src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeLocal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  json = <span class="string">`&#123;&quot;block&quot;: &quot;<span class="subst">$&#123;block&#125;</span>&quot;, &quot;random&quot;: &quot;<span class="subst">$&#123;random&#125;</span>&quot;, &quot;data&quot;: &quot;<span class="subst">$&#123;data&#125;</span>&quot;, &quot;int&quot;: &quot;<span class="subst">$&#123;int&#125;</span>&quot;, &quot;hash&quot;: &quot;<span class="subst">$&#123;hash&#125;</span>&quot;&#125;`</span>;</span><br><span class="line">  <span class="built_in">localStorage</span>.calc_hash = json;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value = block;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = random;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value = data;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readLocal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  json = <span class="built_in">localStorage</span>.calc_hash;</span><br><span class="line">  <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">    json = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    json = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(json);</span><br><span class="line">  <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  block = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value;</span><br><span class="line">  random = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value;</span><br><span class="line">  data = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value;</span><br><span class="line">  <span class="keyword">var</span> input = <span class="string">`block=<span class="subst">$&#123;block&#125;</span>;random=<span class="subst">$&#123;random&#125;</span>;data=<span class="subst">$&#123;data&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">var</span> output = CryptoJS.SHA256(input);</span><br><span class="line">  hash = output.toString(CryptoJS.enc.Hex).toUpperCase();</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value = block;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = random;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value = data;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  block = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value;</span><br><span class="line">  random = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value;</span><br><span class="line">  data = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value;</span><br><span class="line">  int = <span class="built_in">Number</span>(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value);</span><br><span class="line">  <span class="keyword">if</span> (int &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;取0的个数太少了！&quot;</span>);</span><br><span class="line">    int = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (int &gt; <span class="number">9</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;取0的个数太多了！\n你想让你的电脑燃烧吗？？&quot;</span>);</span><br><span class="line">    int = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  random = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> now, target, input, output;</span><br><span class="line">  target = repeat(<span class="string">&#x27;0&#x27;</span>, int);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = <span class="string">&#x27;计算中...&#x27;</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (now != target) &#123;</span><br><span class="line">      input = <span class="string">`block=<span class="subst">$&#123;block&#125;</span>;random=<span class="subst">$&#123;random&#125;</span>;data=<span class="subst">$&#123;data&#125;</span>`</span>;</span><br><span class="line">      output = CryptoJS.SHA256(input);</span><br><span class="line">      hash = output.toString(CryptoJS.enc.Hex);</span><br><span class="line">      now = hash.slice(<span class="number">0</span>, int);</span><br><span class="line">      <span class="built_in">console</span>.log(now);</span><br><span class="line">      random += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    random -= <span class="number">1</span>;</span><br><span class="line">    hash = hash.toUpperCase();</span><br><span class="line">    writeLocal();</span><br><span class="line">  &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  localData = readLocal();</span><br><span class="line">  <span class="keyword">if</span> (localData != <span class="literal">null</span>) &#123;</span><br><span class="line">    block = localData.block;</span><br><span class="line">    random = localData.random;</span><br><span class="line">    data = localData.data;</span><br><span class="line">    int = localData.int;</span><br><span class="line">    hash = localData.hash;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;block&#x27;</span>).value = block;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;random&#x27;</span>).value = random;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;data&#x27;</span>).value = data;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;int&#x27;</span>).value = int;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hash&#x27;</span>).value = hash;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    writeLocal();</span><br><span class="line">    calc();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CodePen-预览"><a href="#CodePen-预览" class="headerlink" title="CodePen 预览"></a>CodePen 预览</h2><p><a href="https://codepen.io/irispro/full/jOrKodY">https://codepen.io/irispro/full/jOrKodY</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前端页面计算SHA256&quot;&gt;&lt;a href=&quot;#前端页面计算SHA256&quot; class=&quot;headerlink&quot; title=&quot;前端页面计算SHA256&quot;&gt;&lt;/a&gt;前端页面计算SHA256&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;模拟计算区块链货币的“挖矿”过程。参考课程：&lt;a href=&quot;https://www.icourse163.org/learn/NJU-1449346161&quot;&gt;https://www.icourse163.org/learn/NJU-1449346161&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用了CryptoJS计算SHA256，使用bootstrap框架。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://ryzenx.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="https://ryzenx.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="模拟" scheme="https://ryzenx.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>利用Tinify缩小图片体积(Python实现)</title>
    <link href="https://ryzenx.com/2020/08/py-tinify/"/>
    <id>https://ryzenx.com/2020/08/py-tinify/</id>
    <published>2020-08-16T03:31:58.000Z</published>
    <updated>2021-03-07T13:34:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用Tinify缩小图片体积-Python实现"><a href="#利用Tinify缩小图片体积-Python实现" class="headerlink" title="利用Tinify缩小图片体积(Python实现)"></a>利用Tinify缩小图片体积(Python实现)</h1><blockquote><p>在博客上传图片的时候往往不需要很高的清晰度，越小的图片体积能够减少图床的空间占用。所以我一般会先通过一些工具缩小图片体积。</p><p>具有代表性的在线图片压缩网站是<a href="https://tinypng.com/">tinyPNG</a></p></blockquote><span id="more"></span><h2 id="首先在官网注册api"><a href="#首先在官网注册api" class="headerlink" title="首先在官网注册api"></a>首先在官网注册api</h2><p>-&gt; 官网：<a href="https://tinypng.com/developers">https://tinypng.com/developers</a></p><h2 id="安装python依赖"><a href="#安装python依赖" class="headerlink" title="安装python依赖"></a>安装python依赖</h2><p><code>pip install --upgrade tinify</code></p><h2 id="在py文件中引入依赖"><a href="#在py文件中引入依赖" class="headerlink" title="在py文件中引入依赖"></a>在py文件中引入依赖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tinify</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填写api</span></span><br><span class="line">tinify.key = <span class="string">&quot;&lt;your api key here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据需要设置代理</span></span><br><span class="line">tinify.proxy = <span class="string">&quot;http://&lt;user&gt;:&lt;pass&gt;@&lt;ip addr&gt;:&lt;port&gt;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line"><span class="comment"># Author: Steven Yan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tinify</span><br><span class="line"><span class="keyword">import</span> os, time, sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tinify.key = <span class="string">&quot;&lt;your key here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">welcome</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                 Website: StevenOS.com                ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##                     By Steven Yan                    ##&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##########################################################&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于在Windows平台设置窗口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setWindow</span>():</span></span><br><span class="line">    os.system(<span class="string">&quot;mode con cols=60 lines=30&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;color 0e&quot;</span>)</span><br><span class="line">    os.system(<span class="string">&quot;title Convert png/jpg to tiny ones&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">goodBye</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nGood Bye! See you next time!\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">4</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&gt; %s&quot;</span> % <span class="built_in">str</span>(<span class="number">4</span> - i))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历目录中的文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="keyword">for</span> dirpath, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            imgpath = os.path.join(dirpath, file)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;compressing... &quot;</span> + imgpath)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                tinify.from_file(imgpath).to_file(imgpath)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># 如果不是图片文件则显示异常，但不要raiseError</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;...Failed to compress &quot;</span> + imgpath)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;...Maybe it is not a PNG/JPG image.&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;...Or, please check your internet access.\n&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nFinished!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Saved at &quot;</span> + path)</span><br><span class="line">    goodBye()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPath</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter your image-path: &quot;</span>)</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> os.name == <span class="string">&quot;nt&quot;</span>:</span><br><span class="line">        setWindow()</span><br><span class="line">        welcome()</span><br><span class="line">        path = getPath()</span><br><span class="line">        convert(path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        welcome()</span><br><span class="line">        path = getPath()</span><br><span class="line">        convert(path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更多语言开发参考"><a href="#更多语言开发参考" class="headerlink" title="更多语言开发参考"></a>更多语言开发参考</h2><p>官方文档：<a href="https://tinypng.com/developers/reference/python">https://tinypng.com/developers/reference/python</a></p><blockquote><p><a href="https://tinypng.com/developers/reference/nodejs">Node.js</a></p><p><a href="https://tinypng.com/developers/reference/java">Java</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;利用Tinify缩小图片体积-Python实现&quot;&gt;&lt;a href=&quot;#利用Tinify缩小图片体积-Python实现&quot; class=&quot;headerlink&quot; title=&quot;利用Tinify缩小图片体积(Python实现)&quot;&gt;&lt;/a&gt;利用Tinify缩小图片体积(Python实现)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在博客上传图片的时候往往不需要很高的清晰度，越小的图片体积能够减少图床的空间占用。所以我一般会先通过一些工具缩小图片体积。&lt;/p&gt;
&lt;p&gt;具有代表性的在线图片压缩网站是&lt;a href=&quot;https://tinypng.com/&quot;&gt;tinyPNG&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Python" scheme="https://ryzenx.com/tags/python/"/>
    
      <category term="Code" scheme="https://ryzenx.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>绝美终端：Zsh(安装Oh My Zsh)</title>
    <link href="https://ryzenx.com/2020/07/oh-my-zsh/"/>
    <id>https://ryzenx.com/2020/07/oh-my-zsh/</id>
    <published>2020-07-13T14:24:51.000Z</published>
    <updated>2022-01-14T05:12:34.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绝美终端：Zsh-安装-Oh-My-Zsh"><a href="#绝美终端：Zsh-安装-Oh-My-Zsh" class="headerlink" title="绝美终端：Zsh(安装 Oh My Zsh)"></a>绝美终端：Zsh(安装 Oh My Zsh)</h1><blockquote><p>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p><p>“Oh My ZSH!”</p></blockquote><center><a href="https://ohmyz.sh/">Oh-My-zsh网站</a></center><span id="more"></span><h2 id="1-Zsh-是什么？"><a href="#1-Zsh-是什么？" class="headerlink" title="1-Zsh 是什么？"></a>1-Zsh 是什么？</h2><p>Z shell（Zsh）是一款可用作交互式登录的 shell 及脚本编写的命令解释器。Zsh 对 Bourne shell 做出了大量改进，同时加入了 Bash、ksh 及 tcsh 的某些功能。</p><p>特性包括：</p><ul><li>可帮助用户键入常用命令选项及参数的可编程命令行补全功能，自带对数百条命令的支持</li><li>可与任意 Shell 共享命令历史</li><li>可在无需运行外部程序（如 find）的情况下通过 文件扩展匹配文件</li><li>改进变量/数组处理方式</li><li>在单缓冲区内编辑多行命令</li><li>拼写检查</li><li>多种兼容模式（例如，Zsh 可在运行为<code>/bin/sh</code>的情况下伪装成 Bourne shell）</li><li>可编程的命令行界面，包括将提示行信息显示在屏幕右侧并在输入过长指令时自动隐藏的功能</li><li>可加载模块可提供额外支持：完整传输控制协议、Unix 域套接字控制、FTP 客户端及扩展数学函数。</li><li>自带<code>where</code>命令，其与<code>which</code>命令类似，但是显示指定于<code>$PATH</code>中所指定指令的全部位置，而不是仅显示所使用指令的位置。</li><li>目录名称。此功能可让用户设置快捷方式，（如<code>~mydir</code>，与<code>~</code>及<code>~user</code>的工作方式相似）。</li></ul><p>我认识 Zsh 是在 macOS 从<strong>bash</strong>转换为<strong>zsh</strong>的时候，最开始是好奇这个 shell/bash/zsh 到底有什么不同：<a href="https://en.wikipedia.org/wiki/Comparison_of_command_shells">终端有什么不同</a>。后来发现了有 Oh My Zsh 的框架，主题倒是非常好看。</p><h2 id="2-Oh-My-Zsh-是什么？"><a href="#2-Oh-My-Zsh-是什么？" class="headerlink" title="2-Oh-My-Zsh 是什么？"></a>2-Oh-My-Zsh 是什么？</h2><p><em>Oh My Zsh is an open source, community-driven framework for managing your zsh configuration.</em></p><p>Oh My Zsh 是一个开源的、由社区驱动的 zsh 管理框架。</p><p><em>Sounds boring. Let’s try again.</em></p><p>听起来没什么大不了的，来一起试一试。</p><p><em>Oh My Zsh will not make you a 10x developer…but you may feel like one.</em></p><p>Oh My Zsh 不能让你变成 10 倍的开发人员，但你很可能有这个感觉。</p><p><em>Once installed, your terminal shell will become the talk of the town or your money back! With each keystroke in your command prompt, you’ll take advantage of the hundreds of powerful plugins and beautiful themes. Strangers will come up to you in cafés and ask you, “that is amazing! are you some sort of genius?”</em></p><p>当你安装好之后，你的终端界面将成为别人讨论的话题，不信给你钱！在命令提示符中的每次击键操作中，您将利用数百个功能强大的插件和精美的主题。陌生人会到咖啡馆来找你，问你：“这太帅了！你是不是天才？”</p><p><em>Finally, you’ll begin to get the sort of attention that you have always felt you deserved. …or maybe you’ll use the time that you’re saving to start flossing more often.</em></p><p>最后，你将开始得到你一直以来应该得到的关注……或者你将用省下来的时间多用牙线清洁下牙齿？</p><p><strong>简单来说</strong>，Oh My Zsh 就是一个用来管理 zsh 的一个框架，有许多的插件、主题还有庞大的社区支持。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-22.51.50.png" alt="截屏2020-07-13-22.51.50"></p><h2 id="3-Zsh-的安装"><a href="#3-Zsh-的安装" class="headerlink" title="3-Zsh 的安装"></a>3-Zsh 的安装</h2><p>在 macOS 中，新版已经自动把终端设置为 Zsh 了，如果没有，可以通过<a href="https://brew.sh/"><strong>HomeBrew</strong></a>进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure><p>苹果官方帮助页面：<a href="https://support.apple.com/zh-cn/HT208050">在 Mac 上将 zsh 用作默认 Shell</a></p><hr><p>在 Linux 系统中：</p><ol><li><p>查看内置 shell:</p><p><code>cat /etc/shells</code></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.00.57.png" alt="截屏2020-07-13-23.00.57"></p></li><li><p>用包管理软件进行安装：</p><p><code>sudo apt-get install zsh</code></p></li><li><p>安装 Oh-My-Zsh：</p><p><em>通过 curl</em></p><p><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p><p><em>通过 wget</em></p><p><code>sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</code></p><p><strong><code>raw.github.com</code>页面可能被 DNS 污染，国内用户自行解决</strong></p></li><li><p>安装完成后会自动切换到 Zsh</p></li></ol><h2 id="4-主题配置"><a href="#4-主题配置" class="headerlink" title="4-主题配置"></a>4-主题配置</h2><p>内置了许多、各种各样的主题文件，详见<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">官方 Wiki</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改zsh配置文件</span></span><br><span class="line">nano ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主题文件指向</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置Zsh配置</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.11.40.png" alt="截屏2020-07-13-23.11.40"></p><p><strong>主题肯定是要自己改改的</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以robbyrussell主题为例</span></span><br><span class="line">nano ~/.oh-my-zsh/themes/robbyrussell.zsh-theme</span><br></pre></td></tr></table></figure><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.21.23.png" alt="截屏2020-07-13-23.21.23"></p><p><strong>主要是前两行</strong>我的配置参考：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PROMPT=<span class="string">&quot;%(?:%&#123;$fg_bold[green]%&#125;➜ :%&#123;$fg_bold[red]%&#125;➜ )&quot;</span></span><br><span class="line">PROMPT+=<span class="string">&quot;%&#123;$fg[red]%&#125;(%T)%&#123;$fg[cyan]%&#125;[%~]$ %&#123;$reset_color%&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>可以自定义修改提示符，其中：</p><table><thead><tr><th>占位符</th><th>内容</th></tr></thead><tbody><tr><td>%T</td><td>系统时间（时：分）</td></tr><tr><td>%*</td><td>系统时间（时：分：秒）</td></tr><tr><td>%D</td><td>系统日期（年-月-日）</td></tr><tr><td>%n</td><td>你的用户名</td></tr><tr><td>%B - %b</td><td>开始到结束使用粗体打印</td></tr><tr><td>%U - %u</td><td>开始到结束使用下划线打印</td></tr><tr><td>%d</td><td>你目前的工作目录</td></tr><tr><td>%~</td><td>你目前的工作目录相对于 Home 的相对路径</td></tr><tr><td>%M</td><td>计算机的主机名</td></tr><tr><td>%m</td><td>计算机的主机名（在第一个句号之前截断）</td></tr><tr><td>%l</td><td>你当前的 tty</td></tr></tbody></table><p>效果如下：</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-07-13-23.37.49.png" alt="截屏2020-07-13-23.37.49"></p><h2 id="5-后记"><a href="#5-后记" class="headerlink" title="5-后记"></a>5-后记</h2><p>本文也算是我自己的一个记录，我比较习惯各个设备上的样式尽可能的保持统一，所以我需要在不同设备上安装 Zsh，并且保持几乎一致的主题配置。</p><p>本篇文章可能干货不算很多，建议有兴趣的朋友去官方 wiki 网站查看一下更加详细的主题、插件配置方法。</p><p>如果自己写出了很漂亮的主题配置，欢迎下方评论留言一起分享哦～</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;绝美终端：Zsh-安装-Oh-My-Zsh&quot;&gt;&lt;a href=&quot;#绝美终端：Zsh-安装-Oh-My-Zsh&quot; class=&quot;headerlink&quot; title=&quot;绝美终端：Zsh(安装 Oh My Zsh)&quot;&gt;&lt;/a&gt;绝美终端：Zsh(安装 Oh My Zsh)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…&lt;/p&gt;
&lt;p&gt;“Oh My ZSH!”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh-My-zsh网站&lt;/a&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Zsh" scheme="https://ryzenx.com/tags/zsh/"/>
    
      <category term="Terminal" scheme="https://ryzenx.com/tags/terminal/"/>
    
      <category term="Console" scheme="https://ryzenx.com/tags/console/"/>
    
  </entry>
  
  <entry>
    <title>使用Scrcpy连接手机与电脑</title>
    <link href="https://ryzenx.com/2020/06/scrcpy/"/>
    <id>https://ryzenx.com/2020/06/scrcpy/</id>
    <published>2020-06-20T08:43:04.000Z</published>
    <updated>2022-01-14T05:12:34.831Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用-Scrcpy-连接手机与电脑"><a href="#使用-Scrcpy-连接手机与电脑" class="headerlink" title="使用 Scrcpy 连接手机与电脑"></a>使用 Scrcpy 连接手机与电脑</h1><blockquote><p>要想在电脑上运行手机应用，最多的做法是采用虚拟机，但是有许多应用并不支持 x86 架构，导致了模拟器的应用体验极差。</p><p>这样一款应用能够解决这个问题，采用 ADB 连接电脑与你的 Android 手机，并且还能流畅的操控，这就是 Scrcpy。</p><p>Scrcpy 是一款开源应用，能够支持在不同平台的电脑上连接和操控 Android 设备。有理由怀疑华为的“多屏协同”也来自于此。</p></blockquote><span id="more"></span><h2 id="1-官方文档"><a href="#1-官方文档" class="headerlink" title="1-官方文档"></a>1-官方文档</h2><p>Scrcpy 在 Github 的项目地址为：<a href="https://github.com/Genymobile/scrcpy">github.com/Genymobile/scrcpy</a></p><p>基本的安装和命令在官方文档中已经十分详细，适合有经验的朋友自行摸索，这里提供适合大众阅读的安装和使用介绍。</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2-安装"></a>2-安装</h2><blockquote><p>本人目前的平台是 macOS，所以配图是 macOS 平台的，其他平台我也会讲述，大体上一致。</p></blockquote><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>推荐使用<code>Homebrew</code>进行安装，什么？没有<strong>Homebrew</strong>？</p><ul><li><p><code>Homebrew</code>的安装：<a href="https://brew.sh/index_zh-cn">官方说明</a></p><p>在终端中运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span><br></pre></td></tr></table></figure></li><li><p>安装完成后，在终端中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装Scrcpy</span></span><br><span class="line">brew install scrcpy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装ADB</span></span><br><span class="line">brew cask install android-platform-tools</span><br></pre></td></tr></table></figure></li><li><p>打开你的 Android 设备的<strong>开发者选项</strong>，并打开<strong>USB 调试</strong></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-06-20-17.03.04.png" alt="截屏2020-06-20-17.03.04"></p></li><li><p>在终端中输入<code>adb devices</code>；adb 将会列出设备，在设备上点击“允许”（一律允许此计算机调试）。</p></li><li><p>再次输入<code>adb devices</code>；如果一切正常，将会显示：</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/%E6%88%AA%E5%B1%8F2020-06-20-17.10.16.png" alt="截屏2020-06-20-17.10.16"></p></li><li><p>在终端中输入<code>scrcpy</code>即可连接上你的 Android 设备啦～</p></li></ul><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在<a href="https://github.com/Genymobile/scrcpy/releases">Releases 页面</a>下载最新的 zip 格式文件。</p><p>解压后在当前目录打开<strong>cmd 或 PowerShell</strong></p><p>按照上述命令即可执行。</p><h2 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3-快捷键"></a>3-快捷键</h2><table><thead><tr><th>动作</th><th align="left">Windows 按键</th><th align="left">macOS 按键</th></tr></thead><tbody><tr><td>Switch fullscreen mode</td><td align="left"><code>Ctrl</code>+<code>f</code></td><td align="left"><code>Cmd</code>+<code>f</code></td></tr><tr><td>左旋屏幕</td><td align="left"><code>Ctrl</code>+<code>←</code> <em>(left)</em></td><td align="left"><code>Cmd</code>+<code>←</code> <em>(left)</em></td></tr><tr><td>右旋屏幕</td><td align="left"><code>Ctrl</code>+<code>→</code> <em>(right)</em></td><td align="left"><code>Cmd</code>+<code>→</code> <em>(right)</em></td></tr><tr><td>屏幕 1:1 显示</td><td align="left"><code>Ctrl</code>+<code>g</code></td><td align="left"><code>Cmd</code>+<code>g</code></td></tr><tr><td>Resize window to remove black borders</td><td align="left"><code>Ctrl</code>+<code>x</code> | <em>Double-click¹</em></td><td align="left"><code>Cmd</code>+<code>x</code> | <em>Double-click¹</em></td></tr><tr><td>点击主页键</td><td align="left"><code>Ctrl</code>+<code>h</code> | <em>Middle-click</em></td><td align="left"><code>Ctrl</code>+<code>h</code> | <em>Middle-click</em></td></tr><tr><td>点击返回键</td><td align="left"><code>Ctrl</code>+<code>b</code> | <em>Right-click²</em></td><td align="left"><code>Cmd</code>+<code>b</code> | <em>Right-click²</em></td></tr><tr><td>点击应用切换器键</td><td align="left"><code>Ctrl</code>+<code>s</code></td><td align="left"><code>Cmd</code>+<code>s</code></td></tr><tr><td>点击菜单键</td><td align="left"><code>Ctrl</code>+<code>m</code></td><td align="left"><code>Ctrl</code>+<code>m</code></td></tr><tr><td>点击音量增加键</td><td align="left"><code>Ctrl</code>+<code>↑</code> <em>(up)</em></td><td align="left"><code>Cmd</code>+<code>↑</code> <em>(up)</em></td></tr><tr><td>点击音量减少键</td><td align="left"><code>Ctrl</code>+<code>↓</code> <em>(down)</em></td><td align="left"><code>Cmd</code>+<code>↓</code> <em>(down)</em></td></tr><tr><td>点击电源键</td><td align="left"><code>Ctrl</code>+<code>p</code></td><td align="left"><code>Cmd</code>+<code>p</code></td></tr><tr><td>开机</td><td align="left"><em>Right-click²</em></td><td align="left"><em>Right-click²</em></td></tr><tr><td>关闭屏幕并保持投屏</td><td align="left"><code>Ctrl</code>+<code>o</code></td><td align="left"><code>Cmd</code>+<code>o</code></td></tr><tr><td>开启屏幕</td><td align="left"><code>Ctrl</code>+<code>Shift</code>+<code>o</code></td><td align="left"><code>Cmd</code>+<code>Shift</code>+<code>o</code></td></tr><tr><td>旋转屏幕方向</td><td align="left"><code>Ctrl</code>+<code>r</code></td><td align="left"><code>Cmd</code>+<code>r</code></td></tr><tr><td>展开通知面板</td><td align="left"><code>Ctrl</code>+<code>n</code></td><td align="left"><code>Cmd</code>+<code>n</code></td></tr><tr><td>收起通知面板</td><td align="left"><code>Ctrl</code>+<code>Shift</code>+<code>n</code></td><td align="left"><code>Cmd</code>+<code>Shift</code>+<code>n</code></td></tr><tr><td>将设备剪贴板拷贝到电脑</td><td align="left"><code>Ctrl</code>+<code>c</code></td><td align="left"><code>Cmd</code>+<code>c</code></td></tr><tr><td>将电脑剪贴板拷贝到设备</td><td align="left"><code>Ctrl</code>+<code>v</code></td><td align="left"><code>Cmd</code>+<code>v</code></td></tr><tr><td>将电脑剪贴板拷贝到设备并粘贴</td><td align="left"><code>Ctrl</code>+<code>Shift</code>+<code>v</code></td><td align="left"><code>Cmd</code>+<code>Shift</code>+<code>v</code></td></tr><tr><td>控制台中开关 FPS 计数</td><td align="left"><code>Ctrl</code>+<code>i</code></td><td align="left"><code>Cmd</code>+<code>i</code></td></tr></tbody></table><p><em>¹</em>双击黑边可隐藏</p><p>²Right-click turns the screen on if it was off, presses BACK otherwise.</p><h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4-常用命令"></a>4-常用命令</h2><p>全部命令请参照<a href="https://github.com/Genymobile/scrcpy/blob/master/README.md">官方文档</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 调整显示分辨率（最宽处）为 1024 pixel</span></span><br><span class="line">scrcpy -m 1024</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 调整镜像码率为 2Mbps</span></span><br><span class="line">scrcpy -b 2M</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 限制最大帧率为 30fps</span></span><br><span class="line">scrcpy --max-fps 30</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 锁定屏幕旋转</span></span><br><span class="line">scrcpy --lock-video-orientation 0   # 初始方向</span><br><span class="line">scrcpy --lock-video-orientation 1   # 90° 逆时针</span><br><span class="line">scrcpy --lock-video-orientation 2   # 180°</span><br><span class="line">scrcpy --lock-video-orientation 3   # 90° 顺时针</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 录屏到 rec.mp4</span></span><br><span class="line">scrcpy -r rec.mp4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止录屏使用：Ctrl + C</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只投屏，不操作</span></span><br><span class="line">scrcpy -n</span><br></pre></td></tr></table></figure><h2 id="5-Enjoy"><a href="#5-Enjoy" class="headerlink" title="5-Enjoy!"></a>5-Enjoy!</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用-Scrcpy-连接手机与电脑&quot;&gt;&lt;a href=&quot;#使用-Scrcpy-连接手机与电脑&quot; class=&quot;headerlink&quot; title=&quot;使用 Scrcpy 连接手机与电脑&quot;&gt;&lt;/a&gt;使用 Scrcpy 连接手机与电脑&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;要想在电脑上运行手机应用，最多的做法是采用虚拟机，但是有许多应用并不支持 x86 架构，导致了模拟器的应用体验极差。&lt;/p&gt;
&lt;p&gt;这样一款应用能够解决这个问题，采用 ADB 连接电脑与你的 Android 手机，并且还能流畅的操控，这就是 Scrcpy。&lt;/p&gt;
&lt;p&gt;Scrcpy 是一款开源应用，能够支持在不同平台的电脑上连接和操控 Android 设备。有理由怀疑华为的“多屏协同”也来自于此。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="note" scheme="https://ryzenx.com/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>App对你的手机做了什么？</title>
    <link href="https://ryzenx.com/2020/06/app%E5%AF%B9%E4%BD%A0%E7%9A%84%E6%89%8B%E6%9C%BA%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>https://ryzenx.com/2020/06/app%E5%AF%B9%E4%BD%A0%E7%9A%84%E6%89%8B%E6%9C%BA%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2020-06-11T09:29:06.000Z</published>
    <updated>2022-01-14T05:12:34.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="App-对你的手机做了什么？"><a href="#App-对你的手机做了什么？" class="headerlink" title="App 对你的手机做了什么？"></a>App 对你的手机做了什么？</h1><p>前段时间，央视新闻频道播出了一则<a href="http://m.news.cctv.com/2020/06/08/ARTImcAiqsUb3bPRnKMS8nBk200608.shtml"><strong>手机 App 频繁自启动 收集个人隐私触目惊心</strong>的新闻</a>，报告出多款常用的手机 App 在后台有自启动、读取照片文件、读取手机信息和读取定位信息的行为。这则新闻再次引起了很多人的关注。虽然在手机普及的信息时代，信息的互通给大家带来了极大的便利，但是个人的隐私信息是否能够”守得住“需要引起更大关注。</p><p>下面我将基于 Android 平台，以开发者的身份深入解析：<strong>App 到底在后台对你的手机做了什么</strong>。</p><blockquote><p>Android = 安卓</p><p>App = 应用</p></blockquote><center>本文是由Steven Yan原创</center><center>转载或引用请注明作者和出处👉<a href="https://ryzenx.com/2020/06/app对你的手机做了什么/">RyzenX.com</a></center><span id="more"></span><h2 id="1-App-能“偷窥”些什么？"><a href="#1-App-能“偷窥”些什么？" class="headerlink" title="1-App 能“偷窥”些什么？"></a>1-App 能“偷窥”些什么？</h2><p>打开你的安卓手机，进入：<strong>设置-&gt;应用/应用管理/应用设置-&gt;找到你一个常用的 app-&gt;点击 app 图标-&gt;点击“权限/权限管理”</strong>，你就能看到这个 App 向你的手机申请了多少权限。下面将以<strong>微信</strong>为示例，介绍 App 拿到这些权限一般会做什么？</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/IMG_20200611_175752.jpg" style="zoom:50%;" /><center>这是一张微信的权限示例图</center><h3 id="什么是权限？"><a href="#什么是权限？" class="headerlink" title="什么是权限？"></a>什么是权限？</h3><p>在 Google Android 开发者文档中，这样描述<strong>权限(Permissions)</strong></p><blockquote><p>The purpose of a <em>permission</em> is to protect the privacy of an Android user. Android apps must request permission to access sensitive user data (such as contacts and SMS), as well as certain system features (such as camera and internet). Depending on the feature, the system might grant the permission automatically or might prompt the user to approve the request.</p></blockquote><p>设置“权限”的目的是为了保护安卓用户的隐私。安卓应用必须先请求用户同意才能获得如“读取通讯录”“读取短信”这样的敏感权限，或者获得某些如“访问相机”和“访问网络“等的系统功能的许可。取决于某些功能特性，系统会默认许可一部分权限或者建议用户同意某些权限请求。</p><p>简单来说，手机应用想要读取用户的信息和访问某些功能是需要用户手动同意的。这种“权限”是强制要求应用“先申请，后使用”，目的肯定是想要尽可能把控制权交给用户自己，可是为什么现在的应用都无视这个设置了呢？权限有什么用呢？</p><p>谷歌将安卓应用的权限分为三个级别：普通权限(<em>Normal permissions</em>)、签名权限(<em>Signature permissions</em>)、危险权限(<em>Dangerous permissions</em>)。</p><ul><li>普通权限表示一些不会影响到用户隐私的权限，例如访问互联网、访问网络状态、显示通知等等。</li><li>签名权限一般和某些系统应用联动，例如更换桌面图标，就需要桌面启动器提供的权限。</li><li>危险权限表示可能影响到设备功能和用户隐私的权限，例如录音录像、访问照片文件、发送短信彩信等等。这类权限几乎都需要用户手动确认。</li></ul><h3 id="App-会拿这些权限做些什么？"><a href="#App-会拿这些权限做些什么？" class="headerlink" title="App 会拿这些权限做些什么？"></a>App 会拿这些权限做些什么？</h3><p>回到刚刚微信的权限示例截图，来具体分析一下。</p><ul><li>发送短信/彩信：这一项权限大家应该不陌生，会想大约五年以前，可能你的手机中病毒后第一件事就是“帮”你向运营商订购一大堆“彩铃”“礼包”“游戏充值卡”，由此来获利；而且以前的手机病毒还通过手机短信群发病毒链接，以此来进行传播。那么微信拿它有什么用呢？其实是在你<strong>注册微信/验证微信密保/重置微信密码</strong>时，“帮助”你发送一条校验短信的，当然这条短信可以自己手动发出，所以这项权限——<strong>拒绝</strong></li><li>读取联系人/修改联系人：发现微信在给你推荐通讯录好友了吗？是的，微信拿这一项权限就是用来实现这个功能的。当然我们可以猜测，微信可能会利用你的通讯录实现信息联网，如果你并不需要推荐手机通讯录微信好友的功能，那么建议——<strong>拒绝</strong></li><li>定位：不必多说，在你向好友共享位置的时候就会用到它，如果你不想时时刻刻让微信了解你的行踪，在 Android 10 及以上的系统中，可以选择——<strong>仅在使用过程中允许</strong></li><li>获取手机信息/获取应用列表/访问手机账户：这一般是为了让应用识别你的登陆手机是否是常用手机，避免盗号风险，不过还是那句话，你也不知道应用会在后台拿你的数据干嘛。获取手机信息——<strong>允许</strong>；获取应用列表/访问手机账户——<strong>拒绝</strong></li><li>相机/录音：这两个是最容易出现隐私泄露风险的，但是你也不得不允许的权限。你想在朋友圈分享小视频，你需要允许微信访问相机；你想给好友发送语音，你需要允许微信录音。所以为了不牺牲功能还是选择——<strong>允许</strong></li><li>读写手机存储：这是一项非常有争议的功能，想了解详细的说明请<strong>继续阅读</strong>。你只需要知道，本来你不需要给这个权限你也能正常使用，但是你不得不给这个权限。我们妥协吧，选择——<strong>允许</strong></li><li>“设置相关”：这些权限可以按照需求开启，一般允许<strong>显示悬浮窗</strong>和<strong>常驻通知</strong>，因为这两个权限在屏幕上都能看得到的，而且不会对隐私有关。所以按照需求可以——<strong>选择性开启</strong></li></ul><h2 id="2-App-为什么能拖慢手机运行速度？"><a href="#2-App-为什么能拖慢手机运行速度？" class="headerlink" title="2-App 为什么能拖慢手机运行速度？"></a>2-App 为什么能拖慢手机运行速度？</h2><p>App 运行的时候会占用系统资源，这我们都知道，但是为什么我没有用这些 App 的时候，手机还是很卡顿、耗电还是很高？</p><p>这就牵扯到应用在安卓系统中的一项功能——<strong>自启动</strong></p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/ysxw-2020-06-11-1.png" alt="ysxw-2020-06-11-1"></p><p><strong>自启动</strong>本身并不是一个坏东西，你的手机电脑启动的时候，就会自动启动一些系统应用：启动桌面应用，这样你才能看到应用图标；启动设置，这样你的手机才能自动连接上无线网络和蓝牙。也就是说，合理利用“自启动”这个功能是能够方便用户的使用的，但是错就错在很多应用<strong>滥用</strong>了“自启动”功能。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>自启动可以按照启动对象分为：<strong>系统唤醒</strong>和<strong>关联唤醒</strong></p><h4 id="系统唤醒"><a href="#系统唤醒" class="headerlink" title="系统唤醒"></a>系统唤醒</h4><p>系统自启动是使用了 Android 提供的：Broadcast 系统广播和 Receiver 广播接收类来完成的。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/boardcast.actions.png" alt="boardcast.actions"></p><center>Android 9广播通知多达219种</center><p>系统广播可以说是知无不言，可以理解为安卓系统对着所有 App 用大喇叭喊道：</p><ul><li>我开机啦！</li><li>我在充电啦！</li><li>我充电完成啦！</li><li>我连接上网络啦！</li><li>我的下载任务完成啦！</li><li>我安装好应用啦！</li><li>…………</li></ul><p>那么既然系统都这么喊了，我应用是不是应该做点什么？于是应用就添加了相应行为(<em>action</em>)的接收器，当应用一旦接收到系统的广播，就会开始执行自启动，这就是为什么你没有点击应用图标，应用却还能照常运行。</p><p>示例 MyBroadcastReceiver.java 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_BOOT = <span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_SCREEN_ON = <span class="string">&quot;android.intent.ACTION_SCREEN_ON&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_SCREEN_OFF = <span class="string">&quot;android.intent.ACTION_SCREEN_OFF&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_CONNECTION_CHANGED = <span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_WIFI_CHANGED = <span class="string">&quot;android.net.wifi.WIFI_STATE_CHANGED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_ADDED_APP = <span class="string">&quot;android.intent.action.PACKAGE_ADDED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_REMOVED_APP = <span class="string">&quot;android.intent.action.PACKAGE_REMOVED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_MEDIA_MOUNTED = <span class="string">&quot;android.intent.action.MEDIA_MOUNTED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_MEDIA_REMOVED = <span class="string">&quot;android.intent.action.MEDIA_REMOVED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_POWER_CON = <span class="string">&quot;android.intent.action.ACTION_POWER_CONNECTED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_POWER_DISCON = <span class="string">&quot;android.intent.action.ACTION_POWER_DISCONNECTED&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_WALLPAPER_CHANGED = <span class="string">&quot;android.intent.action.WALLPAPER_CHANGED&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (intent.getAction().equals(ACTION_BOOT))&#123;</span><br><span class="line">            TipsUtils.notify(context, <span class="string">&quot;开机完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_SCREEN_ON)) &#123;</span><br><span class="line">            TipsUtils.notify(context, <span class="string">&quot;屏幕打开&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_ADDED_APP)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已安装应用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_REMOVED_APP)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已卸载应用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_WIFI_CHANGED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;WiFi连接变化&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_CONNECTION_CHANGED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;网络连接变化&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_MEDIA_MOUNTED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已挂载存储介质&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(intent.getAction().equals(ACTION_MEDIA_REMOVED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已移除存储介质&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_POWER_CON)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已连接电源&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_POWER_DISCON)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已断开电源&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(ACTION_WALLPAPER_CHANGED)) &#123;</span><br><span class="line">            TipsUtils.notify(context,<span class="string">&quot;已更换壁纸&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关联唤醒"><a href="#关联唤醒" class="headerlink" title="关联唤醒"></a>关联唤醒</h4><p>顾名思义，关联启动就是已经运行的应用去启动其他应用的行为，要是说现在的定制安卓系统能够防止系统唤醒，可是关联唤醒可是不那么容易防止的。因为很多时候关联唤醒的必要的，比如你想在”图库”中分享图片到”QQ”，那么图库就必须唤醒 QQ，你想在”淘宝”中支付，淘宝就必须唤醒支付宝。</p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/zfb-被关联启动.png" alt="zfb-被关联启动" style="zoom:50%;" /><center>在某手机管家中显示支付宝被关联启动的情况</center><p>Android 操作系统启动就是上文说的“系统唤醒”；</p><p>手机淘宝想要启动支付宝付款我知道，还有那么多奇奇怪怪的应用，干嘛要启动支付宝？</p><p>其实并不是应用要主动启动支付宝，故意拖慢你手机速度。实际上是其他应用使用了支付宝的 SDK，也就是内嵌了支付宝的一部分用来方便用户通过支付宝支付。但是其他应用没办法控制 SDK 的行为，这相当于霸王条款：你想用我的功能，就别管我做什么。</p><p><img src="https://ryzenx.oss-accelerate.aliyuncs.com/img/2020/ysxw-2020-06-11-2.png" alt="ysxw-2020-06-11-2"></p><p>除了阿里系的 SDK，还有腾讯系的 SDK、百度系的 SDK、头条系的 SDK 等等，很多应用都使用了这些 SDK 来便捷化应用的开发。比如我想实现地图导航，采取高德地图的 SDK 就可以，不需要开发者自己去设计地图、设计路线，但是这个高德地图 SDK 具体除了实现地图导航，还要干些什么，那开发者也是不得而知的。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>App 想要自启动，在后台一直运行的目的其实挺复杂。</p><p>往好的方面说：你可以及时收到消息，能够在应用间更加流畅的使用不同的功能；</p><p>往坏的方面说：应用在后台收集你的数据，用来实现用户画像或者干脆直接出售。</p><h2 id="3-App-做的这些事情有必要吗？"><a href="#3-App-做的这些事情有必要吗？" class="headerlink" title="3-App 做的这些事情有必要吗？"></a>3-App 做的这些事情有必要吗？</h2><p>很明确的说：<strong>大多数是没必要的</strong></p><p>也就是说，很多权限不给应用，应用不需要后台自启动，你的使用上不会有任何影响。</p><p>就拿上文说的<strong>读写手机存储</strong>，对于大多数应用来说，根本不需要这一项权限，但是事实上大多数应用都会向你请求这一权限，<strong>不允许还没法用！</strong>应用会给出各种各样的理由：不给权限没办法保存图片；不给权限您不能上传图片；不给权限您不能下载音乐……</p><p>事实：</p><p>想要访问相册？安卓提供了通过“图库”应用获得你图片的方法，你可以选择图片或者视频，应用也只能读取到你所选择的图片，给予应用<strong>读写手机存储</strong>的权限之后，它能够读取你<strong>所有</strong>的照片。</p><p>没法保存数据？安卓为应用在存储中专门划分了独立的存储空间，就在<code>Android/data</code>中，按照应用分成文件夹，互不干扰不杂乱，给予应用<strong>读写手机存储</strong>的权限后，应用想保存在哪里就保存在哪里，想创建多少个文件夹就创建多少个文件夹，垃圾数据想存多少就存多少，而且卸载了应用还是不能完全删除。</p><p>想要发送通知？GMS 提供了统一的通知发送 API，应用不需要持续运行也能发送通知。没有 GMS？国内也有统一通知平台，比如 MiPush。</p><p>本来能够通过官方的渠道实现某一项功能，反而大费周章想你索取权限，这些 App 的目的实在让人琢磨不透。</p><h2 id="4-国内-App-乱象"><a href="#4-国内-App-乱象" class="headerlink" title="4-国内 App 乱象"></a>4-国内 App 乱象</h2><p>很有意思的是，网络上那些最“讨厌”的 App，往往是大家常用的国产 App。反而国外的 App 十分“乖巧”。</p><p>而且国内的 App 功能相当复杂：购物、聊天、直播、新闻、小视频……结果就是<strong>App 容量大幅增大</strong>，你是否已经习惯了只用来支付的支付宝占用 270MB 的容量？是否习惯了只用来聊天看朋友圈的微信占用 530MB 的容量？你是否习惯了网络购物的淘宝占用 430MB 的容量？</p><p>曾几何时，内存 1GB 不卡、2GB 流畅、4GB 全能；存储空间 8GB 够用、16GB 随心、32GB 海量。而现在的国产手机高配版直接内存 12GB、存储高达 512GB，甚至内存低于 6GB 就会被认为太小无法流畅运行。</p><p>几年之前诺基亚手机回归，诺基亚为中国市场推出的 8GB 大内存版本的做法不知是喜是忧。要知道除了不能打电话其他啥都能干的 Windows，仅仅 2GB 的内存就能运行，4GB 内存就能流畅运行办公软件；而现在手机的内存和存储容量，比大多数普通笔记本电脑还要大。但是你依然会觉得卡顿。</p><p>要知道在印度，很多人的手机内存还只有 2GB，存储空间也才仅仅 16GB，然而他们跟我们享受着同一个互联网生活：网购、发照片、导航、直播……</p><p><strong>应该反思这究竟是我们的软件厂商“技术很好”还是“技术很差”？</strong></p><h2 id="5-我想做手机的主人？"><a href="#5-我想做手机的主人？" class="headerlink" title="5-我想做手机的主人？"></a>5-我想做手机的主人？</h2><p>很抱歉，目前甚至之后的很多年，国内安卓圈依然会保持这样一个乱象，App 为了抢占你手机的隐私数据费劲心机。一方面是国家没有针对性的法律条文，一方面是互联网公司的利益驱使。</p><p>最近，小米和华为都主动向应用的“流氓”行为作出了行动，MIUI 和 EMUI 内置的权限管理能够显示 App 的后台行为，并且制止其读取用户隐私数据。可以说开了一个好头，我也希望能有更多的厂商能够加入，尽快实现安卓手机 App 的法律化、规范化、合理化。</p><p>当然，如果你现在实在受不了 App 采集你的隐私，可以换用 iPhone。iOS 生态圈的应用将会严格进行审核，几乎没有上述的问题：不会不经允许读取个人信息，不会后台占用，不会产生垃圾数据……</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;App-对你的手机做了什么？&quot;&gt;&lt;a href=&quot;#App-对你的手机做了什么？&quot; class=&quot;headerlink&quot; title=&quot;App 对你的手机做了什么？&quot;&gt;&lt;/a&gt;App 对你的手机做了什么？&lt;/h1&gt;&lt;p&gt;前段时间，央视新闻频道播出了一则&lt;a href=&quot;http://m.news.cctv.com/2020/06/08/ARTImcAiqsUb3bPRnKMS8nBk200608.shtml&quot;&gt;&lt;strong&gt;手机 App 频繁自启动 收集个人隐私触目惊心&lt;/strong&gt;的新闻&lt;/a&gt;，报告出多款常用的手机 App 在后台有自启动、读取照片文件、读取手机信息和读取定位信息的行为。这则新闻再次引起了很多人的关注。虽然在手机普及的信息时代，信息的互通给大家带来了极大的便利，但是个人的隐私信息是否能够”守得住“需要引起更大关注。&lt;/p&gt;
&lt;p&gt;下面我将基于 Android 平台，以开发者的身份深入解析：&lt;strong&gt;App 到底在后台对你的手机做了什么&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Android = 安卓&lt;/p&gt;
&lt;p&gt;App = 应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;本文是由Steven Yan原创&lt;/center&gt;

&lt;center&gt;转载或引用请注明作者和出处👉&lt;a href=&quot;https://ryzenx.com/2020/06/app对你的手机做了什么/&quot;&gt;RyzenX.com&lt;/a&gt;&lt;/center&gt;
    
    </summary>
    
    
      <category term="essay" scheme="https://ryzenx.com/categories/essay/"/>
    
    
      <category term="Android" scheme="https://ryzenx.com/tags/android/"/>
    
      <category term="公众号文章" scheme="https://ryzenx.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>git忽略文件换行/回车符和权限</title>
    <link href="https://ryzenx.com/2020/06/git-ignore-crlf/"/>
    <id>https://ryzenx.com/2020/06/git-ignore-crlf/</id>
    <published>2020-06-10T11:38:01.000Z</published>
    <updated>2021-03-07T13:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git-忽略换行符和权限变化"><a href="#git-忽略换行符和权限变化" class="headerlink" title="git 忽略换行符和权限变化"></a>git 忽略换行符和权限变化</h1><blockquote><p>由于我经常在多平台写代码，Windows/macOS/Linux，每个系统的换行符又不一样，导致git提交的时候会由一大堆的变化，当然这些变化都是没必要的。故在此备忘。</p></blockquote><span id="more"></span><h2 id="1-什么是换行符"><a href="#1-什么是换行符" class="headerlink" title="1-什么是换行符"></a>1-什么是换行符</h2><p><code>&quot;\r&quot;</code>是回车：使光标到行首（carriage return）</p><p><code>&quot;\n&quot;</code>是换行：使光标下移一格（line feed）</p><p><code>\r</code> 是回车（return）</p><p><code>\n</code> 是换行，（newline）</p><p>对于换行这个动作，unix下一般只有一个0x0A表示换行(“\n”），Windows下一般都是0x0D和0x0A两个字符(“\r\n”)，macOS则采用回车符CR表示下一行(\r)，Unix系统里，每行结尾只有“&lt;换行&gt;”，即“\n”；Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\r\n”；Mac系统里，每行结尾是“&lt;回车&gt;”,即“\r”。</p><p>windows采用回车+换行CR/LF表示下一行,即^M$ </p><h2 id="2-git如何忽略"><a href="#2-git如何忽略" class="headerlink" title="2-git如何忽略"></a>2-git如何忽略</h2><ul><li><p>忽略换行符：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf false</span><br><span class="line">git config --global core.safecrlf true</span><br></pre></td></tr></table></figure></li><li><p>忽略权限变化：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.filemode false</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;git-忽略换行符和权限变化&quot;&gt;&lt;a href=&quot;#git-忽略换行符和权限变化&quot; class=&quot;headerlink&quot; title=&quot;git 忽略换行符和权限变化&quot;&gt;&lt;/a&gt;git 忽略换行符和权限变化&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于我经常在多平台写代码，Windows/macOS/Linux，每个系统的换行符又不一样，导致git提交的时候会由一大堆的变化，当然这些变化都是没必要的。故在此备忘。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://ryzenx.com/categories/note/"/>
    
    
      <category term="git" scheme="https://ryzenx.com/tags/git/"/>
    
  </entry>
  
</feed>
